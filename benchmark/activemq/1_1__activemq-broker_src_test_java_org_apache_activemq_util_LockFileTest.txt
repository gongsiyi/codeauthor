1:8c66fba: /**
1:8c66fba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c66fba:  * contributor license agreements.  See the NOTICE file distributed with
1:8c66fba:  * this work for additional information regarding copyright ownership.
1:8c66fba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c66fba:  * (the "License"); you may not use this file except in compliance with
1:8c66fba:  * the License.  You may obtain a copy of the License at
1:8c66fba:  *
1:8c66fba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8c66fba:  *
1:8c66fba:  * Unless required by applicable law or agreed to in writing, software
1:8c66fba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c66fba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c66fba:  * See the License for the specific language governing permissions and
1:8c66fba:  * limitations under the License.
1:8c66fba:  */
1:8c66fba: package org.apache.activemq.util;
1:8c66fba: 
1:8c66fba: import java.io.File;
1:8c66fba: import org.junit.Test;
1:8c66fba: 
1:8c66fba: import static org.junit.Assert.assertFalse;
1:8c66fba: import static org.junit.Assert.assertTrue;
1:8c66fba: 
1:8c66fba: public class LockFileTest {
1:8c66fba: 
1:8c66fba:     @Test
1:8c66fba:     public void testNoDeleteOnUnlockIfNotLocked() throws Exception {
1:8c66fba: 
1:8c66fba:         File lockFile = new File(IOHelper.getDefaultDataDirectory(), "lockToTest1");
1:55f040e:         IOHelper.mkdirs(lockFile.getParentFile());
2:8c66fba:         lockFile.createNewFile();
1:8c66fba: 
1:8c66fba:         LockFile underTest = new LockFile(lockFile, true);
1:8c66fba: 
1:8c66fba:         underTest.lock();
1:8c66fba: 
1:86c826c:         // will fail on windows b/c the file is open
1:86c826c:         if ( lockFile.delete() ) {
1:8c66fba: 
1:86c826c:             assertFalse("no longer valid", underTest.keepAlive());
1:8c66fba: 
1:86c826c:             // a slave gets in
1:86c826c:             lockFile.createNewFile();
1:8c66fba: 
1:86c826c:             underTest.unlock();
1:8c66fba: 
1:86c826c:             assertTrue("file still exists after unlock when not locked", lockFile.exists());
1:86c826c:         }
1:8c66fba: 
1:8c66fba:     }
1:8c66fba: 
1:8c66fba:     @Test
1:8c66fba:     public void testDeleteOnUnlockIfLocked() throws Exception {
1:8c66fba: 
1:8c66fba:         File lockFile = new File(IOHelper.getDefaultDataDirectory(), "lockToTest2");
1:55f040e:         IOHelper.mkdirs(lockFile.getParentFile());
1:8c66fba:         lockFile.createNewFile();
1:8c66fba: 
1:8c66fba:         LockFile underTest = new LockFile(lockFile, true);
1:8c66fba: 
1:8c66fba:         underTest.lock();
1:8c66fba: 
1:8c66fba:         assertTrue("valid", underTest.keepAlive());
1:8c66fba: 
2:8c66fba:         underTest.unlock();
1:8c66fba: 
1:8c66fba:         assertFalse("file deleted on unlock", lockFile.exists());
1:8c66fba: 
1:8c66fba:     }
1:8c66fba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:86c826c
/////////////////////////////////////////////////////////////////////////
1:         // will fail on windows b/c the file is open
1:         if ( lockFile.delete() ) {
1:             assertFalse("no longer valid", underTest.keepAlive());
1:             // a slave gets in
1:             lockFile.createNewFile();
1:             underTest.unlock();
1:             assertTrue("file still exists after unlock when not locked", lockFile.exists());
1:         }
commit:55f040e
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.mkdirs(lockFile.getParentFile());
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.mkdirs(lockFile.getParentFile());
commit:8c66fba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.File;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class LockFileTest {
1: 
1:     @Test
1:     public void testNoDeleteOnUnlockIfNotLocked() throws Exception {
1: 
1:         File lockFile = new File(IOHelper.getDefaultDataDirectory(), "lockToTest1");
1:         lockFile.createNewFile();
1: 
1:         LockFile underTest = new LockFile(lockFile, true);
1: 
1:         underTest.lock();
1: 
0:         lockFile.delete();
1: 
0:         assertFalse("no longer valid", underTest.keepAlive());
1: 
0:         // a slave gets in
1:         lockFile.createNewFile();
1: 
1:         underTest.unlock();
1: 
0:         assertTrue("file still exists after unlock when not locked", lockFile.exists());
1: 
1:     }
1: 
1:     @Test
1:     public void testDeleteOnUnlockIfLocked() throws Exception {
1: 
1:         File lockFile = new File(IOHelper.getDefaultDataDirectory(), "lockToTest2");
1:         lockFile.createNewFile();
1: 
1:         LockFile underTest = new LockFile(lockFile, true);
1: 
1:         underTest.lock();
1: 
1:         assertTrue("valid", underTest.keepAlive());
1: 
1:         underTest.unlock();
1: 
1:         assertFalse("file deleted on unlock", lockFile.exists());
1: 
1:     }
1: }
============================================================================