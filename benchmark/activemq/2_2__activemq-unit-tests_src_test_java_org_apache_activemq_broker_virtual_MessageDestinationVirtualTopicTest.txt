1:4e63ee7: /**
1:4e63ee7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4e63ee7:  * contributor license agreements.  See the NOTICE file distributed with
1:4e63ee7:  * this work for additional information regarding copyright ownership.
1:4e63ee7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4e63ee7:  * (the "License"); you may not use this file except in compliance with
1:4e63ee7:  * the License.  You may obtain a copy of the License at
1:4e63ee7:  *
1:4e63ee7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4e63ee7:  *
1:4e63ee7:  * Unless required by applicable law or agreed to in writing, software
1:4e63ee7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4e63ee7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4e63ee7:  * See the License for the specific language governing permissions and
1:4e63ee7:  * limitations under the License.
1:4e63ee7:  */
1:4e63ee7: package org.apache.activemq.broker.virtual;
1:4e63ee7: 
1:4e63ee7: import org.apache.activemq.ActiveMQConnectionFactory;
1:4e63ee7: import org.apache.activemq.broker.BrokerService;
1:4e63ee7: import org.junit.Before;
1:4e63ee7: import org.junit.Ignore;
1:4e63ee7: import org.junit.Test;
1:4e63ee7: import org.junit.runner.RunWith;
1:4e63ee7: import org.slf4j.Logger;
1:4e63ee7: import org.slf4j.LoggerFactory;
1:4e63ee7: import org.springframework.test.context.ContextConfiguration;
1:4e63ee7: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1:4e63ee7: 
1:4e63ee7: import javax.annotation.Resource;
1:4e63ee7: import javax.jms.*;
1:4e63ee7: import java.util.concurrent.CountDownLatch;
1:4e63ee7: 
1:4e63ee7: import static org.junit.Assert.assertEquals;
1:4e63ee7: 
1:4e63ee7: @RunWith(SpringJUnit4ClassRunner.class)
1:4e63ee7: @ContextConfiguration({ "virtual-topic-network-test.xml" })
1:4e63ee7: public class MessageDestinationVirtualTopicTest {
1:4e63ee7: 
1:4e63ee7:     private static final Logger LOG = LoggerFactory.getLogger(MessageDestinationVirtualTopicTest.class);
1:4e63ee7: 
1:4e63ee7:     private SimpleMessageListener listener1;
1:4e63ee7: 
1:4e63ee7:     private SimpleMessageListener listener2;
1:4e63ee7: 
1:573b366:     private SimpleMessageListener listener3;
1:573b366: 
1:4e63ee7:     @Resource(name = "broker1")
1:4e63ee7:     private BrokerService broker1;
1:4e63ee7: 
1:4e63ee7:     @Resource(name = "broker2")
1:4e63ee7:     private BrokerService broker2;
1:4e63ee7: 
1:4e63ee7:     private MessageProducer producer;
1:4e63ee7: 
1:4e63ee7:     private Session session1;
1:4e63ee7: 
1:4e63ee7:     public void init() throws JMSException {
1:4e63ee7:         // Create connection on Broker B2
1:4e63ee7:         ConnectionFactory broker2ConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:62616");
1:4e63ee7:         Connection connection2 = broker2ConnectionFactory.createConnection();
1:4e63ee7:         connection2.start();
1:4e63ee7:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4e63ee7:         Queue consumerDQueue = session2.createQueue("Consumer.D.VirtualTopic.T1");
1:4e63ee7: 
1:4e63ee7:         // Bind listener on queue for consumer D
1:4e63ee7:         MessageConsumer consumer = session2.createConsumer(consumerDQueue);
1:4e63ee7:         listener2 = new SimpleMessageListener();
1:4e63ee7:         consumer.setMessageListener(listener2);
1:4e63ee7: 
1:4e63ee7:         // Create connection on Broker B1
1:4e63ee7:         ConnectionFactory broker1ConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:4e63ee7:         Connection connection1 = broker1ConnectionFactory.createConnection();
1:4e63ee7:         connection1.start();
1:4e63ee7:         session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4e63ee7:         Queue consumerCQueue = session1.createQueue("Consumer.C.VirtualTopic.T1");
1:4e63ee7: 
1:4e63ee7:         // Bind listener on queue for consumer D
1:4e63ee7:         MessageConsumer consumer1 = session1.createConsumer(consumerCQueue);
1:4e63ee7:         listener1 = new SimpleMessageListener();
1:4e63ee7:         consumer1.setMessageListener(listener1);
1:4e63ee7: 
1:573b366:         // Create listener on Broker B1 for VT T2 witout setOriginalDest
1:573b366:         Queue consumer3Queue = session1.createQueue("Consumer.A.VirtualTopic.T2");
1:573b366: 
1:573b366:         // Bind listener on queue for consumer D
1:573b366:         MessageConsumer consumerD = session1.createConsumer(consumer3Queue);
1:573b366:         listener3 = new SimpleMessageListener();
1:573b366:         consumerD.setMessageListener(listener3);
1:573b366: 
1:4e63ee7:         // Create producer for topic, on B1
1:573b366:         Topic virtualTopicT1 = session1.createTopic("VirtualTopic.T1,VirtualTopic.T2");
1:4e63ee7:         producer = session1.createProducer(virtualTopicT1);
1:4e63ee7:     }
1:4e63ee7: 
1:4e63ee7:     @Test
1:4e63ee7:     public void testDestinationNames() throws Exception {
1:4e63ee7: 
1:4e63ee7:         LOG.info("Started waiting for broker 1 and 2");
1:4e63ee7:         broker1.waitUntilStarted();
1:4e63ee7:         broker2.waitUntilStarted();
1:4e63ee7:         LOG.info("Broker 1 and 2 have started");
1:4e63ee7: 
1:4e63ee7:         init();
1:4e63ee7: 
1:4e63ee7:         // Create a monitor
1:573b366:         CountDownLatch monitor = new CountDownLatch(3);
1:4e63ee7:         listener1.setCountDown(monitor);
1:4e63ee7:         listener2.setCountDown(monitor);
1:573b366:         listener3.setCountDown(monitor);
1:4e63ee7: 
1:4e63ee7:         LOG.info("Sending message");
1:4e63ee7:         // Send a message on the topic
1:4e63ee7:         TextMessage message = session1.createTextMessage("Hello World !");
1:4e63ee7:         producer.send(message);
1:4e63ee7:         LOG.info("Waiting for message reception");
1:4e63ee7:         // Wait the two messages in the related queues
1:4e63ee7:         monitor.await();
1:4e63ee7: 
1:4e63ee7:         // Get the message destinations
1:4e63ee7:         String lastJMSDestination2 = listener2.getLastJMSDestination();
1:4e63ee7:         System.err.println(lastJMSDestination2);
1:4e63ee7:         String lastJMSDestination1 = listener1.getLastJMSDestination();
1:4e63ee7:         System.err.println(lastJMSDestination1);
1:4e63ee7: 
1:573b366:         String lastJMSDestination3 = listener3.getLastJMSDestination();
1:573b366:         System.err.println(lastJMSDestination3);
1:573b366: 
1:4e63ee7:         // The destination names
1:4e63ee7:         assertEquals("queue://Consumer.D.VirtualTopic.T1", lastJMSDestination2);
1:4e63ee7:         assertEquals("queue://Consumer.C.VirtualTopic.T1", lastJMSDestination1);
1:573b366:         assertEquals("topic://VirtualTopic.T2", lastJMSDestination3);
1:4e63ee7: 
1:4e63ee7:     }
1:4e63ee7: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:573b366
/////////////////////////////////////////////////////////////////////////
1:     private SimpleMessageListener listener3;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Create listener on Broker B1 for VT T2 witout setOriginalDest
1:         Queue consumer3Queue = session1.createQueue("Consumer.A.VirtualTopic.T2");
1: 
1:         // Bind listener on queue for consumer D
1:         MessageConsumer consumerD = session1.createConsumer(consumer3Queue);
1:         listener3 = new SimpleMessageListener();
1:         consumerD.setMessageListener(listener3);
1: 
1:         Topic virtualTopicT1 = session1.createTopic("VirtualTopic.T1,VirtualTopic.T2");
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch monitor = new CountDownLatch(3);
1:         listener3.setCountDown(monitor);
/////////////////////////////////////////////////////////////////////////
1:         String lastJMSDestination3 = listener3.getLastJMSDestination();
1:         System.err.println(lastJMSDestination3);
1: 
1:         assertEquals("topic://VirtualTopic.T2", lastJMSDestination3);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4e63ee7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.test.context.ContextConfiguration;
1: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1: 
1: import javax.annotation.Resource;
1: import javax.jms.*;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(SpringJUnit4ClassRunner.class)
1: @ContextConfiguration({ "virtual-topic-network-test.xml" })
1: public class MessageDestinationVirtualTopicTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageDestinationVirtualTopicTest.class);
1: 
1:     private SimpleMessageListener listener1;
1: 
1:     private SimpleMessageListener listener2;
1: 
1:     @Resource(name = "broker1")
1:     private BrokerService broker1;
1: 
1:     @Resource(name = "broker2")
1:     private BrokerService broker2;
1: 
1:     private MessageProducer producer;
1: 
1:     private Session session1;
1: 
1:     public void init() throws JMSException {
1:         // Create connection on Broker B2
1:         ConnectionFactory broker2ConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:62616");
1:         Connection connection2 = broker2ConnectionFactory.createConnection();
1:         connection2.start();
1:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue consumerDQueue = session2.createQueue("Consumer.D.VirtualTopic.T1");
1: 
1:         // Bind listener on queue for consumer D
1:         MessageConsumer consumer = session2.createConsumer(consumerDQueue);
1:         listener2 = new SimpleMessageListener();
1:         consumer.setMessageListener(listener2);
1: 
1:         // Create connection on Broker B1
1:         ConnectionFactory broker1ConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection connection1 = broker1ConnectionFactory.createConnection();
1:         connection1.start();
1:         session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue consumerCQueue = session1.createQueue("Consumer.C.VirtualTopic.T1");
1: 
1:         // Bind listener on queue for consumer D
1:         MessageConsumer consumer1 = session1.createConsumer(consumerCQueue);
1:         listener1 = new SimpleMessageListener();
1:         consumer1.setMessageListener(listener1);
1: 
1:         // Create producer for topic, on B1
0:         Topic virtualTopicT1 = session1.createTopic("VirtualTopic.T1");
1:         producer = session1.createProducer(virtualTopicT1);
1:     }
1: 
1:     @Test
1:     public void testDestinationNames() throws Exception {
1: 
1:         LOG.info("Started waiting for broker 1 and 2");
1:         broker1.waitUntilStarted();
1:         broker2.waitUntilStarted();
1:         LOG.info("Broker 1 and 2 have started");
1: 
1:         init();
1: 
1:         // Create a monitor
0:         CountDownLatch monitor = new CountDownLatch(2);
1:         listener1.setCountDown(monitor);
1:         listener2.setCountDown(monitor);
1: 
1:         LOG.info("Sending message");
1:         // Send a message on the topic
1:         TextMessage message = session1.createTextMessage("Hello World !");
1:         producer.send(message);
1:         LOG.info("Waiting for message reception");
1:         // Wait the two messages in the related queues
1:         monitor.await();
1: 
1:         // Get the message destinations
1:         String lastJMSDestination2 = listener2.getLastJMSDestination();
1:         System.err.println(lastJMSDestination2);
1:         String lastJMSDestination1 = listener1.getLastJMSDestination();
1:         System.err.println(lastJMSDestination1);
1: 
1:         // The destination names
1:         assertEquals("queue://Consumer.D.VirtualTopic.T1", lastJMSDestination2);
1:         assertEquals("queue://Consumer.C.VirtualTopic.T1", lastJMSDestination1);
1: 
1:     }
1: }
============================================================================