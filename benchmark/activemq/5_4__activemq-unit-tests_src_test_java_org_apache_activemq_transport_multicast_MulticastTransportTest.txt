1:5739c6c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5739c6c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5739c6c:  *
1:5739c6c:  * Unless required by applicable law or agreed to in writing, software
1:5739c6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5739c6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5739c6c:  * See the License for the specific language governing permissions and
1:5739c6c:  * limitations under the License.
1:5739c6c:  */
1:5739c6c: package org.apache.activemq.transport.multicast;
2:5739c6c: 
1:93dc39b: import java.net.URI;
1:93dc39b: 
1:5739c6c: import org.apache.activemq.openwire.OpenWireFormat;
1:5739c6c: import org.apache.activemq.transport.CommandJoiner;
1:5739c6c: import org.apache.activemq.transport.Transport;
1:5739c6c: import org.apache.activemq.transport.udp.UdpTransportTest;
1:364337b: import org.apache.activemq.util.IntSequenceGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:5739c6c: 
1:5739c6c: /**
1:0bbc0ac:  *
1:5739c6c:  * 
1:5739c6c:  */
1:5739c6c: public class MulticastTransportTest extends UdpTransportTest {
1:93dc39b:     
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MulticastTransportTest.class);
1:5739c6c: 
1:5739c6c:     private String multicastURI = "multicast://224.1.2.3:6255";
1:5739c6c:     
1:5739c6c: 
1:5739c6c:     protected Transport createProducer() throws Exception {
1:fc00993:         LOG.info("Producer using URI: " + multicastURI);
1:5739c6c:         
1:5739c6c:         // we are not using the TransportFactory as this assumes that
1:5739c6c:         // transports talk to a server using a WireFormat Negotiation step
1:5739c6c:         // rather than talking directly to each other
1:5739c6c:         
1:5739c6c:         OpenWireFormat wireFormat = createWireFormat();
1:5739c6c:         MulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));
1:3d07b93:         transport.setLoopBackMode(false);
1:364337b:         transport.setSequenceGenerator(new IntSequenceGenerator());
1:5739c6c:         return new CommandJoiner(transport, wireFormat);
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     protected Transport createConsumer() throws Exception {
1:5739c6c:         OpenWireFormat wireFormat = createWireFormat();
1:5739c6c:         MulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));
1:3d07b93:         transport.setLoopBackMode(false);
1:364337b:         transport.setSequenceGenerator(new IntSequenceGenerator());
1:5739c6c:         return new CommandJoiner(transport, wireFormat);
1:5739c6c:     }
1:5739c6c: 
1:6549342:     @Override
1:6549342:     public void testSendingMediumMessage() throws Exception {
1:6549342:         // Ignoring, see AMQ-4973
1:6549342:     }
1:5739c6c: 
1:6549342:     @Override
1:6549342:     public void testSendingLargeMessage() throws Exception {
1:6549342:         // Ignoring, see AMQ-4973
1:6549342:     }
1:5739c6c: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:6549342
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void testSendingMediumMessage() throws Exception {
1:         // Ignoring, see AMQ-4973
1:     }
1:     @Override
1:     public void testSendingLargeMessage() throws Exception {
1:         // Ignoring, see AMQ-4973
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MulticastTransportTest.class);
1:         LOG.info("Producer using URI: " + multicastURI);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(MulticastTransportTest.class);
1: 
0:         log.info("Producer using URI: " + multicastURI);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MulticastTransportTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:3d07b93
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         transport.setLoopBackMode(false);
/////////////////////////////////////////////////////////////////////////
1:         transport.setLoopBackMode(false);
commit:364337b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntSequenceGenerator;
/////////////////////////////////////////////////////////////////////////
1:         transport.setSequenceGenerator(new IntSequenceGenerator());
1:         transport.setSequenceGenerator(new IntSequenceGenerator());
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.multicast;
1: 
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.transport.CommandJoiner;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.udp.UdpTransport;
1: import org.apache.activemq.transport.udp.UdpTransportTest;
1: 
0: import java.net.URI;
1: 
1: /**
1:  *
0:  * @version $Revision$
1:  */
1: public class MulticastTransportTest extends UdpTransportTest {
1:     
1:     private String multicastURI = "multicast://224.1.2.3:6255";
1:     
1: 
1:     protected Transport createProducer() throws Exception {
0:         System.out.println("Producer using URI: " + multicastURI);
1:         
1:         // we are not using the TransportFactory as this assumes that
1:         // transports talk to a server using a WireFormat Negotiation step
1:         // rather than talking directly to each other
1:         
1:         OpenWireFormat wireFormat = createWireFormat();
1:         MulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));
1:         return new CommandJoiner(transport, wireFormat);
1:     }
1: 
1:     protected Transport createConsumer() throws Exception {
1:         OpenWireFormat wireFormat = createWireFormat();
1:         MulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));
1:         return new CommandJoiner(transport, wireFormat);
1:     }
1: 
1: 
1: }
============================================================================