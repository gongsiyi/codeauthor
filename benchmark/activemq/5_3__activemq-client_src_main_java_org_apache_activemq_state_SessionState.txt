1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
12:d29ca2a: 
1:d29ca2a: package org.apache.activemq.state;
1:1ac3421: 
1:d29ca2a: import java.util.Collection;
1:ecf89a6: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:1ac3421: 
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.ProducerId;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: 
1:f812e34: public class SessionState {
1:d29ca2a:     final SessionInfo info;
1:f812e34: 
1:ecf89a6:     private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>();
1:ecf89a6:     private final Map<ConsumerId, ConsumerState> consumers = new ConcurrentHashMap<ConsumerId, ConsumerState>();
1:1ac3421:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
1:f812e34: 
1:d29ca2a:     public SessionState(SessionInfo info) {
1:d29ca2a:         this.info = info;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         return info.toString();
1:220ad62:     }
1:f812e34: 
1:d29ca2a:     public void addProducer(ProducerInfo info) {
1:f812e34:         checkShutdown();
1:f812e34:         producers.put(info.getProducerId(), new ProducerState(info));
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public ProducerState removeProducer(ProducerId id) {
1:b9e51d6:         ProducerState producerState = producers.remove(id);
1:b9e51d6:         if (producerState != null) {
1:b9e51d6:             if (producerState.getTransactionState() != null) {
1:b9e51d6:                 // allow the transaction to recreate dependent producer on recovery
1:b9e51d6:                 producerState.getTransactionState().addProducerState(producerState);
8:d29ca2a:             }
1:d29ca2a:         }
1:b9e51d6:         return producerState;
1:d29ca2a:     }
1:f812e34:     
1:d29ca2a:     public void addConsumer(ConsumerInfo info) {
1:f812e34:         checkShutdown();
1:f812e34:         consumers.put(info.getConsumerId(), new ConsumerState(info));
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     public ConsumerState removeConsumer(ConsumerId id) {
1:ecf89a6:         return consumers.remove(id);
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public SessionInfo getInfo() {
1:d29ca2a:         return info;
1:d29ca2a:     }
1:f812e34: 
1:ecf89a6:     public Set<ConsumerId> getConsumerIds() {
1:d29ca2a:         return consumers.keySet();
1:f812e34:     }
1:f812e34: 
1:ecf89a6:     public Set<ProducerId> getProducerIds() {
1:d29ca2a:         return producers.keySet();
1:f812e34:     }
1:f812e34: 
1:ecf89a6:     public Collection<ProducerState> getProducerStates() {
1:d29ca2a:         return producers.values();
1:220ad62:     }
1:f812e34: 
1:f812e34:     public ProducerState getProducerState(ProducerId producerId) {
1:ecf89a6:         return producers.get(producerId);
1:f812e34:     }
1:f812e34: 
1:ecf89a6:     public Collection<ConsumerState> getConsumerStates() {
1:d29ca2a:         return consumers.values();
1:1ac3421:     }
1:f812e34: 
1:2eaafc0:     public ConsumerState getConsumerState(ConsumerId consumerId) {
1:ecf89a6:         return consumers.get(consumerId);
1:1ac3421:     }
1:f812e34: 
1:1ac3421:     private void checkShutdown() {
1:ecf89a6:         if (shutdown.get()) {
1:f812e34:             throw new IllegalStateException("Disposed");
1:ecf89a6:         }
1:f812e34:     }
1:f812e34: 
1:1ac3421:     public void shutdown() {
1:f812e34:         shutdown.set(false);
1:86cbdfd:     }
1:1ac3421: 
1:1ac3421: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>();
1:     private final Map<ConsumerId, ConsumerState> consumers = new ConcurrentHashMap<ConsumerId, ConsumerState>();
/////////////////////////////////////////////////////////////////////////
0:         return producers.remove(id);
/////////////////////////////////////////////////////////////////////////
1:         return consumers.remove(id);
1:     public Set<ConsumerId> getConsumerIds() {
1:     public Set<ProducerId> getProducerIds() {
1:     public Collection<ProducerState> getProducerStates() {
1:         return producers.get(producerId);
1:     public Collection<ConsumerState> getConsumerStates() {
1:         return consumers.get(consumerId);
1:         if (shutdown.get()) {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class SessionState {
1: 
1: 
1:     }
1: 
1: 
1:         checkShutdown();
1:         producers.put(info.getProducerId(), new ProducerState(info));
1:     }
1: 
0:         return (ProducerState)producers.remove(id);
1: 
1:         checkShutdown();
1:         consumers.put(info.getConsumerId(), new ConsumerState(info));
1: 
1:     public ConsumerState removeConsumer(ConsumerId id) {
0:         return (ConsumerState)consumers.remove(id);
1:     }
1: 
1: 
1:     }
1: 
1:     }
1: 
1: 
1:     public ProducerState getProducerState(ProducerId producerId) {
0:         return (ProducerState)producers.get(producerId);
1:     }
1: 
1: 
1: 
0:         if (shutdown.get())
1:             throw new IllegalStateException("Disposed");
1:     }
1: 
1:         shutdown.set(false);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:220ad62
/////////////////////////////////////////////////////////////////////////
1:     }    
0: 	public ProducerState getProducerState(ProducerId producerId) {
0: 		return (ProducerState) producers.get(producerId);
1: 	}
commit:295850d
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:8b21570
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
commit:1ac3421
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
0:     	checkShutdown();
/////////////////////////////////////////////////////////////////////////
0:     	checkShutdown();
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     private void checkShutdown() {
0: 		if( shutdown.get() )
0: 			throw new IllegalStateException("Disposed");
1: 	}
1:     
1:     public void shutdown() {
0:     	shutdown.set(false);
1:     }
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.state;
1: 
1: import java.util.Collection;
1: import java.util.Set;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
0: public class SessionState {        
1:     final SessionInfo info;
1:     
0:     public final ConcurrentHashMap producers = new ConcurrentHashMap();
0:     public final ConcurrentHashMap consumers = new ConcurrentHashMap();
1:     
1:     public SessionState(SessionInfo info) {
1:         this.info = info;
1:     }        
1:     public String toString() {
1:         return info.toString();
1:     }
1:     
1:     public void addProducer(ProducerInfo info) {
0:         producers.put(info.getProducerId(), new ProducerState(info));            
1:     }        
1:     public ProducerState removeProducer(ProducerId id) {
0:         return (ProducerState) producers.remove(id);
1:     }
1:     
1:     public void addConsumer(ConsumerInfo info) {
0:         consumers.put(info.getConsumerId(), new ConsumerState(info));            
1:     }        
0:     public ConsumerState removeConsumer(ConsumerId id) {
0:         return (ConsumerState) consumers.remove(id);
1:     }
1:     
1:     public SessionInfo getInfo() {
1:         return info;
1:     }
1:     
0:     public Set getConsumerIds() {
1:         return consumers.keySet();
1:     }                
0:     public Set getProducerIds() {
1:         return producers.keySet();
1:     }
1:     
0:     public Collection getProducerStates() {
1:         return producers.values();
1:     }
1:     
0:     public Collection getConsumerStates() {
1:         return consumers.values();
1:     }        
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:b9e51d6
/////////////////////////////////////////////////////////////////////////
1:         ProducerState producerState = producers.remove(id);
1:         if (producerState != null) {
1:             if (producerState.getTransactionState() != null) {
1:                 // allow the transaction to recreate dependent producer on recovery
1:                 producerState.getTransactionState().addProducerState(producerState);
0:             }
0:         }
1:         return producerState;
0:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:2eaafc0
/////////////////////////////////////////////////////////////////////////
1:     public ConsumerState getConsumerState(ConsumerId consumerId) {
0:         return (ConsumerState)consumers.get(consumerId);
0:     }
0:     
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:04c3b07
/////////////////////////////////////////////////////////////////////////
0: 	public ProducerState getProducerState(ProducerId producerId) {
0: 		return (ProducerState) producers.get(producerId);
0: 	}
============================================================================