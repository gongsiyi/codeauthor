2:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
2:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
1:57a4071: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Session;
1:4743a20: 
1:d29ca2a: import junit.framework.TestCase;
1:4743a20: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d47855a: 
1:d29ca2a: /**
1:4743a20:  *
1:d29ca2a:  */
1:230a86c: public class SimpleTopicTest extends TestCase {
1:933eb2f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleTopicTest.class);
1:4743a20: 
1:d29ca2a:     protected BrokerService broker;
1:4743a20:     protected String clientURI = "tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false&wireFormat.maxInactivityDuration=0";
1:4743a20:     // protected String clientURI="tcp://localhost:61616";
1:4743a20:     protected String bindAddress = "tcp://localhost:61616?wireFormat.maxInactivityDuration=0";
1:4743a20:     // protected String bindAddress = "tcp://localhost:61616";
1:4743a20:     // protected String bindAddress="vm://localhost?marshal=true";
1:4743a20:     // protected String bindAddress="vm://localhost";
1:d29ca2a:     protected PerfProducer[] producers;
1:d29ca2a:     protected PerfConsumer[] consumers;
1:230a86c:     protected String destinationName = getClass().getName();
1:c4aae53:     protected int sampleCount = 20;
1:49325b6:     protected long sampleInternal = 10000;
1:4743a20:     protected int numberOfDestinations = 1;
1:cbb290c:     protected int numberOfConsumers = 1;
1:230a86c:     protected int numberofProducers = 1;
1:7f0583d:     protected int totalNumberOfProducers;
1:7f0583d:     protected int totalNumberOfConsumers;
1:63e3f41:     protected int playloadSize = 12;
1:230a86c:     protected byte[] array;
1:6892f8c:     protected ConnectionFactory factory;
1:4743a20: 
1:4743a20:     /**
1:d29ca2a:      * Sets up a test where the producer and consumer have their own connection.
1:4743a20:      *
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:4743a20:     @Override
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         if (broker == null) {
1:5074fef:             broker = createBroker(bindAddress);
4:d29ca2a:         }
1:7f0583d:         factory = createConnectionFactory(clientURI);
1:230a86c:         Connection con = factory.createConnection();
1:230a86c:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4743a20: 
1:7f0583d:         LOG.info("Running " + numberofProducers + " producer(s) and " + numberOfConsumers + " consumer(s) per " + numberOfDestinations + " Destination(s)");
1:4743a20: 
1:4743a20:         totalNumberOfConsumers = numberOfConsumers * numberOfDestinations;
1:4743a20:         totalNumberOfProducers = numberofProducers * numberOfDestinations;
1:7f0583d:         producers = new PerfProducer[totalNumberOfProducers];
1:7f0583d:         consumers = new PerfConsumer[totalNumberOfConsumers];
1:7f0583d:         int consumerCount = 0;
1:7f0583d:         int producerCount = 0;
1:4743a20:         for (int k = 0; k < numberOfDestinations; k++) {
1:4743a20:             Destination destination = createDestination(session, destinationName + ":" + k);
1:933eb2f:             LOG.info("Testing against destination: " + destination);
1:230a86c:             for (int i = 0; i < numberOfConsumers; i++) {
1:7f0583d:                 consumers[consumerCount] = createConsumer(factory, destination, consumerCount);
1:7f0583d:                 consumerCount++;
1:e0fdce4:             }
1:230a86c:             for (int i = 0; i < numberofProducers; i++) {
1:230a86c:                 array = new byte[playloadSize];
1:230a86c:                 for (int j = i; j < array.length; j++) {
1:4743a20:                     array[j] = (byte) j;
1:86cbdfd:                 }
1:7f0583d:                 producers[producerCount] = createProducer(factory, destination, i, array);
1:7f0583d:                 producerCount++;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         con.close();
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:e0fdce4: 
1:4743a20:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:230a86c:         for (int i = 0; i < numberOfConsumers; i++) {
1:d29ca2a:             consumers[i].shutDown();
1:d29ca2a:         }
1:230a86c:         for (int i = 0; i < numberofProducers; i++) {
1:d29ca2a:             producers[i].shutDown();
1:d29ca2a:         }
1:230a86c:         if (broker != null) {
1:d29ca2a:             broker.stop();
1:230a86c:             broker = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:e0fdce4: 
1:230a86c:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
1:d29ca2a:         return s.createTopic(destinationName);
1:d29ca2a:     }
1:e0fdce4: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new broker
1:4743a20:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:5582cc1:     protected BrokerService createBroker(String uri) throws Exception {
1:230a86c:         BrokerService answer = new BrokerService();
1:4743a20:         configureBroker(answer, uri);
1:d29ca2a:         answer.start();
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:e0fdce4: 
1:230a86c:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:230a86c:         return new PerfProducer(fac, dest, payload);
1:d29ca2a:     }
10:d29ca2a: 
1:230a86c:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:230a86c:         return new PerfConsumer(fac, dest);
1:d29ca2a:     }
1:4743a20: 
1:4743a20:     protected void configureBroker(BrokerService answer, String uri) throws Exception {
1:d29ca2a:         answer.setDeleteAllMessagesOnStartup(true);
1:5582cc1:         answer.addConnector(uri);
1:49325b6:         answer.setUseShutdownHook(false);
1:d29ca2a:     }
1:d29ca2a: 
1:5582cc1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:5582cc1:         return new ActiveMQConnectionFactory(uri);
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void testPerformance() throws JMSException, InterruptedException {
1:7f0583d:         for (int i = 0; i < totalNumberOfConsumers; i++) {
1:e0fdce4:             consumers[i].start();
1:e0fdce4:         }
1:7f0583d:         for (int i = 0; i < totalNumberOfProducers; i++) {
1:e0fdce4:             producers[i].start();
1:e0fdce4:         }
1:c4aae53:         LOG.info("Sampling performance " + sampleCount + " times at a " + sampleInternal + " ms interval.");
1:c4aae53:         for (int i = 0; i < sampleCount; i++) {
1:230a86c:             Thread.sleep(sampleInternal);
1:e0fdce4:             dumpProducerRate();
1:e0fdce4:             dumpConsumerRate();
1:e0fdce4:         }
1:7f0583d:         for (int i = 0; i < totalNumberOfProducers; i++) {
1:e0fdce4:             producers[i].stop();
1:e0fdce4:         }
1:7f0583d:         for (int i = 0; i < totalNumberOfConsumers; i++) {
1:e0fdce4:             consumers[i].stop();
1:d29ca2a:         }
1:d29ca2a:     }
1:e0fdce4: 
1:4743a20:     @SuppressWarnings("unused")
1:230a86c:     protected void dumpProducerRate() {
1:230a86c:         int totalRate = 0;
1:230a86c:         int totalCount = 0;
1:4743a20:         String producerString = "Producers:";
1:230a86c:         for (int i = 0; i < producers.length; i++) {
1:230a86c:             PerfRate rate = producers[i].getRate().cloneAndReset();
1:230a86c:             totalRate += rate.getRate();
1:230a86c:             totalCount += rate.getTotalCount();
1:4743a20:             producerString += "[" + i + ":" + rate.getRate() + "," + rate.getTotalCount() + "];";
1:d29ca2a:         }
1:de14440:         if (producers != null && producers.length > 0) {
1:230a86c:             int avgRate = totalRate / producers.length;
1:4743a20:             System.out.println("Avg producer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", sent = " + totalCount);
1:4743a20:             // System.out.println(producerString);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     protected void dumpConsumerRate() {
1:230a86c:         int totalRate = 0;
1:230a86c:         int totalCount = 0;
1:4743a20:         String consumerString = "Consumers:";
1:230a86c:         for (int i = 0; i < consumers.length; i++) {
1:230a86c:             PerfRate rate = consumers[i].getRate().cloneAndReset();
1:230a86c:             totalRate += rate.getRate();
1:230a86c:             totalCount += rate.getTotalCount();
1:4743a20:             consumerString += "[" + i + ":" + rate.getRate() + "," + rate.getTotalCount() + "];";
1:d29ca2a:         }
1:230a86c:         if (consumers != null && consumers.length > 0) {
1:230a86c:             int avgRate = totalRate / consumers.length;
1:49325b6:             System.out.println("Avg consumer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", received = " + totalCount);
1:7f0583d:             System.out.println(consumerString);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:  *
1: 
1:     protected String clientURI = "tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false&wireFormat.maxInactivityDuration=0";
1:     // protected String clientURI="tcp://localhost:61616";
1:     protected String bindAddress = "tcp://localhost:61616?wireFormat.maxInactivityDuration=0";
1:     // protected String bindAddress = "tcp://localhost:61616";
1:     // protected String bindAddress="vm://localhost?marshal=true";
1:     // protected String bindAddress="vm://localhost";
1:     protected int numberOfDestinations = 1;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         totalNumberOfConsumers = numberOfConsumers * numberOfDestinations;
1:         totalNumberOfProducers = numberofProducers * numberOfDestinations;
1:         for (int k = 0; k < numberOfDestinations; k++) {
1:             Destination destination = createDestination(session, destinationName + ":" + k);
/////////////////////////////////////////////////////////////////////////
1:                     array[j] = (byte) j;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:         configureBroker(answer, uri);
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void configureBroker(BrokerService answer, String uri) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
1:         String producerString = "Producers:";
1:             producerString += "[" + i + ":" + rate.getRate() + "," + rate.getTotalCount() + "];";
1:             System.out.println("Avg producer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", sent = " + totalCount);
1:             // System.out.println(producerString);
1:         String consumerString = "Consumers:";
1:             consumerString += "[" + i + ":" + rate.getRate() + "," + rate.getTotalCount() + "];";
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SimpleTopicTest.class);
1:     
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Testing against destination: " + destination);
0:         LOG.info("Running " + numberofProducers + " producer(s) and " + numberOfConsumers + " consumer(s)");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Sampling performance " + samepleCount + " times at a " + sampleInternal + " ms interval.");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Avg producer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", sent = " + totalCount);
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Avg consumer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", received = " + totalCount);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class SimpleTopicTest extends TestCase {
0:     private final Log log = LogFactory.getLog(getClass());
0:     // protected String bindAddress="tcp://localhost:61616";
0:     protected String bindAddress = "tcp://localhost:61616";
0:     // protected String bindAddress="vm://localhost?marshal=true";
0:     // protected String bindAddress="vm://localhost";
1:     protected String destinationName = getClass().getName();
0:     protected int samepleCount = 10;
0:     protected long sampleInternal = 1000;
0:     protected int numberOfConsumers = 10;
1:     protected int numberofProducers = 1;
0:     protected int playloadSize = 1024;
1:     protected byte[] array;
0:     protected long consumerSleepDuration;
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
0:             broker = createBroker();
0:         factory = createConnectionFactory();
1:         Connection con = factory.createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         destination = createDestination(session, destinationName);
0:         log.info("Testing against destination: " + destination);
0:         log.info("Running " + numberofProducers + " producer(s) and " + numberOfConsumers + " consumer(s)");
0:         producers = new PerfProducer[numberofProducers];
0:         consumers = new PerfConsumer[numberOfConsumers];
1:         for (int i = 0; i < numberOfConsumers; i++) {
0:             consumers[i] = createConsumer(factory, destination, i);
0:             consumers[i].setSleepDuration(consumerSleepDuration);
1:         for (int i = 0; i < numberofProducers; i++) {
1:             array = new byte[playloadSize];
1:             for (int j = i; j < array.length; j++) {
0:                 array[j] = (byte)j;
0:             producers[i] = createProducer(factory, destination, i, array);
1:     protected void tearDown() throws Exception {
1:         for (int i = 0; i < numberOfConsumers; i++) {
1:         for (int i = 0; i < numberofProducers; i++) {
1:         if (broker != null) {
1:             broker = null;
1:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:         return new PerfProducer(fac, dest, payload);
1:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:         return new PerfConsumer(fac, dest);
0:     protected void configureBroker(BrokerService answer) throws Exception {
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:     public void testPerformance() throws JMSException, InterruptedException {
0:         for (int i = 0; i < numberOfConsumers; i++) {
0:         for (int i = 0; i < numberofProducers; i++) {
0:         log.info("Sampling performance " + samepleCount + " times at a " + sampleInternal + " ms interval.");
0:         for (int i = 0; i < samepleCount; i++) {
1:             Thread.sleep(sampleInternal);
0:         for (int i = 0; i < numberofProducers; i++) {
0:         for (int i = 0; i < numberOfConsumers; i++) {
1:     protected void dumpProducerRate() {
1:         int totalRate = 0;
1:         int totalCount = 0;
1:         for (int i = 0; i < producers.length; i++) {
1:             PerfRate rate = producers[i].getRate().cloneAndReset();
1:             totalRate += rate.getRate();
1:             totalCount += rate.getTotalCount();
1:         int avgRate = totalRate / producers.length;
0:         log.info("Avg producer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", sent = " + totalCount);
1:     protected void dumpConsumerRate() {
1:         int totalRate = 0;
1:         int totalCount = 0;
1:         for (int i = 0; i < consumers.length; i++) {
1:             PerfRate rate = consumers[i].getRate().cloneAndReset();
1:             totalRate += rate.getRate();
1:             totalCount += rate.getTotalCount();
1:         if (consumers != null && consumers.length > 0) {
1:             int avgRate = totalRate / consumers.length;
0:             log.info("Avg consumer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", received = " + totalCount);
commit:ea66d50
/////////////////////////////////////////////////////////////////////////
0:         log.info("Running "+NUMBER_OF_PRODUCERS+" producer(s) and "+NUMBER_OF_CONSUMERS+" consumer(s)");
commit:51e6a0d
/////////////////////////////////////////////////////////////////////////
0:     protected String DESTINATION_NAME=getClass().getName();
0:     protected int NUMBER_OF_CONSUMERS=10;
/////////////////////////////////////////////////////////////////////////
0:         	PerfRate rate = producers[i].getRate().cloneAndReset();
0:             totalRate+=rate.getRate();
0:             totalCount+=rate.getTotalCount();
0:         	PerfRate rate = consumers[i].getRate().cloneAndReset();
0:             totalRate+=rate.getRate();
0:             totalCount+=rate.getTotalCount();
commit:d47855a
/////////////////////////////////////////////////////////////////////////
0:     protected long CONSUMER_SLEEP_DURATION = 0;
/////////////////////////////////////////////////////////////////////////
0:         log.info("Testing against destination: "+destination);
1:         
0:             consumers[i].setSleepDuration(CONSUMER_SLEEP_DURATION);
/////////////////////////////////////////////////////////////////////////
0:         return new ActiveMQConnectionFactory(bindAddress);
/////////////////////////////////////////////////////////////////////////
0:         int totalRate=0;
0:             totalRate+=producers[i].getRate().getRate();
0:         int avgRate = totalRate/producers.length;
0:         log.info("Avg producer rate = "+avgRate+" msg/sec | Total rate = "+totalRate+", sent = "+totalCount);
0:         int totalRate=0;
0:             totalRate+=consumers[i].getRate().getRate();
0:         int avgRate = totalRate/consumers.length;
0:         log.info("Avg consumer rate = "+avgRate+" msg/sec | Total rate = "+totalRate+", received = "+totalCount);
commit:87f2f50
/////////////////////////////////////////////////////////////////////////
0: //    protected String bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false";
0:     protected String bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=true";
commit:57a4071
/////////////////////////////////////////////////////////////////////////
0:     private final Log log=LogFactory.getLog(getClass());
1:     
/////////////////////////////////////////////////////////////////////////
0:     protected int SAMPLE_COUNT = 30;
commit:e0fdce4
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected int SAMPLE_COUNT = 10;
0:     protected long SAMPLE_INTERVAL = 2000;
/////////////////////////////////////////////////////////////////////////
1:         
0:             array=new byte[PAYLOAD_SIZE];
0:             for(int j=i;j<array.length;j++){
0:                 array[j]=(byte) j;
1:             }
0:             producers[i]=createProducer(factory,destination,i,array);
/////////////////////////////////////////////////////////////////////////
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number, byte[] payload) throws JMSException{
0:         return new PerfProducer(fac,dest,payload);
/////////////////////////////////////////////////////////////////////////
0:     public void testPerformance() throws JMSException, InterruptedException{
1:     	
0:         for(int i=0;i<NUMBER_OF_CONSUMERS;i++){
1:             consumers[i].start();
1:         }
0:         for(int i=0;i<NUMBER_OF_PRODUCERS;i++){
1:             producers[i].start();
1:         }
1:         
0:     	log.info("Sampling performance "+SAMPLE_COUNT+" times at a "+SAMPLE_INTERVAL+" ms interval.");
0:         for(int i=0; i < SAMPLE_COUNT; i++){
0:         	Thread.sleep(SAMPLE_INTERVAL);
1:             dumpProducerRate();
1:             dumpConsumerRate();
1:         }
1:         
0:         for(int i=0;i<NUMBER_OF_PRODUCERS;i++){
1:             producers[i].stop();
1:         }
0:         for(int i=0;i<NUMBER_OF_CONSUMERS;i++){
1:             consumers[i].stop();
/////////////////////////////////////////////////////////////////////////
0:             producers[i].getRate().reset();
0:         int rate=0;
0:             rate+=consumers[i].getRate().getRate();
0:         rate=rate/consumers.length;
0:         log.info("Consumer rate = "+rate+" msg/sec total count = "+totalCount);
0:             consumers[i].getRate().reset();
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
0: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class SimpleTopicTest extends TestCase{
0:     private static final Log log=LogFactory.getLog(SimpleTopicTest.class);
1:     protected BrokerService broker;
0:     protected String bindAddress="tcp://localhost:61616";
1:     protected PerfProducer[] producers;
1:     protected PerfConsumer[] consumers;
0:     protected String DESTINATION_NAME=getClass().toString();
0:     protected int NUMBER_OF_CONSUMERS=1;
0:     protected int NUMBER_OF_PRODUCERS=1;
0:     protected BytesMessage payload;
0:     protected int PAYLOAD_SIZE=1024;
0:     protected int MESSAGE_COUNT=1000000;
0:     protected byte[] array=null;
1: 
1:     /**
1:      * Sets up a test where the producer and consumer have their own connection.
0:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception{
0:         if(broker==null){
0:             broker=createBroker();
1:         }
0:         array=new byte[PAYLOAD_SIZE];
0:         for(int i=0;i<array.length;i++){
0:             array[i]=(byte) i;
1:         }
0:         ConnectionFactory fac=createConnectionFactory();
0:         Connection con=fac.createConnection();
0:         Session session=con.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         payload=session.createBytesMessage();
0:         payload.writeBytes(array);
0:         Destination dest=createDestination(session,DESTINATION_NAME);
1:         con.close();
0:         producers=new PerfProducer[NUMBER_OF_PRODUCERS];
0:         consumers=new PerfConsumer[NUMBER_OF_CONSUMERS];
0:         for(int i=0;i<NUMBER_OF_CONSUMERS;i++){
0:             consumers[i]=createConsumer(fac,dest,i);
0:             consumers[i].start();
1:         }
0:         for(int i=0;i<NUMBER_OF_PRODUCERS;i++){
0:             producers[i]=createProducer(fac,dest,i);
0:             producers[i].start();
1:         }
1:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
0:         for(int i=0;i<NUMBER_OF_CONSUMERS;i++){
1:             consumers[i].shutDown();
1:         }
0:         for(int i=0;i<NUMBER_OF_PRODUCERS;i++){
1:             producers[i].shutDown();
1:         }
0:         if(broker!=null){
1:             broker.stop();
0:             broker=null;
1:         }
1:     }
1: 
0:     protected Destination createDestination(Session s,String destinationName) throws JMSException{
1:         return s.createTopic(destinationName);
1:     }
1: 
1:     /**
1:      * Factory method to create a new broker
0:      * 
1:      * @throws Exception
1:      */
0:     protected BrokerService createBroker() throws Exception{
0:         BrokerService answer=new BrokerService();
0:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         return new PerfProducer(fac,dest);
1:     }
1: 
0:     protected PerfConsumer createConsumer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         return new PerfConsumer(fac,dest);
1:     }
1: 
0:     protected void configureBroker(BrokerService answer) throws Exception{
0:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
0: //        ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?marshal=true");
0: //        ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?marshal=true&wireFormat.cacheEnabled=false");
0:         cf.setAsyncDispatch(false);
0:         return cf;
1:     }
1: 
0:     public void testPerformance() throws JMSException{
0:         for(int i=0;i<MESSAGE_COUNT;i++){
0:             if(i%5000==0){
0:                 dumpProducerRate();
0:                 dumpConsumerRate();
1:             }
0:             payload.clearBody();
0:             payload.writeBytes(array);
0:             for(int k=0;k<producers.length;k++){
0:                 producers[k].sendMessage(payload);
1:             }
1:         }
1:     }
1: 
0:     protected void dumpProducerRate(){
0:         int count=0;
0:         int totalCount=0;
0:         for(int i=0;i<producers.length;i++){
0:             count+=producers[i].getRate().getRate();
0:             totalCount+=consumers[i].getRate().getTotalCount();
1:         }
0:         count=count/producers.length;
0:         log.info("Producer rate = "+count+" msg/sec total count = "+totalCount);
0:         for(int i=0;i<producers.length;i++){
0:             producers[i].getRate().start();
1:         }
1:     }
1: 
0:     protected void dumpConsumerRate(){
0:         int count=0;
0:         int totalCount=0;
0:         for(int i=0;i<consumers.length;i++){
0:             count+=consumers[i].getRate().getRate();
0:             totalCount+=consumers[i].getRate().getTotalCount();
1:         }
0:         count=count/consumers.length;
0:         log.info("Consumer rate = "+count+" msg/sec total count = "+totalCount);
0:         for(int i=0;i<consumers.length;i++){
0:             consumers[i].getRate().start();
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleTopicTest.class);
commit:5074fef
/////////////////////////////////////////////////////////////////////////
0:         if (broker == null) {
1:             broker = createBroker(bindAddress);
0:         }
commit:a84bbc1
/////////////////////////////////////////////////////////////////////////
0:         //if (broker == null) {
0:         //    broker = createBroker(bindAddress);
0:         //}
author:Robert Davies
-------------------------------------------------------------------------------
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
0:     protected String clientURI="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false&wireFormat.maxInactivityDuration=0";
0:     protected String bindAddress="tcp://localhost:61616?wireFormat.maxInactivityDuration=0";
/////////////////////////////////////////////////////////////////////////
1:     protected int playloadSize = 12;
commit:6f69f19
/////////////////////////////////////////////////////////////////////////
0:      /**
/////////////////////////////////////////////////////////////////////////
commit:cbb290c
/////////////////////////////////////////////////////////////////////////
1:     protected int numberOfConsumers = 1;
0:     protected int numberofProducers = 1;
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
0:     protected String clientURI="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false&wireFormat.maxInactivityDuration=50000";
0:     //protected String clientURI="tcp://localhost:61616";
/////////////////////////////////////////////////////////////////////////
0:     protected int numberOfDestinations=1;
0:     protected int numberOfConsumers = 10;
0:     protected int numberofProducers = 10;
1:     protected int totalNumberOfProducers;
1:     protected int totalNumberOfConsumers;
0:     
/////////////////////////////////////////////////////////////////////////
1:         factory = createConnectionFactory(clientURI);
0:        
0:         
1:         LOG.info("Running " + numberofProducers + " producer(s) and " + numberOfConsumers + " consumer(s) per " + numberOfDestinations + " Destination(s)");
0:        
0:         totalNumberOfConsumers=numberOfConsumers*numberOfDestinations;
0:         totalNumberOfProducers=numberofProducers*numberOfDestinations;
1:         producers = new PerfProducer[totalNumberOfProducers];
1:         consumers = new PerfConsumer[totalNumberOfConsumers];
1:         int consumerCount = 0;
1:         int producerCount = 0;
0:         for (int k =0; k < numberOfDestinations;k++) {
0:             Destination destination = createDestination(session, destinationName+":"+k);
0:             LOG.info("Testing against destination: " + destination);
0:             for (int i = 0; i < numberOfConsumers; i++) {
1:                 consumers[consumerCount] = createConsumer(factory, destination, consumerCount);
0:                 consumers[consumerCount].setSleepDuration(consumerSleepDuration);
1:                 consumerCount++;
0:             for (int i = 0; i < numberofProducers; i++) {
0:                 array = new byte[playloadSize];
0:                 for (int j = i; j < array.length; j++) {
0:                     array[j] = (byte)j;
0:                 }
1:                 producers[producerCount] = createProducer(factory, destination, i, array);
1:                 producerCount++;
0:             }
0:         con.close();
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < totalNumberOfConsumers; i++) {
1:         for (int i = 0; i < totalNumberOfProducers; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < totalNumberOfProducers; i++) {
1:         for (int i = 0; i < totalNumberOfConsumers; i++) {
/////////////////////////////////////////////////////////////////////////
0:         String producerString="Producers:";
0:             producerString+="["+i+":"+rate.getRate() + ","+rate.getTotalCount()+"];";
0:            // System.out.println(producerString);
0:         String consumerString="Consumers:";
0:             consumerString+="["+i+":"+rate.getRate() + ","+rate.getTotalCount()+"];";
1:             System.out.println(consumerString);
commit:de14440
/////////////////////////////////////////////////////////////////////////
0:     protected int numberofProducers = 0;
/////////////////////////////////////////////////////////////////////////
1:         if (producers != null && producers.length > 0) {
0:             int avgRate = totalRate / producers.length;
0:             System.out.println("Avg producer rate = " + avgRate
0:                     + " msg/sec | Total rate = " + totalRate + ", sent = "
0:                     + totalCount);
0:         }
commit:5582cc1
/////////////////////////////////////////////////////////////////////////
0:             broker = createBroker(bindAddress);
0:         factory = createConnectionFactory(bindAddress);
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService createBroker(String uri) throws Exception {
0:         configureBroker(answer,uri);
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:         answer.addConnector(uri);
1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:         return new ActiveMQConnectionFactory(uri);
commit:c8761c7
/////////////////////////////////////////////////////////////////////////
0:     protected String bindAddress="tcp://localhost:61616";
0:     //protected String bindAddress="vm://localhost";
0:     protected int samepleCount = 20;
commit:49325b6
/////////////////////////////////////////////////////////////////////////
0:     //protected String bindAddress="tcp://localhost:61616";
0:     //protected String bindAddress = "tcp://localhost:61616";
0:     //protected String bindAddress="vm://localhost?marshal=true";
0:     protected String bindAddress="vm://localhost";
1:     protected long sampleInternal = 10000;
0:     protected int numberOfConsumers = 1;
0:     protected int numberofProducers = 2;
0:     protected long consumerSleepDuration=0;
/////////////////////////////////////////////////////////////////////////
1:         answer.setUseShutdownHook(false);
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("Avg producer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", sent = " + totalCount);
/////////////////////////////////////////////////////////////////////////
1:             System.out.println("Avg consumer rate = " + avgRate + " msg/sec | Total rate = " + totalRate + ", received = " + totalCount);
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     protected int NUMBER_OF_CONSUMERS=10;
commit:985b4ce
/////////////////////////////////////////////////////////////////////////
0:     //protected String bindAddress="tcp://localhost:61616";
0:     protected String bindAddress="tcp://localhost:61616";
0:     //protected String bindAddress="vm://localhost?marshal=true";
0:     //protected String bindAddress="vm://localhost";
0:     protected int SAMPLE_COUNT=10;
0:     protected int NUMBER_OF_CONSUMERS=1;
commit:5da043b
/////////////////////////////////////////////////////////////////////////
0:     //protected String bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=true";
0:     protected String bindAddress="vm://localhost";
0:     protected int SAMPLE_COUNT=20;
0:     protected long SAMPLE_INTERVAL=1000;
0:     protected int NUMBER_OF_CONSUMERS=0;
commit:6e7e3ab
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     // protected String
0:     // bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true&jms.useAsyncSend=false";
0:     // protected String
0:     // bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=false";
0:     // protected String bindAddress="vm://localhost?marshal=true";
0:     // protected String bindAddress="vm://localhost";
0:     protected int SAMPLE_COUNT=30;
0:     protected long SAMPLE_INTERVAL=2000;
0:     protected int NUMBER_OF_CONSUMERS=1;
0:     protected long CONSUMER_SLEEP_DURATION=0;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 array[j]=(byte)j;
/////////////////////////////////////////////////////////////////////////
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number,byte[] payload)
0:             throws JMSException{
/////////////////////////////////////////////////////////////////////////
0:     public void testPerformance() throws JMSException,InterruptedException{
0:         log.info("Sampling performance "+SAMPLE_COUNT+" times at a "+SAMPLE_INTERVAL+" ms interval.");
0:         for(int i=0;i<SAMPLE_COUNT;i++){
0:             Thread.sleep(SAMPLE_INTERVAL);
/////////////////////////////////////////////////////////////////////////
0:             PerfRate rate=producers[i].getRate().cloneAndReset();
0:         int avgRate=totalRate/producers.length;
/////////////////////////////////////////////////////////////////////////
0:             PerfRate rate=consumers[i].getRate().cloneAndReset();
0:         if(consumers!=null&&consumers.length>0){
0:             int avgRate=totalRate/consumers.length;
0:             log.info("Avg consumer rate = "+avgRate+" msg/sec | Total rate = "+totalRate+", received = "+totalCount);
0:         }
commit:5f68126
/////////////////////////////////////////////////////////////////////////
0:             totalCount+=producers[i].getRate().getTotalCount();
commit:6575f2d
/////////////////////////////////////////////////////////////////////////
0:     protected String bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=true";
0:     //protected String bindAddress="tcp://localhost:61616?wireFormat.cacheEnabled=true&wireFormat.tightEncodingEnabled=false";
0:     //protected String bindAddress="vm://localhost?marshal=true";
0:     //protected String bindAddress="vm://localhost";
/////////////////////////////////////////////////////////////////////////
0:     protected int MESSAGE_COUNT=100000;
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
0:             if(i%10000==0){
commit:6892f8c
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionFactory factory;
0:     protected Destination destination;
/////////////////////////////////////////////////////////////////////////
0:         factory=createConnectionFactory();
0:         Connection con=factory.createConnection();
0:         destination=createDestination(session,DESTINATION_NAME);
0:             consumers[i]=createConsumer(factory,destination,i);
0:             producers[i]=createProducer(factory,destination,i);
/////////////////////////////////////////////////////////////////////////
0:        // cf.setAsyncDispatch(false);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:c4aae53
/////////////////////////////////////////////////////////////////////////
1:     protected int sampleCount = 20;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sampling performance " + sampleCount + " times at a " + sampleInternal + " ms interval.");
1:         for (int i = 0; i < sampleCount; i++) {
============================================================================