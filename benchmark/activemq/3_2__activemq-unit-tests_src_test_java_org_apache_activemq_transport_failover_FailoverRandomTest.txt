1:684c901: /**
1:684c901:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:684c901:  * contributor license agreements.  See the NOTICE file distributed with
1:684c901:  * this work for additional information regarding copyright ownership.
1:684c901:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:684c901:  * (the "License"); you may not use this file except in compliance with
1:684c901:  * the License.  You may obtain a copy of the License at
1:684c901:  *
1:684c901:  *      http://www.apache.org/licenses/LICENSE-2.0
1:684c901:  *
1:684c901:  * Unless required by applicable law or agreed to in writing, software
1:684c901:  * distributed under the License is distributed on an "AS IS" BASIS,
1:684c901:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:684c901:  * See the License for the specific language governing permissions and
1:684c901:  * limitations under the License.
1:684c901:  */
8:684c901: 
1:684c901: package org.apache.activemq.transport.failover;
1:684c901: 
1:684c901: import junit.framework.TestCase;
1:684c901: 
1:684c901: import org.apache.activemq.ActiveMQConnection;
1:684c901: import org.apache.activemq.ActiveMQConnectionFactory;
1:684c901: import org.apache.activemq.broker.BrokerService;
1:684c901: 
1:684c901: public class FailoverRandomTest extends TestCase {
1:04ee70a: 
1:684c901:     BrokerService brokerA, brokerB;
1:04ee70a: 
1:04ee70a:     @Override
1:684c901:     public void setUp() throws Exception {
1:684c901:         brokerA = createBroker("A");
1:684c901:         brokerB = createBroker("B");
1:684c901:     }
1:04ee70a: 
1:04ee70a:     @Override
1:684c901:     public void tearDown() throws Exception {
1:684c901:         brokerA.stop();
1:684c901:         brokerB.stop();
1:684c901:     }
1:04ee70a: 
1:04ee70a:     protected String getBrokerUrl() {
1:04ee70a:         return "tcp://localhost:0";
1:04ee70a:     }
1:04ee70a: 
1:684c901: 	private BrokerService createBroker(String name) throws Exception {
1:684c901:         BrokerService broker = new BrokerService();
1:684c901:         broker.setBrokerName("Broker"+ name);
1:04ee70a:         broker.addConnector(getBrokerUrl());
1:684c901:         broker.getManagementContext().setCreateConnector(false);
1:684c901:         broker.setPersistent(false);
1:684c901:         broker.setUseJmx(false);
1:684c901:         broker.start();
1:684c901:         return broker;
1:684c901:     }
1:684c901: 
1:684c901:     public void testRandomConnections() throws Exception {
1:684c901:         String failoverUrl = "failover:("
1:684c901:             + brokerA.getTransportConnectors().get(0).getConnectUri()
1:684c901:             + ","
1:684c901:             + brokerB.getTransportConnectors().get(0).getConnectUri()
1:684c901:             + ")";
1:684c901: 		ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUrl);
1:04ee70a: 
1:04ee70a: 
1:684c901: 		ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:684c901: 		connection.start();
1:684c901: 		String brokerName1 = connection.getBrokerName();
1:684c901: 		assertNotNull(brokerName1);
1:684c901: 		connection.close();
1:04ee70a: 
1:684c901: 		String brokerName2 = brokerName1;
1:5c15b52: 		int attempts = 40;
1:684c901: 		while (brokerName1.equals(brokerName2) && attempts-- > 0) {
1:684c901: 		    connection = (ActiveMQConnection) cf.createConnection();
1:684c901: 		    connection.start();
1:684c901: 		    brokerName2 = connection.getBrokerName();
1:684c901: 		    assertNotNull(brokerName2);
1:684c901: 		    connection.close();
1:684c901: 		}
1:684c901:         assertTrue(brokerName1 + "!=" + brokerName2, !brokerName1.equals(brokerName2));
1:684c901:     }
1:684c901: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Override
1: 
1:     @Override
1: 
1:     protected String getBrokerUrl() {
1:         return "tcp://localhost:0";
1:     }
1: 
1:         broker.addConnector(getBrokerUrl());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5c15b52
/////////////////////////////////////////////////////////////////////////
1: 		int attempts = 40;
commit:684c901
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.failover;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: public class FailoverRandomTest extends TestCase {
1: 	
1:     BrokerService brokerA, brokerB;
1:    
1:     public void setUp() throws Exception {
1:         brokerA = createBroker("A");
1:         brokerB = createBroker("B");
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         brokerA.stop();
1:         brokerB.stop();
1:     }
1:     
1: 	private BrokerService createBroker(String name) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("Broker"+ name);
0:         broker.addConnector("tcp://localhost:0");
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.start();
1:         return broker;
1:     }
1: 
1:     public void testRandomConnections() throws Exception {
1:         String failoverUrl = "failover:("
1:             + brokerA.getTransportConnectors().get(0).getConnectUri()
1:             + ","
1:             + brokerB.getTransportConnectors().get(0).getConnectUri()
1:             + ")";
1: 		ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUrl);
1: 		
1: 		
1: 		ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1: 		connection.start();
1: 		String brokerName1 = connection.getBrokerName();
1: 		assertNotNull(brokerName1);
1: 		connection.close();
1: 		
1: 		String brokerName2 = brokerName1;
0: 		int attempts = 5;
1: 		while (brokerName1.equals(brokerName2) && attempts-- > 0) {
1: 		    connection = (ActiveMQConnection) cf.createConnection();
1: 		    connection.start();
1: 		    brokerName2 = connection.getBrokerName();
1: 		    assertNotNull(brokerName2);
1: 		    connection.close();
1: 		}
1:         assertTrue(brokerName1 + "!=" + brokerName2, !brokerName1.equals(brokerName2));
1:     }
1: }
============================================================================