1:efaa351: /**
1:efaa351:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efaa351:  * contributor license agreements.  See the NOTICE file distributed with
1:efaa351:  * this work for additional information regarding copyright ownership.
1:efaa351:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efaa351:  * (the "License"); you may not use this file except in compliance with
1:efaa351:  * the License.  You may obtain a copy of the License at
1:efaa351:  *
1:efaa351:  *      http://www.apache.org/licenses/LICENSE-2.0
1:efaa351:  *
1:efaa351:  * Unless required by applicable law or agreed to in writing, software
1:efaa351:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efaa351:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efaa351:  * See the License for the specific language governing permissions and
1:efaa351:  * limitations under the License.
1:efaa351:  */
1:efaa351: package org.apache.activemq.broker.ft;
2:efaa351: 
1:c07d6c8: import java.io.File;
1:efaa351: import java.io.IOException;
1:efaa351: import java.net.URI;
1:efaa351: import javax.sql.DataSource;
1:efaa351: import org.apache.activemq.broker.BrokerService;
1:efaa351: import org.apache.activemq.broker.TransportConnector;
1:efaa351: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:efaa351: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1:efaa351: import org.apache.activemq.store.jdbc.Statements;
1:efaa351: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:efaa351: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:efaa351: import org.apache.activemq.util.IOHelper;
1:efaa351: import org.apache.derby.jdbc.EmbeddedDataSource;
1:efaa351: 
1:efaa351: public class kahaDbJdbcLeaseQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
1:efaa351:     protected DataSource sharedDs;
1:efaa351:     protected String MASTER_URL = "tcp://localhost:62001";
1:efaa351:     protected String SLAVE_URL  = "tcp://localhost:62002";
1:c07d6c8:     File sharedDbDirFile;
1:efaa351: 
1:9ad65c6:     @Override
1:efaa351:     protected void setUp() throws Exception {
1:efaa351:         // startup db
1:efaa351:         sharedDs = new SyncCreateDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));
1:c07d6c8:         sharedDbDirFile = new File(new File(IOHelper.getDefaultDataDirectory()), "sharedKahaDB");
1:efaa351:         super.setUp();
1:efaa351:     }
1:efaa351: 
1:9ad65c6:     @Override
1:9ad65c6:     protected void tearDown() throws Exception {
1:9ad65c6:         super.tearDown();
1:9ad65c6:         DataSourceServiceSupport.shutdownDefaultDataSource(((SyncCreateDataSource)sharedDs).getDelegate());
1:9ad65c6:     }
1:9ad65c6: 
1:c07d6c8:     @Override
1:efaa351:     protected void createMaster() throws Exception {
1:efaa351:         master = new BrokerService();
1:efaa351:         master.setBrokerName("master");
1:efaa351:         master.addConnector(MASTER_URL);
1:efaa351:         master.setUseJmx(false);
1:efaa351:         master.setPersistent(true);
1:efaa351:         master.setDeleteAllMessagesOnStartup(true);
1:efaa351:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) master.getPersistenceAdapter();
1:c07d6c8:         kahaDBPersistenceAdapter.setDirectory(sharedDbDirFile);
1:efaa351:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:efaa351:         leaseDatabaseLocker.setCreateTablesOnStartup(true);
1:efaa351:         leaseDatabaseLocker.setDataSource(getExistingDataSource());
1:efaa351:         leaseDatabaseLocker.setStatements(new Statements());
1:efaa351:         kahaDBPersistenceAdapter.setLocker(leaseDatabaseLocker);
1:40ea665:         configureLocker(kahaDBPersistenceAdapter);
1:efaa351:         configureBroker(master);
1:efaa351:         master.start();
1:c07d6c8:         master.waitUntilStarted();
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void configureBroker(BrokerService brokerService) {
1:efaa351:         DefaultIOExceptionHandler stopBrokerOnStoreException = new DefaultIOExceptionHandler();
1:efaa351:         // we want any store io exception to stop the broker
1:efaa351:         stopBrokerOnStoreException.setIgnoreSQLExceptions(false);
1:efaa351:         brokerService.setIoExceptionHandler(stopBrokerOnStoreException);
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void createSlave() throws Exception {
1:efaa351:         // use a separate thread as the slave will block waiting for
1:efaa351:         // the exclusive db lock
1:efaa351:         Thread t = new Thread() {
1:efaa351:             public void run() {
1:efaa351:                 try {
1:efaa351:                     BrokerService broker = new BrokerService();
1:efaa351:                     broker.setBrokerName("slave");
1:efaa351:                     TransportConnector connector = new TransportConnector();
1:efaa351:                     connector.setUri(new URI(SLAVE_URL));
1:efaa351:                     broker.addConnector(connector);
1:efaa351:                     broker.setUseJmx(false);
1:efaa351:                     broker.setPersistent(true);
1:efaa351:                     KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:c07d6c8:                     kahaDBPersistenceAdapter.setDirectory(sharedDbDirFile);
1:efaa351:                     LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:efaa351:                     leaseDatabaseLocker.setDataSource(getExistingDataSource());
1:efaa351:                     leaseDatabaseLocker.setStatements(new Statements());
1:efaa351:                     kahaDBPersistenceAdapter.setLocker(leaseDatabaseLocker);
1:40ea665:                     configureLocker(kahaDBPersistenceAdapter);
1:efaa351:                     configureBroker(broker);
1:efaa351:                     slave.set(broker);
1:c07d6c8:                     broker.start();
1:efaa351:                     slaveStarted.countDown();
1:efaa351:                 } catch (IllegalStateException expectedOnShutdown) {
1:efaa351:                 } catch (Exception e) {
1:efaa351:                     fail("failed to start slave broker, reason:" + e);
1:efaa351:                 }
1:efaa351:             }
1:efaa351:         };
1:efaa351:         t.start();
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void configureLocker(KahaDBPersistenceAdapter kahaDBPersistenceAdapter) throws IOException {
1:62ab556:         kahaDBPersistenceAdapter.setLockKeepAlivePeriod(2000);
1:62ab556:         kahaDBPersistenceAdapter.getLocker().setLockAcquireSleepInterval(5000);
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected DataSource getExistingDataSource() throws Exception {
1:efaa351:         return sharedDs;
1:efaa351:     }
1:efaa351: 
1:efaa351: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:62ab556
/////////////////////////////////////////////////////////////////////////
1:         kahaDBPersistenceAdapter.setLockKeepAlivePeriod(2000);
1:         kahaDBPersistenceAdapter.getLocker().setLockAcquireSleepInterval(5000);
commit:c07d6c8
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:     File sharedDbDirFile;
1:         sharedDbDirFile = new File(new File(IOHelper.getDefaultDataDirectory()), "sharedKahaDB");
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         kahaDBPersistenceAdapter.setDirectory(sharedDbDirFile);
/////////////////////////////////////////////////////////////////////////
1:         master.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:                     kahaDBPersistenceAdapter.setDirectory(sharedDbDirFile);
1:                     broker.start();
commit:9ad65c6
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         DataSourceServiceSupport.shutdownDefaultDataSource(((SyncCreateDataSource)sharedDs).getDelegate());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:40ea665
/////////////////////////////////////////////////////////////////////////
1:         configureLocker(kahaDBPersistenceAdapter);
/////////////////////////////////////////////////////////////////////////
1:                     configureLocker(kahaDBPersistenceAdapter);
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import javax.sql.DataSource;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1: import org.apache.activemq.store.jdbc.Statements;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: public class kahaDbJdbcLeaseQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
1:     protected DataSource sharedDs;
1:     protected String MASTER_URL = "tcp://localhost:62001";
1:     protected String SLAVE_URL  = "tcp://localhost:62002";
1: 
1:     protected void setUp() throws Exception {
1:         // startup db
1:         sharedDs = new SyncCreateDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));
1:         super.setUp();
1:     }
1: 
1:     protected void createMaster() throws Exception {
1:         master = new BrokerService();
1:         master.setBrokerName("master");
1:         master.addConnector(MASTER_URL);
1:         master.setUseJmx(false);
1:         master.setPersistent(true);
1:         master.setDeleteAllMessagesOnStartup(true);
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) master.getPersistenceAdapter();
1:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:         leaseDatabaseLocker.setCreateTablesOnStartup(true);
1:         leaseDatabaseLocker.setDataSource(getExistingDataSource());
1:         leaseDatabaseLocker.setStatements(new Statements());
0:         configureLocker(kahaDBPersistenceAdapter);
1:         kahaDBPersistenceAdapter.setLocker(leaseDatabaseLocker);
1:         configureBroker(master);
1:         master.start();
1:     }
1: 
1:     protected void configureBroker(BrokerService brokerService) {
1:         DefaultIOExceptionHandler stopBrokerOnStoreException = new DefaultIOExceptionHandler();
1:         // we want any store io exception to stop the broker
1:         stopBrokerOnStoreException.setIgnoreSQLExceptions(false);
1:         brokerService.setIoExceptionHandler(stopBrokerOnStoreException);
1:     }
1: 
1:     protected void createSlave() throws Exception {
1:         // use a separate thread as the slave will block waiting for
1:         // the exclusive db lock
1:         Thread t = new Thread() {
1:             public void run() {
1:                 try {
1:                     BrokerService broker = new BrokerService();
1:                     broker.setBrokerName("slave");
1:                     TransportConnector connector = new TransportConnector();
1:                     connector.setUri(new URI(SLAVE_URL));
1:                     broker.addConnector(connector);
1:                     broker.setUseJmx(false);
1:                     broker.setPersistent(true);
1:                     KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:                     LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:                     leaseDatabaseLocker.setDataSource(getExistingDataSource());
1:                     leaseDatabaseLocker.setStatements(new Statements());
0:                     configureLocker(kahaDBPersistenceAdapter);
1:                     kahaDBPersistenceAdapter.setLocker(leaseDatabaseLocker);
1: 
1:                     configureBroker(broker);
0:                     broker.start();
1:                     slave.set(broker);
1:                     slaveStarted.countDown();
1:                 } catch (IllegalStateException expectedOnShutdown) {
1:                 } catch (Exception e) {
1:                     fail("failed to start slave broker, reason:" + e);
1:                 }
1:             }
1:         };
1:         t.start();
1:     }
1: 
1:     protected void configureLocker(KahaDBPersistenceAdapter kahaDBPersistenceAdapter) throws IOException {
0:         kahaDBPersistenceAdapter.setLockKeepAlivePeriod(500);
0:         kahaDBPersistenceAdapter.getLocker().setLockAcquireSleepInterval(500);
1:     }
1: 
1:     protected DataSource getExistingDataSource() throws Exception {
1:         return sharedDs;
1:     }
1: 
1: }
author:Kevin Earls
-------------------------------------------------------------------------------
commit:5e42bd6
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void testVirtualTopicFailover() throws Exception {
0:         // Ignoring for now, see AMQ-4842
0:     }
0: 
============================================================================