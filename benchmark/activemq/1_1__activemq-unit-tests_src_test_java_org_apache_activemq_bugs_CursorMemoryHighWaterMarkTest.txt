1:c76f109: /**
1:c76f109:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c76f109:  * contributor license agreements.  See the NOTICE file distributed with
1:c76f109:  * this work for additional information regarding copyright ownership.
1:c76f109:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c76f109:  * (the "License"); you may not use this file except in compliance with
1:c76f109:  * the License.  You may obtain a copy of the License at
1:c76f109:  * <p>
1:c76f109:  * http://www.apache.org/licenses/LICENSE-2.0
1:c76f109:  * <p>
1:c76f109:  * Unless required by applicable law or agreed to in writing, software
1:c76f109:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c76f109:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c76f109:  * See the License for the specific language governing permissions and
1:c76f109:  * limitations under the License.
1:c76f109:  */
1:c76f109: package org.apache.activemq.bugs;
1:c76f109: 
1:c76f109: import org.apache.activemq.ActiveMQConnectionFactory;
1:c76f109: import org.apache.activemq.broker.BrokerService;
1:c76f109: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c76f109: import org.apache.activemq.broker.region.policy.PolicyMap;
1:c76f109: import org.apache.activemq.command.ActiveMQQueue;
1:c76f109: import org.junit.After;
1:c76f109: import org.junit.Before;
1:c76f109: import org.junit.Test;
1:c76f109: import org.slf4j.Logger;
1:c76f109: import org.slf4j.LoggerFactory;
1:c76f109: 
1:c76f109: import javax.jms.Connection;
1:c76f109: import javax.jms.MessageConsumer;
1:c76f109: import javax.jms.MessageProducer;
1:c76f109: import javax.jms.Session;
1:c76f109: import javax.jms.TextMessage;
1:c76f109: 
1:c76f109: import static junit.framework.Assert.assertTrue;
1:c76f109: import static org.junit.Assert.assertEquals;
1:c76f109: import static org.junit.Assert.fail;
1:c76f109: 
1:c76f109: /**
1:c76f109:  * ensure a message will be pages in from the store when another dest has stopped caching
1:c76f109:  */
1:c76f109: 
1:c76f109: public class CursorMemoryHighWaterMarkTest {
1:c76f109:     private static final Logger LOG = LoggerFactory
1:c76f109:             .getLogger(CursorMemoryHighWaterMarkTest.class);
1:c76f109: 
1:c76f109: 
1:c76f109:     public static final String MY_QUEUE_2 = "myQueue_2";
1:c76f109:     public static final String MY_QUEUE = "myQueue";
1:c76f109:     public static final String BROKER_NAME = "myBroker";
1:c76f109:     private BrokerService broker1;
1:c76f109:     private ActiveMQConnectionFactory connectionFactory;
1:c76f109: 
1:c76f109:     @Before
1:c76f109:     public void setUp() throws Exception {
1:c76f109: 
1:c76f109:         broker1 = createAndStartBroker(BROKER_NAME);
1:c76f109:         broker1.waitUntilStarted();
1:c76f109: 
1:c76f109:         connectionFactory = new ActiveMQConnectionFactory("vm://" + BROKER_NAME);
1:c76f109:     }
1:c76f109: 
1:c76f109: 
1:c76f109:     private BrokerService createAndStartBroker(String name)
1:c76f109:             throws Exception {
1:c76f109:         BrokerService broker = new BrokerService();
1:c76f109:         broker.setDeleteAllMessagesOnStartup(true);
1:c76f109:         broker.setBrokerName(name);
1:c76f109:         broker.setUseJmx(true);
1:c76f109: 
1:c76f109:         broker.getSystemUsage().getMemoryUsage().setLimit(5000000l);
1:c76f109: 
1:c76f109:         PolicyMap policyMap = new PolicyMap();
1:c76f109:         PolicyEntry policy = new PolicyEntry();
1:c76f109: 
1:c76f109:         //1 mb limit
1:c76f109:         policy.setMemoryLimit(1024000);
1:c76f109: 
1:c76f109:         policy.setCursorMemoryHighWaterMark(50);
1:c76f109: 
1:c76f109:         policyMap.put(new ActiveMQQueue(MY_QUEUE_2), policy);
1:c76f109:         broker.setDestinationPolicy(policyMap);
1:c76f109: 
1:c76f109:         broker.start();
1:c76f109: 
1:c76f109:         return broker;
1:c76f109:     }
1:c76f109: 
1:c76f109:     @After
1:c76f109:     public void tearDown() throws Exception {
1:c76f109:         broker1.stop();
1:c76f109:     }
1:c76f109: 
1:c76f109: 
1:c76f109:     @Test
1:c76f109:     public void testCursorHighWaterMark() throws Exception {
1:c76f109: 
1:c76f109:         //check the memory usage on broker1 (source broker ) has returned to zero
1:c76f109:         int systemUsage = broker1.getSystemUsage().getMemoryUsage().getPercentUsage();
1:c76f109:         assertEquals("System Usage on broker1 before test", 0, systemUsage);
1:c76f109: 
1:c76f109:         //produce message
1:c76f109:         produceMesssages(MY_QUEUE, 3000);
1:c76f109: 
1:c76f109:         //verify usage is greater than 60%
1:c76f109:         systemUsage = broker1.getSystemUsage().getMemoryUsage().getPercentUsage();
1:c76f109:         assertTrue("System Usage on broker1 before test", 60 < systemUsage);
1:c76f109: 
1:c76f109:         LOG.info("Broker System Mem Usage: " + broker1.getSystemUsage().getMemoryUsage());
1:c76f109: 
1:c76f109:         //send a mesage to myqueue.2
1:c76f109:         produceMesssages(MY_QUEUE_2, 1);
1:c76f109: 
1:c76f109:         //try to consume that message
1:c76f109:         consume(MY_QUEUE_2, 1);
1:c76f109: 
1:c76f109:     }
1:c76f109: 
1:c76f109: 
1:c76f109:     private void produceMesssages(String queue, int messageCount) throws Exception {
1:c76f109: 
1:c76f109:         Connection con = connectionFactory.createConnection();
1:c76f109:         try {
1:c76f109:             con.start();
1:c76f109:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c76f109:             MessageProducer producer = session.createProducer(session.createQueue(queue));
1:c76f109: 
1:c76f109:             String textMessage = getTextForMessage();
1:c76f109:             TextMessage msg = session.createTextMessage(textMessage);
1:c76f109: 
1:c76f109:             for (int i = 0; i < messageCount; i++) {
1:c76f109:                 producer.send(msg);
1:c76f109:             }
1:c76f109: 
1:c76f109:         } finally {
1:c76f109:             con.close();
1:c76f109:         }
1:c76f109: 
1:c76f109:     }
1:c76f109: 
1:c76f109: 
1:c76f109:     private String getTextForMessage() {
1:c76f109:         StringBuffer stringBuffer = new StringBuffer();
1:c76f109: 
1:c76f109:         for (int i = 0; i > 10000; i++) {
1:c76f109:             stringBuffer.append("0123456789");
1:c76f109:         }
1:c76f109: 
1:c76f109:         return stringBuffer.toString();
1:c76f109:     }
1:c76f109: 
1:c76f109: 
1:c76f109:     private void consume(String queue, int messageCount) throws Exception {
1:c76f109: 
1:c76f109:         Connection con = connectionFactory.createConnection();
1:c76f109:         try {
1:c76f109:             con.start();
1:c76f109:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c76f109:             MessageConsumer messageConsumer
1:c76f109:                     = session.createConsumer(session.createQueue(queue));
1:c76f109: 
1:c76f109:             for (int i = 0; i < messageCount; i++) {
1:c76f109:                 javax.jms.Message message = messageConsumer.receive(5000l);
1:c76f109:                 if (message == null) {
1:c76f109:                     fail("should have received a message");
1:c76f109:                 }
1:c76f109:             }
1:c76f109: 
1:c76f109:         } finally {
1:c76f109:             con.close();
1:c76f109:         }
1:c76f109: 
1:c76f109:     }
1:c76f109: 
1:c76f109: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c76f109
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import static junit.framework.Assert.assertTrue;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: /**
1:  * ensure a message will be pages in from the store when another dest has stopped caching
1:  */
1: 
1: public class CursorMemoryHighWaterMarkTest {
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(CursorMemoryHighWaterMarkTest.class);
1: 
1: 
1:     public static final String MY_QUEUE_2 = "myQueue_2";
1:     public static final String MY_QUEUE = "myQueue";
1:     public static final String BROKER_NAME = "myBroker";
1:     private BrokerService broker1;
1:     private ActiveMQConnectionFactory connectionFactory;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker1 = createAndStartBroker(BROKER_NAME);
1:         broker1.waitUntilStarted();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory("vm://" + BROKER_NAME);
1:     }
1: 
1: 
1:     private BrokerService createAndStartBroker(String name)
1:             throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setBrokerName(name);
1:         broker.setUseJmx(true);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(5000000l);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1: 
1:         //1 mb limit
1:         policy.setMemoryLimit(1024000);
1: 
1:         policy.setCursorMemoryHighWaterMark(50);
1: 
1:         policyMap.put(new ActiveMQQueue(MY_QUEUE_2), policy);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.start();
1: 
1:         return broker;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker1.stop();
1:     }
1: 
1: 
1:     @Test
1:     public void testCursorHighWaterMark() throws Exception {
1: 
1:         //check the memory usage on broker1 (source broker ) has returned to zero
1:         int systemUsage = broker1.getSystemUsage().getMemoryUsage().getPercentUsage();
1:         assertEquals("System Usage on broker1 before test", 0, systemUsage);
1: 
1:         //produce message
1:         produceMesssages(MY_QUEUE, 3000);
1: 
1:         //verify usage is greater than 60%
1:         systemUsage = broker1.getSystemUsage().getMemoryUsage().getPercentUsage();
1:         assertTrue("System Usage on broker1 before test", 60 < systemUsage);
1: 
1:         LOG.info("Broker System Mem Usage: " + broker1.getSystemUsage().getMemoryUsage());
1: 
1:         //send a mesage to myqueue.2
1:         produceMesssages(MY_QUEUE_2, 1);
1: 
1:         //try to consume that message
1:         consume(MY_QUEUE_2, 1);
1: 
1:     }
1: 
1: 
1:     private void produceMesssages(String queue, int messageCount) throws Exception {
1: 
1:         Connection con = connectionFactory.createConnection();
1:         try {
1:             con.start();
1:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(session.createQueue(queue));
1: 
1:             String textMessage = getTextForMessage();
1:             TextMessage msg = session.createTextMessage(textMessage);
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 producer.send(msg);
1:             }
1: 
1:         } finally {
1:             con.close();
1:         }
1: 
1:     }
1: 
1: 
1:     private String getTextForMessage() {
1:         StringBuffer stringBuffer = new StringBuffer();
1: 
1:         for (int i = 0; i > 10000; i++) {
1:             stringBuffer.append("0123456789");
1:         }
1: 
1:         return stringBuffer.toString();
1:     }
1: 
1: 
1:     private void consume(String queue, int messageCount) throws Exception {
1: 
1:         Connection con = connectionFactory.createConnection();
1:         try {
1:             con.start();
1:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer messageConsumer
1:                     = session.createConsumer(session.createQueue(queue));
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 javax.jms.Message message = messageConsumer.receive(5000l);
1:                 if (message == null) {
1:                     fail("should have received a message");
1:                 }
1:             }
1: 
1:         } finally {
1:             con.close();
1:         }
1: 
1:     }
1: 
1: }
============================================================================