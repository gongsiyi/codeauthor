1:61a3eab: /**
1:61a3eab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:61a3eab:  * contributor license agreements.  See the NOTICE file distributed with
1:61a3eab:  * this work for additional information regarding copyright ownership.
1:61a3eab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:61a3eab:  * (the "License"); you may not use this file except in compliance with
1:61a3eab:  * the License.  You may obtain a copy of the License at
1:61a3eab:  *
1:61a3eab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:61a3eab:  *
1:61a3eab:  * Unless required by applicable law or agreed to in writing, software
1:61a3eab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:61a3eab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61a3eab:  * See the License for the specific language governing permissions and
1:61a3eab:  * limitations under the License.
1:61a3eab:  */
1:61a3eab: package org.apache.activemq.transport.amqp.protocol;
1:61a3eab: 
1:61a3eab: import static org.junit.Assert.assertFalse;
1:61a3eab: import static org.junit.Assert.assertTrue;
1:61a3eab: 
1:61a3eab: import java.util.concurrent.atomic.AtomicBoolean;
1:61a3eab: 
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpHeader;
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpWireFormat;
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpWireFormat.ResetListener;
1:61a3eab: import org.junit.Test;
1:61a3eab: 
1:61a3eab: public class AmqpWireFormatTest {
1:61a3eab: 
1:61a3eab:     private final AmqpWireFormat wireFormat = new AmqpWireFormat();
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testWhenSaslNotAllowedNonSaslHeaderIsInvliad() {
1:61a3eab:         wireFormat.setAllowNonSaslConnections(false);
1:61a3eab: 
1:61a3eab:         AmqpHeader nonSaslHeader = new AmqpHeader();
1:c599844:         assertFalse(wireFormat.isHeaderValid(nonSaslHeader, false));
1:61a3eab:         AmqpHeader saslHeader = new AmqpHeader();
1:61a3eab:         saslHeader.setProtocolId(3);
1:c599844:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testWhenSaslAllowedNonSaslHeaderIsValid() {
1:61a3eab:         wireFormat.setAllowNonSaslConnections(true);
1:61a3eab: 
1:61a3eab:         AmqpHeader nonSaslHeader = new AmqpHeader();
1:c599844:         assertTrue(wireFormat.isHeaderValid(nonSaslHeader, false));
1:61a3eab:         AmqpHeader saslHeader = new AmqpHeader();
1:61a3eab:         saslHeader.setProtocolId(3);
1:c599844:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
1:c599844:     }
1:c599844: 
1:c599844:     @Test
1:c599844:     public void testNonSaslHeaderAfterSaslAuthenticationIsAccepted() {
1:c599844:         wireFormat.setAllowNonSaslConnections(false);
1:c599844: 
1:c599844:         AmqpHeader nonSaslHeader = new AmqpHeader();
1:c599844:         assertTrue(wireFormat.isHeaderValid(nonSaslHeader, true));
1:c599844:         AmqpHeader saslHeader = new AmqpHeader();
1:c599844:         saslHeader.setProtocolId(3);
1:c599844:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testMagicResetListener() throws Exception {
1:61a3eab:         final AtomicBoolean reset = new AtomicBoolean();
1:61a3eab: 
1:61a3eab:         wireFormat.setProtocolResetListener(new ResetListener() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public void onProtocolReset() {
1:61a3eab:                 reset.set(true);
1:61a3eab:             }
1:61a3eab:         });
1:61a3eab: 
1:61a3eab:         wireFormat.resetMagicRead();
1:61a3eab:         assertTrue(reset.get());
1:61a3eab:     }
1:61a3eab: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c599844
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(wireFormat.isHeaderValid(nonSaslHeader, false));
1:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(wireFormat.isHeaderValid(nonSaslHeader, false));
1:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
1:     }
1: 
1:     @Test
1:     public void testNonSaslHeaderAfterSaslAuthenticationIsAccepted() {
1:         wireFormat.setAllowNonSaslConnections(false);
1: 
1:         AmqpHeader nonSaslHeader = new AmqpHeader();
1:         assertTrue(wireFormat.isHeaderValid(nonSaslHeader, true));
1:         AmqpHeader saslHeader = new AmqpHeader();
1:         saslHeader.setProtocolId(3);
1:         assertTrue(wireFormat.isHeaderValid(saslHeader, false));
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.activemq.transport.amqp.AmqpHeader;
1: import org.apache.activemq.transport.amqp.AmqpWireFormat;
1: import org.apache.activemq.transport.amqp.AmqpWireFormat.ResetListener;
1: import org.junit.Test;
1: 
1: public class AmqpWireFormatTest {
1: 
1:     private final AmqpWireFormat wireFormat = new AmqpWireFormat();
1: 
1:     @Test
1:     public void testWhenSaslNotAllowedNonSaslHeaderIsInvliad() {
1:         wireFormat.setAllowNonSaslConnections(false);
1: 
1:         AmqpHeader nonSaslHeader = new AmqpHeader();
0:         assertFalse(wireFormat.isHeaderValid(nonSaslHeader));
1:         AmqpHeader saslHeader = new AmqpHeader();
1:         saslHeader.setProtocolId(3);
0:         assertTrue(wireFormat.isHeaderValid(saslHeader));
1:     }
1: 
1:     @Test
1:     public void testWhenSaslAllowedNonSaslHeaderIsValid() {
1:         wireFormat.setAllowNonSaslConnections(true);
1: 
1:         AmqpHeader nonSaslHeader = new AmqpHeader();
0:         assertTrue(wireFormat.isHeaderValid(nonSaslHeader));
1:         AmqpHeader saslHeader = new AmqpHeader();
1:         saslHeader.setProtocolId(3);
0:         assertTrue(wireFormat.isHeaderValid(saslHeader));
1:     }
1: 
1:     @Test
1:     public void testMagicResetListener() throws Exception {
1:         final AtomicBoolean reset = new AtomicBoolean();
1: 
1:         wireFormat.setProtocolResetListener(new ResetListener() {
1: 
1:             @Override
1:             public void onProtocolReset() {
1:                 reset.set(true);
1:             }
1:         });
1: 
1:         wireFormat.resetMagicRead();
1:         assertTrue(reset.get());
1:     }
1: }
============================================================================