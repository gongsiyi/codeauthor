1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example;
1:2ecf41d: 
1:2ecf41d: import org.fusesource.hawtbuf.*;
1:2ecf41d: import org.fusesource.mqtt.client.*;
1:2ecf41d: 
1:2ecf41d: /**
1:2ecf41d:  * Uses an callback based interface to MQTT.  Callback based interfaces
1:2ecf41d:  * are harder to use but are slightly more efficient.
1:2ecf41d:  */
1:2ecf41d: class Listener {
1:2ecf41d: 
1:2ecf41d:     public static void main(String []args) throws Exception {
1:2ecf41d: 
1:2ecf41d:         String user = env("ACTIVEMQ_USER", "admin");
1:2ecf41d:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:2ecf41d:         String host = env("ACTIVEMQ_HOST", "localhost");
1:2ecf41d:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "1883"));
1:2ecf41d:         final String destination = arg(args, 0, "/topic/event");
1:2ecf41d: 
1:2ecf41d: 
1:2ecf41d:         MQTT mqtt = new MQTT();
1:2ecf41d:         mqtt.setHost(host, port);
1:2ecf41d:         mqtt.setUserName(user);
1:2ecf41d:         mqtt.setPassword(password);
1:2ecf41d: 
1:2ecf41d: 
1:2ecf41d:         final CallbackConnection connection = mqtt.callbackConnection();
1:2ecf41d:         connection.listener(new org.fusesource.mqtt.client.Listener() {
1:2ecf41d:             long count = 0;
1:2ecf41d:             long start = System.currentTimeMillis();
1:2ecf41d: 
1:2ecf41d:             public void onConnected() {
1:2ecf41d:             }
1:2ecf41d:             public void onDisconnected() {
1:2ecf41d:             }
1:2ecf41d:             public void onFailure(Throwable value) {
1:2ecf41d:                 value.printStackTrace();
1:2ecf41d:                 System.exit(-2);
1:2ecf41d:             }
1:2ecf41d:             public void onPublish(UTF8Buffer topic, Buffer msg, Runnable ack) {
1:2ecf41d:                 String body = msg.utf8().toString();
1:2ecf41d:                 if( "SHUTDOWN".equals(body)) {
1:2ecf41d:                     long diff = System.currentTimeMillis() - start;
1:2ecf41d:                     System.out.println(String.format("Received %d in %.2f seconds", count, (1.0*diff/1000.0)));
1:2ecf41d:                     connection.disconnect(new Callback<Void>() {
1:2ecf41d:                         @Override
1:2ecf41d:                         public void onSuccess(Void value) {
1:2ecf41d:                             System.exit(0);
1:2ecf41d:                         }
1:2ecf41d:                         @Override
1:2ecf41d:                         public void onFailure(Throwable value) {
1:2ecf41d:                             value.printStackTrace();
1:2ecf41d:                             System.exit(-2);
1:2ecf41d:                         }
1:2ecf41d:                     });
1:2ecf41d:                 } else {
1:2ecf41d:                     if( count == 0 ) {
1:2ecf41d:                         start = System.currentTimeMillis();
1:2ecf41d:                     }
1:2ecf41d:                     if( count % 1000 == 0 ) {
1:2ecf41d:                         System.out.println(String.format("Received %d messages.", count));
1:2ecf41d:                     }
1:2ecf41d:                     count ++;
1:2ecf41d:                 }
1:6773b8f:                 ack.run();
1:2ecf41d:             }
1:2ecf41d:         });
1:2ecf41d:         connection.connect(new Callback<Void>() {
1:2ecf41d:             @Override
1:2ecf41d:             public void onSuccess(Void value) {
1:2ecf41d:                 Topic[] topics = {new Topic(destination, QoS.AT_LEAST_ONCE)};
1:2ecf41d:                 connection.subscribe(topics, new Callback<byte[]>() {
1:2ecf41d:                     public void onSuccess(byte[] qoses) {
1:2ecf41d:                     }
1:2ecf41d:                     public void onFailure(Throwable value) {
1:2ecf41d:                         value.printStackTrace();
1:2ecf41d:                         System.exit(-2);
1:2ecf41d:                     }
1:2ecf41d:                 });
1:2ecf41d:             }
1:2ecf41d:             @Override
1:2ecf41d:             public void onFailure(Throwable value) {
1:2ecf41d:                 value.printStackTrace();
1:2ecf41d:                 System.exit(-2);
1:2ecf41d:             }
1:2ecf41d:         });
1:2ecf41d: 
1:2ecf41d:         // Wait forever..
1:2ecf41d:         synchronized (Listener.class) {
1:2ecf41d:             while(true)
1:2ecf41d:                 Listener.class.wait();
1:2ecf41d:         }
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String env(String key, String defaultValue) {
1:2ecf41d:         String rc = System.getenv(key);
1:2ecf41d:         if( rc== null )
1:2ecf41d:             return defaultValue;
1:2ecf41d:         return rc;
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String arg(String []args, int index, String defaultValue) {
1:2ecf41d:         if( index < args.length )
1:2ecf41d:             return args[index];
1:2ecf41d:         else
1:2ecf41d:             return defaultValue;
1:2ecf41d:     }
1:2ecf41d: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:6773b8f
/////////////////////////////////////////////////////////////////////////
1:                 ack.run();
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example;
1: 
1: import org.fusesource.hawtbuf.*;
1: import org.fusesource.mqtt.client.*;
1: 
1: /**
1:  * Uses an callback based interface to MQTT.  Callback based interfaces
1:  * are harder to use but are slightly more efficient.
1:  */
1: class Listener {
1: 
1:     public static void main(String []args) throws Exception {
1: 
1:         String user = env("ACTIVEMQ_USER", "admin");
1:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:         String host = env("ACTIVEMQ_HOST", "localhost");
1:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "1883"));
1:         final String destination = arg(args, 0, "/topic/event");
1: 
1: 
1:         MQTT mqtt = new MQTT();
1:         mqtt.setHost(host, port);
1:         mqtt.setUserName(user);
1:         mqtt.setPassword(password);
1: 
1: 
1:         final CallbackConnection connection = mqtt.callbackConnection();
1:         connection.listener(new org.fusesource.mqtt.client.Listener() {
1:             long count = 0;
1:             long start = System.currentTimeMillis();
1: 
1:             public void onConnected() {
1:             }
1:             public void onDisconnected() {
1:             }
1:             public void onFailure(Throwable value) {
1:                 value.printStackTrace();
1:                 System.exit(-2);
1:             }
1:             public void onPublish(UTF8Buffer topic, Buffer msg, Runnable ack) {
1:                 String body = msg.utf8().toString();
1:                 if( "SHUTDOWN".equals(body)) {
1:                     long diff = System.currentTimeMillis() - start;
1:                     System.out.println(String.format("Received %d in %.2f seconds", count, (1.0*diff/1000.0)));
1:                     connection.disconnect(new Callback<Void>() {
1:                         @Override
1:                         public void onSuccess(Void value) {
1:                             System.exit(0);
1:                         }
1:                         @Override
1:                         public void onFailure(Throwable value) {
1:                             value.printStackTrace();
1:                             System.exit(-2);
1:                         }
1:                     });
1:                 } else {
1:                     if( count == 0 ) {
1:                         start = System.currentTimeMillis();
1:                     }
1:                     if( count % 1000 == 0 ) {
1:                         System.out.println(String.format("Received %d messages.", count));
1:                     }
1:                     count ++;
1:                 }
1:             }
1:         });
1:         connection.connect(new Callback<Void>() {
1:             @Override
1:             public void onSuccess(Void value) {
1:                 Topic[] topics = {new Topic(destination, QoS.AT_LEAST_ONCE)};
1:                 connection.subscribe(topics, new Callback<byte[]>() {
1:                     public void onSuccess(byte[] qoses) {
1:                     }
1:                     public void onFailure(Throwable value) {
1:                         value.printStackTrace();
1:                         System.exit(-2);
1:                     }
1:                 });
1:             }
1:             @Override
1:             public void onFailure(Throwable value) {
1:                 value.printStackTrace();
1:                 System.exit(-2);
1:             }
1:         });
1: 
1:         // Wait forever..
1:         synchronized (Listener.class) {
1:             while(true)
1:                 Listener.class.wait();
1:         }
1:     }
1: 
1:     private static String env(String key, String defaultValue) {
1:         String rc = System.getenv(key);
1:         if( rc== null )
1:             return defaultValue;
1:         return rc;
1:     }
1: 
1:     private static String arg(String []args, int index, String defaultValue) {
1:         if( index < args.length )
1:             return args[index];
1:         else
1:             return defaultValue;
1:     }
1: }
============================================================================