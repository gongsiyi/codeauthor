1:97e0fcc: /**
1:97e0fcc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:97e0fcc:  * contributor license agreements.  See the NOTICE file distributed with
1:97e0fcc:  * this work for additional information regarding copyright ownership.
1:97e0fcc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:97e0fcc:  * (the "License"); you may not use this file except in compliance with
1:97e0fcc:  * the License.  You may obtain a copy of the License at
1:97e0fcc:  *
1:97e0fcc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:97e0fcc:  *
1:97e0fcc:  * Unless required by applicable law or agreed to in writing, software
1:97e0fcc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:97e0fcc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:97e0fcc:  * See the License for the specific language governing permissions and
1:97e0fcc:  * limitations under the License.
1:97e0fcc:  */
5:97e0fcc: 
1:97e0fcc: package org.apache.activemq.usage;
1:97e0fcc: 
1:97e0fcc: import static org.junit.Assert.assertEquals;
1:97e0fcc: import static org.junit.Assert.assertNotNull;
1:97e0fcc: import static org.junit.Assert.assertTrue;
1:97e0fcc: import java.util.concurrent.CountDownLatch;
1:1a5ad28: import java.util.concurrent.LinkedBlockingQueue;
1:1a5ad28: import java.util.concurrent.ThreadFactory;
1:1a5ad28: import java.util.concurrent.ThreadPoolExecutor;
1:97e0fcc: import java.util.concurrent.TimeUnit;
1:97e0fcc: import org.junit.After;
1:97e0fcc: import org.junit.Before;
1:97e0fcc: import org.junit.Test;
1:97e0fcc: 
1:97e0fcc: public class MemoryUsageTest {
1:97e0fcc: 
1:97e0fcc:     MemoryUsage underTest;
1:1a5ad28:     ThreadPoolExecutor executor;
1:97e0fcc:       
1:97e0fcc:     @Test
1:97e0fcc:     public final void testPercentUsageNeedsNoThread() {    
1:97e0fcc:         int activeThreadCount = Thread.activeCount();
1:97e0fcc:         underTest.setLimit(10);
1:97e0fcc:         underTest.start();
1:97e0fcc:         underTest.increaseUsage(1);
1:97e0fcc:         assertEquals("usage is correct", 10, underTest.getPercentUsage());
1:839b154:         assertEquals("no new thread created without listener or callback",activeThreadCount, Thread.activeCount());
1:97e0fcc:     }
1:feb71c3:     
1:97e0fcc:     @Test
1:97e0fcc:     public final void testAddUsageListenerStartsThread() throws Exception {       
1:97e0fcc:         int activeThreadCount = Thread.activeCount();
1:97e0fcc:         underTest = new MemoryUsage();
1:1a5ad28:         underTest.setExecutor(executor);
1:97e0fcc:         underTest.setLimit(10);
1:97e0fcc:         underTest.start();
1:97e0fcc:         final CountDownLatch called = new CountDownLatch(1);
1:97e0fcc:         final String[] listnerThreadNameHolder = new String[1];
1:97e0fcc:         underTest.addUsageListener(new UsageListener() {
1:97e0fcc:             public void onUsageChanged(Usage usage, int oldPercentUsage,
1:97e0fcc:                     int newPercentUsage) {
1:97e0fcc:                 called.countDown();
1:97e0fcc:                 listnerThreadNameHolder[0] = Thread.currentThread().toString();
1:97e0fcc:             }
1:97e0fcc:         });
1:97e0fcc:         underTest.increaseUsage(1);
1:839b154:         assertTrue("listener was called", called.await(30, TimeUnit.SECONDS));
1:839b154:         assertTrue("listener called from another thread", !Thread.currentThread().toString().equals(listnerThreadNameHolder[0]));
1:97e0fcc:         assertEquals("usage is correct", 10, underTest.getPercentUsage());
1:97e0fcc:         assertEquals("new thread created with listener", activeThreadCount + 1, Thread.activeCount());        
1:97e0fcc:     }
1:839b154: 
1:feb71c3:     @Test
1:feb71c3:     public void testPercentOfJvmHeap() throws Exception {
1:feb71c3:         underTest.setPercentOfJvmHeap(50);
1:feb71c3:         assertEquals("limit is half jvm limit", Math.round(Runtime.getRuntime().maxMemory() / 2.0), underTest.getLimit());
1:feb71c3:     }
1:feb71c3: 
1:839b154:     @Test
1:839b154:     public void testParentPortion() throws Exception {
1:839b154:         underTest.setLimit(1491035750);
1:839b154:         MemoryUsage child = new MemoryUsage(underTest, "child", 1f);
1:839b154:         assertEquals("limits are matched whole", underTest.getLimit(), child.getLimit());
1:839b154: 
1:839b154:         child.setUsagePortion(1f);
1:839b154:         assertEquals("limits are still matched whole", underTest.getLimit(), child.getLimit());
1:839b154:     }
1:839b154: 
1:97e0fcc:     @Before
1:97e0fcc:     public void setUp() throws Exception {
1:97e0fcc:         underTest = new MemoryUsage();
1:1a5ad28:         this.executor = new ThreadPoolExecutor(1, 10, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {
1:1a5ad28:             public Thread newThread(Runnable runnable) {
1:1a5ad28:                 Thread thread = new Thread(runnable, "Usage Async Task");
1:1a5ad28:                 thread.setDaemon(true);
1:1a5ad28:                 return thread;
1:97e0fcc:             }
1:1a5ad28:         });
1:1a5ad28:         underTest.setExecutor(this.executor);
1:839b154: 
1:1a5ad28:     }
1:97e0fcc: 
1:97e0fcc:     @After
1:97e0fcc:     public void tearDown() {
1:97e0fcc:         assertNotNull(underTest);
1:97e0fcc:         underTest.stop();
1:1a5ad28:         if (this.executor != null) {
1:1a5ad28:             this.executor.shutdownNow();
1:97e0fcc:         }
1:97e0fcc:     }
1:1a5ad28: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:839b154
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("no new thread created without listener or callback",activeThreadCount, Thread.activeCount());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("listener was called", called.await(30, TimeUnit.SECONDS));
1:         assertTrue("listener called from another thread", !Thread.currentThread().toString().equals(listnerThreadNameHolder[0]));
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testParentPortion() throws Exception {
1:         underTest.setLimit(1491035750);
1:         MemoryUsage child = new MemoryUsage(underTest, "child", 1f);
1:         assertEquals("limits are matched whole", underTest.getLimit(), child.getLimit());
1: 
1:         child.setUsagePortion(1f);
1:         assertEquals("limits are still matched whole", underTest.getLimit(), child.getLimit());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:feb71c3
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testPercentOfJvmHeap() throws Exception {
1:         underTest.setPercentOfJvmHeap(50);
1:         assertEquals("limit is half jvm limit", Math.round(Runtime.getRuntime().maxMemory() / 2.0), underTest.getLimit());
1:     }
1: 
commit:97e0fcc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usage;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MemoryUsageTest {
1: 
1:     MemoryUsage underTest;
1:       
1:     @Test
1:     public final void testPercentUsageNeedsNoThread() {    
1:         int activeThreadCount = Thread.activeCount();
1:         underTest.setLimit(10);
1:         underTest.start();
1:         underTest.increaseUsage(1);
1:         assertEquals("usage is correct", 10, underTest.getPercentUsage());
0:         assertEquals("no new thread created withough listener or callback",activeThreadCount, Thread.activeCount()); 
1:     }
1:     
1:     @Test
1:     public final void testAddUsageListenerStartsThread() throws Exception {       
1:         int activeThreadCount = Thread.activeCount();
1:         underTest = new MemoryUsage();
1:         underTest.setLimit(10);
1:         underTest.start();
1:         final CountDownLatch called = new CountDownLatch(1);
1:         final String[] listnerThreadNameHolder = new String[1];
1:         underTest.addUsageListener(new UsageListener() {
1:             public void onUsageChanged(Usage usage, int oldPercentUsage,
1:                     int newPercentUsage) {
1:                 called.countDown();
1:                 listnerThreadNameHolder[0] = Thread.currentThread().toString();
1:             }
1:         });
1:         underTest.increaseUsage(1);
0:         assertTrue("listner was called", called.await(30, TimeUnit.SECONDS));
0:         assertTrue("listner called from another thread", !Thread.currentThread().toString().equals(listnerThreadNameHolder[0]));
1:         assertEquals("usage is correct", 10, underTest.getPercentUsage());
1:         assertEquals("new thread created with listener", activeThreadCount + 1, Thread.activeCount());        
1:     }
1:     
1:     @Before
1:     public void setUp() throws Exception {
1:         underTest = new MemoryUsage();   
1:     }
1:     
1:     @After
1:     public void tearDown() {
1:         assertNotNull(underTest);
1:         underTest.stop();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d16a6fc
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
1:     ThreadPoolExecutor executor;
/////////////////////////////////////////////////////////////////////////
1:         underTest.setExecutor(executor);
/////////////////////////////////////////////////////////////////////////
0:         underTest = new MemoryUsage();
1:         this.executor = new ThreadPoolExecutor(1, 10, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {
1:             public Thread newThread(Runnable runnable) {
1:                 Thread thread = new Thread(runnable, "Usage Async Task");
1:                 thread.setDaemon(true);
1:                 return thread;
1:             }
1:         });
1:         underTest.setExecutor(this.executor);
0:         
1:         if (this.executor != null) {
1:             this.executor.shutdownNow();
1:         }
============================================================================