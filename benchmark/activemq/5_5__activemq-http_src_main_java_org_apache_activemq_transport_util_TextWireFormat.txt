1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.util;
1:4b202c1: 
1:2cc9b26: import java.io.DataInput;
1:40a7d3b: import java.io.DataInputStream;
1:2cc9b26: import java.io.DataOutput;
1:88acb0e: import java.io.DataOutputStream;
1:40a7d3b: import java.io.IOException;
1:40a7d3b: import java.io.Reader;
1:f451ad0: 
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:60d6c36: 
1:40a7d3b: /**
1:40a7d3b:  * Adds the extra methods available to text based wire format implementations
1:b0c2a40:  *
1:5be5a62:  *
1:40a7d3b:  */
1:40a7d3b: public abstract class TextWireFormat implements WireFormat {
1:540dd5c: 
1:4b202c1:     public abstract Object unmarshalText(String text) throws IOException;
1:540dd5c: 
1:4b202c1:     public abstract Object unmarshalText(Reader reader) throws IOException;
1:88acb0e: 
1:4b202c1:     public abstract String marshalText(Object command) throws IOException;
7:40a7d3b: 
1:2cc9b26:     public void marshal(Object command, DataOutput out) throws IOException {
1:568ab1e:         String text = marshalText(command);
1:568ab1e:         byte[] utf8 = text.getBytes("UTF-8");
1:568ab1e:         out.writeInt(utf8.length);
1:568ab1e:         out.write(utf8);
1:88acb0e:     }
1:88acb0e: 
1:2cc9b26:     public Object unmarshal(DataInput in) throws IOException {
1:568ab1e:         int length = in.readInt();
1:568ab1e:         byte[] utf8 = new byte[length];
1:568ab1e:         in.readFully(utf8);
1:568ab1e:         String text = new String(utf8, "UTF-8");
1:88acb0e:         return unmarshalText(text);
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public ByteSequence marshal(Object command) throws IOException {
1:88acb0e:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:88acb0e:         DataOutputStream dos = new DataOutputStream(baos);
1:88acb0e:         marshal(command, dos);
1:88acb0e:         dos.close();
1:88acb0e:         return baos.toByteSequence();
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public Object unmarshal(ByteSequence packet) throws IOException {
1:88acb0e:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:88acb0e:         DataInputStream dis = new DataInputStream(stream);
1:88acb0e:         return unmarshal(dis);
1:88acb0e:     }
1:88acb0e: 
1:568ab1e:     public boolean inReceive() {
1:568ab1e:         // TODO Implement for inactivity monitor
1:568ab1e:         return false;
1:568ab1e:     }
1:568ab1e: 
1:60d6c36: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0:     public abstract Object unmarshalText(String text);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public ByteSequence marshal(Object command) throws IOException {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
0:     public abstract Object unmarshalText(String text);    
0:     public abstract Object unmarshalText(Reader reader);
0:     public abstract String marshalText(Object command);
0:     public void marshal(Object command, DataOutputStream out) throws IOException {
0:         out.writeUTF(marshalText(command));
1: 
0:     public Object unmarshal(DataInputStream in) throws IOException {
0:         String text = in.readUTF();
1:         return unmarshalText(text);
1: 	}
1:     
0: 	public ByteSequence marshal(Object command) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         marshal(command, dos);
1:         dos.close();
1:         return baos.toByteSequence();
1:     }
1: 
1:     public Object unmarshal(ByteSequence packet) throws IOException {
1:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:         DataInputStream dis = new DataInputStream(stream);
1:         return unmarshal(dis);
1:     }
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activemq.command.Command;
1: 
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.util;
0: import org.apache.activemq.command.Command;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4b202c1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
1:     public abstract Object unmarshalText(String text) throws IOException;
1:     public abstract Object unmarshalText(Reader reader) throws IOException;
1:     public abstract String marshalText(Object command) throws IOException;
author:Robert Davies
-------------------------------------------------------------------------------
commit:568ab1e
/////////////////////////////////////////////////////////////////////////
1:         String text = marshalText(command);
1:         byte[] utf8 = text.getBytes("UTF-8");
1:         out.writeInt(utf8.length);
1:         out.write(utf8);
1:         int length = in.readInt();
1:         byte[] utf8 = new byte[length];
1:         in.readFully(utf8);
1:         String text = new String(utf8, "UTF-8");
/////////////////////////////////////////////////////////////////////////
1:     public boolean inReceive() {
1:         // TODO Implement for inactivity monitor
1:         return false;
1:     }
1: 
commit:2cc9b26
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     public void marshal(Object command, DataOutput out) throws IOException {
1:     public Object unmarshal(DataInput in) throws IOException {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:60d6c36
/////////////////////////////////////////////////////////////////////////
0: 	public boolean inReceive() {
0: 		// TODO Implement for inactivity monitor
0: 		return false;
1: 	}
1:     
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.util;
1: 
0: import org.activeio.command.WireFormat;
0: import org.activemq.command.Command;
1: 
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.io.Reader;
1: 
1: /**
1:  * Adds the extra methods available to text based wire format implementations
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public abstract class TextWireFormat implements WireFormat {
1: 
0:     public abstract Command readCommand(String text);
1:     
0:     public abstract Command readCommand(Reader reader);
1: 
0:     public abstract String toString(Command command);
1: 
0:     public Command readCommand(DataInputStream in) throws IOException {
0:         String text = in.readUTF();
0:         return readCommand(text);
0:     }
0: }
============================================================================