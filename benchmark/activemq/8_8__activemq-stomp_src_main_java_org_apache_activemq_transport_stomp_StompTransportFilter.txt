1:dc98d96: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
6:dc98d96:  *
1:dc98d96:  * Unless required by applicable law or agreed to in writing, software
1:dc98d96:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc98d96:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc98d96:  * See the License for the specific language governing permissions and
1:dc98d96:  * limitations under the License.
1:dc98d96:  */
1:98b61e4: package org.apache.activemq.transport.stomp;
1:0885c60: 
1:dc98d96: import java.io.IOException;
1:0885c60: 
1:dc98d96: import javax.jms.JMSException;
1:f812e34: 
1:11705e7: import org.apache.activemq.broker.BrokerContext;
1:dc98d96: import org.apache.activemq.command.Command;
1:dc98d96: import org.apache.activemq.transport.Transport;
1:dc98d96: import org.apache.activemq.transport.TransportFilter;
1:5af8118: import org.apache.activemq.transport.TransportListener;
1:dc98d96: import org.apache.activemq.util.IOExceptionSupport;
1:0885c60: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:05de2b1: 
1:d0ab117: /**
1:f812e34:  * The StompTransportFilter normally sits on top of a TcpTransport that has been
1:f812e34:  * configured with the StompWireFormat and is used to convert STOMP commands to
1:2b5608f:  * ActiveMQ commands. All of the conversion work is done by delegating to the
1:f812e34:  * ProtocolConverter.
1:0885c60:  *
1:dc98d96:  * @author <a href="http://hiramchirino.com">chirino</a>
1:dc98d96:  */
1:ceed011: public class StompTransportFilter extends TransportFilter implements StompTransport {
1:3125cae: 
1:8976a6b:     private static final Logger TRACE = LoggerFactory.getLogger(StompTransportFilter.class.getPackage().getName() + ".StompIO");
1:3125cae: 
1:f8485e3:     private final ProtocolConverter protocolConverter;
1:0885c60:     private StompInactivityMonitor monitor;
1:0885c60:     private StompWireFormat wireFormat;
1:05de2b1: 
1:05de2b1:     private boolean trace;
1:8cf3187: 
1:0885c60:     public StompTransportFilter(Transport next, WireFormat wireFormat, BrokerContext brokerContext) {
1:f812e34:         super(next);
1:0885c60:         this.protocolConverter = new ProtocolConverter(this, brokerContext);
1:8cf3187: 
1:0885c60:         if (wireFormat instanceof StompWireFormat) {
1:0885c60:             this.wireFormat = (StompWireFormat) wireFormat;
1:8cf3187:         }
1:8cf3187:     }
1:a7a3c78: 
1:d0ab117:     @Override
1:3125cae:     public void start() throws Exception {
1:3125cae:         if (monitor != null) {
1:3125cae:             monitor.startConnectCheckTask(getConnectAttemptTimeout());
1:3125cae:         }
1:3125cae:         super.start();
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:f812e34:     public void oneway(Object o) throws IOException {
1:8cf3187:         try {
1:8cf3187:             final Command command = (Command) o;
1:690b7bc:             protocolConverter.onActiveMQCommand(command);
1:f812e34:         } catch (JMSException e) {
1:f812e34:             throw IOExceptionSupport.create(e);
1:8cf3187:         }
1:8cf3187:     }
1:a7a3c78: 
1:d0ab117:     @Override
1:f812e34:     public void onCommand(Object command) {
1:8cf3187:         try {
1:f812e34:             if (trace) {
1:8976a6b:                 TRACE.trace("Received: \n" + command);
1:8cf3187:             }
1:8cf3187: 
1:8cf3187:             protocolConverter.onStompCommand((StompFrame) command);
1:f812e34:         } catch (IOException e) {
1:f812e34:             onException(e);
1:f812e34:         } catch (JMSException e) {
1:f812e34:             onException(IOExceptionSupport.create(e));
1:8cf3187:         }
1:8cf3187:     }
1:8cf3187: 
1:d0ab117:     @Override
1:f812e34:     public void sendToActiveMQ(Command command) {
1:5af8118:         TransportListener l = transportListener;
1:8cf3187:         if (l != null) {
1:5af8118:             l.onCommand(command);
1:8cf3187:         }
1:8cf3187:     }
1:8cf3187: 
1:d0ab117:     @Override
1:f812e34:     public void sendToStomp(StompFrame command) throws IOException {
1:f812e34:         if (trace) {
1:8976a6b:             TRACE.trace("Sending: \n" + command);
1:8cf3187:         }
1:5af8118:         Transport n = next;
1:8cf3187:         if (n != null) {
1:5af8118:             n.oneway(command);
1:0885c60:         }
1:0885c60:     }
1:8cf3187: 
1:f812e34:     public boolean isTrace() {
1:f812e34:         return trace;
10:f812e34:     }
1:0885c60: 
1:f812e34:     public void setTrace(boolean trace) {
1:f812e34:         this.trace = trace;
1:f812e34:     }
1:0885c60: 
1:0885c60:     @Override
1:0885c60:     public StompInactivityMonitor getInactivityMonitor() {
1:0885c60:         return monitor;
1:0885c60:     }
1:0885c60: 
1:0885c60:     public void setInactivityMonitor(StompInactivityMonitor monitor) {
1:0885c60:         this.monitor = monitor;
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:0885c60:     public StompWireFormat getWireFormat() {
1:0885c60:         return this.wireFormat;
1:8cf3187:     }
1:8cf3187: 
1:33edc99:     public String getDefaultHeartBeat() {
1:33edc99:         return protocolConverter != null ? protocolConverter.getDefaultHeartBeat() : null;
1:8cf3187:     }
1:8cf3187: 
1:33edc99:     public void setDefaultHeartBeat(String defaultHeartBeat) {
1:33edc99:         protocolConverter.setDefaultHeartBeat(defaultHeartBeat);
1:0885c60:     }
1:05de2b1: 
1:8d42343:     /**
1:d0ab117:      * Returns the currently configured Read check grace period multiplier.
1:d0ab117:      *
1:d0ab117:      * @return the hbGracePeriodMultiplier
1:d0ab117:      */
1:d0ab117:     public float getHbGracePeriodMultiplier() {
1:d0ab117:         return protocolConverter != null ? protocolConverter.getHbGracePeriodMultiplier() : null;
1:d0ab117:     }
1:d0ab117: 
1:d0ab117:     /**
1:d0ab117:      * Sets the read check grace period multiplier.  New CONNECT frames that indicate a heart beat
1:d0ab117:      * value with a read check interval will have that value multiplied by this value to add a
1:d0ab117:      * grace period before the connection is considered invalid.  By default this value is set to
1:d0ab117:      * zero and no grace period is given.  When set the value must be larger than 1.0 or it will
1:d0ab117:      * be ignored.
1:d0ab117:      *
1:d0ab117:      * @param hbGracePeriodMultiplier the hbGracePeriodMultiplier to set
1:d0ab117:      */
1:d0ab117:     public void setHbGracePeriodMultiplier(float hbGracePeriodMultiplier) {
1:d0ab117:         if (hbGracePeriodMultiplier > 1.0f) {
1:d0ab117:             protocolConverter.setHbGracePeriodMultiplier(hbGracePeriodMultiplier);
1:d0ab117:         }
1:d0ab117:     }
1:d0ab117: 
1:dc98d96:     /**
1:8d42343:      * Sets the maximum number of bytes that the data portion of a STOMP frame is allowed to
1:8d42343:      * be, any incoming STOMP frame with a data section larger than this value will receive
1:8d42343:      * an error response.
1:8d42343:      *
1:8d42343:      * @param maxDataLength
1:8d42343:      *        size in bytes of the maximum data portion of a STOMP frame.
1:8d42343:      */
1:8d42343:     public void setMaxDataLength(int maxDataLength) {
1:8d42343:         wireFormat.setMaxDataLength(maxDataLength);
1:8d42343:     }
1:8d42343: 
1:8d42343:     public int getMaxDataLength() {
1:8d42343:         return wireFormat.getMaxDataLength();
1:8d42343:     }
1:3125cae: 
1:a7a3c78:     public void setMaxFrameSize(int maxFrameSize) {
1:a7a3c78:         wireFormat.setMaxFrameSize(maxFrameSize);
1:a7a3c78:     }
1:3125cae: 
1:a7a3c78:     public long getMaxFrameSize() {
1:a7a3c78:         return wireFormat.getMaxFrameSize();
1:a7a3c78:     }
1:3125cae: 
1:3125cae:     public long getConnectAttemptTimeout() {
1:3125cae:         return wireFormat.getConnectionAttemptTimeout();
1:3125cae:     }
1:3125cae: 
1:3125cae:     public void setConnectAttemptTimeout(long timeout) {
1:3125cae:         wireFormat.setConnectionAttemptTimeout(timeout);
1:3125cae:     }
1:f812e34: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void start() throws Exception {
1:         if (monitor != null) {
1:             monitor.startConnectCheckTask(getConnectAttemptTimeout());
1:         }
1:         super.start();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     public long getConnectAttemptTimeout() {
1:         return wireFormat.getConnectionAttemptTimeout();
1:     }
1: 
1:     public void setConnectAttemptTimeout(long timeout) {
1:         wireFormat.setConnectionAttemptTimeout(timeout);
1:     }
commit:8d42343
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the maximum number of bytes that the data portion of a STOMP frame is allowed to
1:      * be, any incoming STOMP frame with a data section larger than this value will receive
1:      * an error response.
1:      *
1:      * @param maxDataLength
1:      *        size in bytes of the maximum data portion of a STOMP frame.
1:      */
1:     public void setMaxDataLength(int maxDataLength) {
1:         wireFormat.setMaxDataLength(maxDataLength);
1:     }
1: 
1:     public int getMaxDataLength() {
1:         return wireFormat.getMaxDataLength();
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a7a3c78
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setMaxFrameSize(int maxFrameSize) {
1:         wireFormat.setMaxFrameSize(maxFrameSize);
1:     }
1:     
1:     public long getMaxFrameSize() {
1:         return wireFormat.getMaxFrameSize();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d0ab117
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the currently configured Read check grace period multiplier.
1:      *
1:      * @return the hbGracePeriodMultiplier
1:      */
1:     public float getHbGracePeriodMultiplier() {
1:         return protocolConverter != null ? protocolConverter.getHbGracePeriodMultiplier() : null;
1:     }
1: 
1:     /**
1:      * Sets the read check grace period multiplier.  New CONNECT frames that indicate a heart beat
1:      * value with a read check interval will have that value multiplied by this value to add a
1:      * grace period before the connection is considered invalid.  By default this value is set to
1:      * zero and no grace period is given.  When set the value must be larger than 1.0 or it will
1:      * be ignored.
1:      *
1:      * @param hbGracePeriodMultiplier the hbGracePeriodMultiplier to set
1:      */
1:     public void setHbGracePeriodMultiplier(float hbGracePeriodMultiplier) {
1:         if (hbGracePeriodMultiplier > 1.0f) {
1:             protocolConverter.setHbGracePeriodMultiplier(hbGracePeriodMultiplier);
1:         }
1:     }
1: 
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8cf3187
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentLinkedQueue;
0: import org.apache.activemq.thread.DefaultThreadPools;
0: import org.apache.activemq.thread.Task;
0: import org.apache.activemq.thread.TaskRunner;
/////////////////////////////////////////////////////////////////////////
0:     private final TaskRunner asyncSendTask;
0:     private final ConcurrentLinkedQueue<Command> asyncCommands = new ConcurrentLinkedQueue<Command>();
0:     private int maxAsyncBatchSize = 25;
0:         asyncSendTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
0:             public boolean iterate() {
0:                 int iterations = 0;
0:                 TransportListener listener = transportListener;
0:                 if (listener != null) {
0:                     while (iterations++ < maxAsyncBatchSize && !asyncCommands.isEmpty()) {
0:                         Command command = asyncCommands.poll();
0:                         if (command != null) {
0:                             listener.onCommand(command);
1:                         }
1:                     }
1:                 }
0:                 return !asyncCommands.isEmpty();
1:             }
1: 
0:         }, "ActiveMQ StompTransport Async Worker: " + System.identityHashCode(this));
1: 
0:     public void stop() throws Exception {
0:         asyncSendTask.shutdown();
1: 
0:         TransportListener listener = transportListener;
0:         if (listener != null) {
0:             Command commands[] = new Command[0];
0:             asyncCommands.toArray(commands);
0:             asyncCommands.clear();
0:             for(Command command : commands) {
1:                 try {
0:                     listener.onCommand(command);
0:                 } catch(Exception e) {
0:                     break;
1:                 }
1:             }
1:         }
1: 
0:         super.stop();
1:     }
1: 
1:             final Command command = (Command) o;
/////////////////////////////////////////////////////////////////////////
1:             protocolConverter.onStompCommand((StompFrame) command);
/////////////////////////////////////////////////////////////////////////
1:         if (l != null) {
0:     public void asyncSendToActiveMQ(Command command) {
0:         asyncCommands.offer(command);
1:         try {
0:             asyncSendTask.wakeup();
0:         } catch (InterruptedException e) {
0:             Thread.currentThread().interrupt();
1:         }
1:     }
1: 
1:         if (n != null) {
0:         if (next instanceof SslTransport) {
0:             X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
/////////////////////////////////////////////////////////////////////////
1: 
0:     public int getMaxAsyncBatchSize() {
0:         return maxAsyncBatchSize;
1:     }
1: 
0:     public void setMaxAsyncBatchSize(int maxAsyncBatchSize) {
0:         this.maxAsyncBatchSize = maxAsyncBatchSize;
1:     }
commit:8976a6b
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger TRACE = LoggerFactory.getLogger(StompTransportFilter.class.getPackage().getName() + ".StompIO");
/////////////////////////////////////////////////////////////////////////
1:                 TRACE.trace("Received: \n" + command);
/////////////////////////////////////////////////////////////////////////
1:             TRACE.trace("Sending: \n" + command);
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private StompInactivityMonitor monitor;
1:     private StompWireFormat wireFormat;
1:     public StompTransportFilter(Transport next, WireFormat wireFormat, BrokerContext brokerContext) {
1:         this.protocolConverter = new ProtocolConverter(this, brokerContext);
1: 
1:         if (wireFormat instanceof StompWireFormat) {
1:             this.wireFormat = (StompWireFormat) wireFormat;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         if(next instanceof SslTransport) {
0:             X509Certificate[] peerCerts = ((SslTransport)next).getPeerCertificates();
0:             if (trace && peerCerts != null) {
0:             return peerCerts;
1:         }
0:         return null;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public StompInactivityMonitor getInactivityMonitor() {
1:         return monitor;
1:     }
1: 
1:     public void setInactivityMonitor(StompInactivityMonitor monitor) {
1:         this.monitor = monitor;
1:     }
1: 
1:     @Override
1:     public StompWireFormat getWireFormat() {
1:         return this.wireFormat;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:3910056
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.context.ApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:     public StompTransportFilter(Transport next, FrameTranslator translator, ApplicationContext applicationContext) {
0:         this.protocolConverter = new ProtocolConverter(this, translator, applicationContext);
commit:2b5608f
/////////////////////////////////////////////////////////////////////////
1:  * ActiveMQ commands. All of the conversion work is done by delegating to the
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(StompTransportFilter.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.trace("Received: \n" + command);
/////////////////////////////////////////////////////////////////////////
0:             LOG.trace("Sending: \n" + command);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * The StompTransportFilter normally sits on top of a TcpTransport that has been
1:  * configured with the StompWireFormat and is used to convert STOMP commands to
0:  * ActiveMQ commands. All of the coversion work is done by delegating to the
1:  * ProtocolConverter.
1:  * 
0:     static final private Log log = LogFactory.getLog(StompTransportFilter.class);
/////////////////////////////////////////////////////////////////////////
1: 
1:         super(next);
1:     public void oneway(Object o) throws IOException {
0:             final Command command = (Command)o;
0:             protocolConverter.onActiveMQCommad(command);
1:         } catch (JMSException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1:     public void onCommand(Object command) {
1:             if (trace) {
0:                 log.trace("Received: \n" + command);
1:             }
0:             protocolConverter.onStompCommad((StompFrame)command);
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (JMSException e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1:     public void sendToActiveMQ(Command command) {
0:         synchronized (sendToActiveMQMutex) {
0:             transportListener.onCommand(command);
1:         }
1:     }
1:     public void sendToStomp(StompFrame command) throws IOException {
1:         if (trace) {
0:             log.trace("Sending: \n" + command);
1:         }
0:         synchronized (sendToStompMutex) {
0:             next.oneway(command);
1:         }
1:     }
0:     public FrameTranslator getFrameTranslator() {
1:     public boolean isTrace() {
1:         return trace;
1:     }
1:     public void setTrace(boolean trace) {
1:         this.trace = trace;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:05de2b1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0: 	static final private Log log = LogFactory.getLog(StompTransportFilter.class);
/////////////////////////////////////////////////////////////////////////
1:     private boolean trace;
1:     
/////////////////////////////////////////////////////////////////////////
0:     		if( trace ) {
0:     			log.trace("Received: \n"+command);
0:     		}
/////////////////////////////////////////////////////////////////////////
0: 		if( trace ) {
0: 			log.trace("Sending: \n"+command);
0: 		}
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public boolean isTrace() {
0: 		return trace;
0: 	}
1: 
0: 	public void setTrace(boolean trace) {
0: 		this.trace = trace;
0: 	}
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
0: 	public void oneway(Object o) throws IOException {
0:         	final Command command = (Command) o;
0: 	public void onCommand(Object command) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:98b61e4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.stomp;
commit:530884a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         	protocolConverter.onStompCommad((StompFrame) command);
/////////////////////////////////////////////////////////////////////////
0: 	public void sendToStomp(StompFrame command) throws IOException {
commit:dc98d96
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.stomp2;
0: 
1: import java.io.IOException;
0: 
1: import javax.jms.JMSException;
0: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.util.IOExceptionSupport;
0: 
1: /**
0:  * The StompTransportFilter normally sits on top of a TcpTransport
0:  * that has been configured with the StompWireFormat and is used to
0:  * convert STOMP commands to ActiveMQ commands.
1:  * 
0:  * All of the coversion work is done by delegating to the ProtocolConverter. 
1:  *  
1:  * @author <a href="http://hiramchirino.com">chirino</a> 
1:  */
0: public class StompTransportFilter extends TransportFilter {
0: 
0:     ProtocolConverter protocolConverter = new ProtocolConverter();
0:     
0:     private final Object sendToActiveMQMutex = new Object();
0:     private final Object sendToStompMutex = new Object();
0:     
0: 	public StompTransportFilter(Transport next) {
0: 		super(next);
0: 		protocolConverter.setTransportFilter(this);
0: 	}
0: 
0: 	public void start() throws Exception {
0: 		super.start();
0: 	}
0: 	
0: 	public void stop() throws Exception {
0: 		super.stop();
0: 	}
0: 	
0: 	public void oneway(Command command) throws IOException {
0:         try {
0:         	protocolConverter.onActiveMQCommad(command);
0: 		} catch (JMSException e) {
0: 			throw IOExceptionSupport.create(e);
0: 		}
0: 	}
0: 	
0: 	public void onCommand(Command command) {
0:         try {
0:         	protocolConverter.onStompCommad((StompCommand) command);
0: 		} catch (IOException e) {
0: 			onException(e);
0: 		} catch (JMSException e) {
0: 			onException(IOExceptionSupport.create(e));
0: 		}
0: 	}
0: 	
0: 	public void onException(IOException error) {
0: 		protocolConverter.onStompExcepton(error);
0: 		transportListener.onException(error);
0: 	}
0: 
0: 
0: 	public void sendToActiveMQ(Command command) {
0: 		synchronized(sendToActiveMQMutex) {
0: 			transportListener.onCommand(command);
0: 		}
0: 	}
0: 	
0: 	public void sendToStomp(StompCommand command) throws IOException {
0: 		synchronized(sendToStompMutex) {
0: 			next.oneway(command);
0: 		}
0: 	}
0: 
0: 
0: 	
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:33edc99
/////////////////////////////////////////////////////////////////////////
0: 
1:     public String getDefaultHeartBeat() {
1:         return protocolConverter != null ? protocolConverter.getDefaultHeartBeat() : null;
0:     }
0: 
1:     public void setDefaultHeartBeat(String defaultHeartBeat) {
1:         protocolConverter.setDefaultHeartBeat(defaultHeartBeat);
0:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(StompTransportFilter.class);
commit:11705e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerContext;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public StompTransportFilter(Transport next, FrameTranslator translator, BrokerContext brokerContext) {
0:         this.protocolConverter = new ProtocolConverter(this, translator, brokerContext);
commit:ceed011
/////////////////////////////////////////////////////////////////////////
1: public class StompTransportFilter extends TransportFilter implements StompTransport {
commit:690b7bc
/////////////////////////////////////////////////////////////////////////
1:             protocolConverter.onActiveMQCommand(command);
/////////////////////////////////////////////////////////////////////////
0:             protocolConverter.onStompCommand((StompFrame)command);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f866f77
/////////////////////////////////////////////////////////////////////////
0: import java.security.cert.X509Certificate;
0: 
0: import org.apache.activemq.transport.tcp.SslTransport;
/////////////////////////////////////////////////////////////////////////
0:            
/////////////////////////////////////////////////////////////////////////
0:     public X509Certificate[] getPeerCertificates() {
0:     	if(next instanceof SslTransport) {    	
0:     		X509Certificate[] peerCerts = ((SslTransport)next).getPeerCertificates();
0:     		if (trace && peerCerts != null) {
0:                 LOG.debug("Peer Identity has been verified\n");
0:             }
0:     		return peerCerts;
0:     	}
0:     	return null;
0:     }
0:     
commit:5af8118
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TransportListener l = transportListener;
0:         if (l!=null) {
1:             l.onCommand(command);
/////////////////////////////////////////////////////////////////////////
1:         Transport n = next;
0:         if (n!=null) {
1:             n.oneway(command);
author:Brian McCallister
-------------------------------------------------------------------------------
commit:f8485e3
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * All of the coversion work is done by delegating to the ProtocolConverter.
0:  *
0:  * @author <a href="http://hiramchirino.com">chirino</a>
1:     private final ProtocolConverter protocolConverter;
0: 
0: 
0:     private final FrameTranslator frameTranslator;
0: 
0:     public StompTransportFilter(Transport next, FrameTranslator translator) {
0:         this.frameTranslator = translator;
0:         this.protocolConverter = new ProtocolConverter(this, translator);
0:     }
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     public FrameTranslator getFrameTranslator()
0:     {
0:         return frameTranslator;
0:     }
============================================================================