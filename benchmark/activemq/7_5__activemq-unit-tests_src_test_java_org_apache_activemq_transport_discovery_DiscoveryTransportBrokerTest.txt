1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery;
15:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.network.NetworkTestSupport;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: import org.apache.activemq.transport.failover.FailoverTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class DiscoveryTransportBrokerTest extends NetworkTestSupport {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransportBrokerTest.class);
1:d29ca2a: 
1:a2033b3:     String groupName;
1:a2033b3:     
1:d29ca2a:     public void setUp() throws Exception {
1:d29ca2a:         super.setAutoFail(true);
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void testPublisherFailsOver() throws Exception {
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:d29ca2a:         int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:230a86c: 
1:230a86c:         // Start a normal consumer on the local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:230a86c:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.request(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on a remote broker
1:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:230a86c:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.request(consumerInfo2);
1:230a86c: 
1:d29ca2a:         // Start a failover publisher.
1:d29ca2a:         StubConnection connection3 = createFailoverConnection();
1:d29ca2a:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:230a86c:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:d29ca2a:         connection3.send(connectionInfo3);
1:d29ca2a:         connection3.send(sessionInfo3);
1:d29ca2a:         connection3.send(producerInfo3);
1:d29ca2a: 
1:d29ca2a:         // Send the message using the fail over publisher.
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:d29ca2a: 
1:d29ca2a:         // The message will be sent to one of the brokers.
1:230a86c:         FailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);
1:d29ca2a: 
1:d29ca2a:         // See which broker we were connected to.
1:d29ca2a:         StubConnection connectionA;
1:d29ca2a:         StubConnection connectionB;
1:d29ca2a:         TransportConnector serverA;
1:ed0b08b:         if (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {
1:230a86c:             connectionA = connection1;
1:230a86c:             connectionB = connection2;
1:d29ca2a:             serverA = connector;
1:d29ca2a:         } else {
1:230a86c:             connectionA = connection2;
1:230a86c:             connectionB = connection1;
1:d29ca2a:             serverA = remoteConnector;
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNotNull(receiveMessage(connectionA));
1:d29ca2a:         assertNoMessagesLeft(connectionB);
1:230a86c: 
1:d29ca2a:         // Dispose the server so that it fails over to the other server.
1:fc00993:         LOG.info("Disconnecting active server");
1:d29ca2a:         serverA.stop();
1:230a86c: 
1:fc00993:         LOG.info("Sending request that should failover");
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:230a86c: 
1:d29ca2a:         assertNotNull(receiveMessage(connectionB));
1:d29ca2a:         assertNoMessagesLeft(connectionA);
1:230a86c: 
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected String getLocalURI() {
1:d29ca2a:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected String getRemoteURI() {
1:d29ca2a:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected TransportConnector createConnector() throws Exception, IOException, URISyntaxException {
1:d29ca2a:         TransportConnector x = super.createConnector();
1:d458445:         x.setDiscoveryUri(new URI(getDiscoveryUri()));
1:d29ca2a:         return x;
1:d29ca2a:     }
1:d29ca2a: 
1:d458445:     protected String getDiscoveryUri() {
1:a2033b3:     	if ( groupName == null ) {
1:a2033b3:     		groupName = "group-"+System.currentTimeMillis();
1:a2033b3:     	}
1:4a7e0b3:         return "multicast://default?group="+groupName;
1:d458445:     }
1:230a86c: 
1:d29ca2a:     protected TransportConnector createRemoteConnector() throws Exception, IOException, URISyntaxException {
1:d29ca2a:         TransportConnector x = super.createRemoteConnector();
1:d458445:         x.setDiscoveryUri(new URI(getDiscoveryUri()));
1:d29ca2a:         return x;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected StubConnection createFailoverConnection() throws Exception {
1:f38cb58:         URI failoverURI = new URI("discovery:(" + getDiscoveryUri() + ")?startupMaxReconnectAttempts=10&initialReconnectDelay=1000");
1:d29ca2a:         Transport transport = TransportFactory.connect(failoverURI);
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:230a86c:         return connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(DiscoveryTransportBrokerTest.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:f38cb58
/////////////////////////////////////////////////////////////////////////
1:         URI failoverURI = new URI("discovery:(" + getDiscoveryUri() + ")?startupMaxReconnectAttempts=10&initialReconnectDelay=1000");
commit:c9c1f58
/////////////////////////////////////////////////////////////////////////
0:         URI failoverURI = new URI("discovery:(" + getDiscoveryUri() + ")?startupMaxReconnectAttempts=5");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransportBrokerTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:ed0b08b
/////////////////////////////////////////////////////////////////////////
1:         if (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {
commit:4a7e0b3
/////////////////////////////////////////////////////////////////////////
1:         return "multicast://default?group="+groupName;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:a2033b3
/////////////////////////////////////////////////////////////////////////
1:     String groupName;
1:     
/////////////////////////////////////////////////////////////////////////
1:     	if ( groupName == null ) {
1:     		groupName = "group-"+System.currentTimeMillis();
1:     	}
0:         return "multicast://"+groupName;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DiscoveryTransportBrokerTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Disconnecting active server");
1:         LOG.info("Sending request that should failover");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     static final private Log log = LogFactory.getLog(DiscoveryTransportBrokerTest.class);
1:     public void testPublisherFailsOver() throws Exception {
1: 
1:         // Start a normal consumer on the local broker
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
/////////////////////////////////////////////////////////////////////////
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1: 
1:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
/////////////////////////////////////////////////////////////////////////
1:         FailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);
0:         if (connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI())) {
1:             connectionA = connection1;
1:             connectionB = connection2;
1:             connectionA = connection2;
1:             connectionB = connection1;
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     protected StubConnection createFailoverConnection() throws Exception {
1:         return connection;
1: 
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0: 	public void testPublisherFailsOver() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.network.NetworkTestSupport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.failover.FailoverTransport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class DiscoveryTransportBrokerTest extends NetworkTestSupport {
1:     
0: 	static final private Log log = LogFactory.getLog(DiscoveryTransportBrokerTest.class);
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
0: 	public void testPublisherFailsOver() throws Throwable {
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         
0:         // Start a normal consumer on the local broker 
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
0:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);        
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // Start a normal consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
0:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.request(consumerInfo2);
1:         
1:         // Start a failover publisher.
1:         StubConnection connection3 = createFailoverConnection();
1:         ConnectionInfo connectionInfo3 = createConnectionInfo();
0:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);        
0:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);        
1:         connection3.send(connectionInfo3);
1:         connection3.send(sessionInfo3);
1:         connection3.send(producerInfo3);
1: 
1:         // Send the message using the fail over publisher.
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1: 
1:         // The message will be sent to one of the brokers.
0:         FailoverTransport ft = (FailoverTransport) connection3.getTransport().narrow(FailoverTransport.class);
1: 
1:         // See which broker we were connected to.
1:         StubConnection connectionA;
1:         StubConnection connectionB;
1:         TransportConnector serverA;
0:         if( connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI() ) ) {
0:             connectionA=connection1;
0:             connectionB=connection2;
1:             serverA = connector;
1:         } else {
0:             connectionA=connection2;
0:             connectionB=connection1;
1:             serverA = remoteConnector;
1:         }
1:         
1:         assertNotNull(receiveMessage(connectionA));
1:         assertNoMessagesLeft(connectionB);
1:         
1:         // Dispose the server so that it fails over to the other server.
0:         log.info("Disconnecting active server");
1:         serverA.stop();
1:         
0:         log.info("Sending request that should failover");
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:         
1:         assertNotNull(receiveMessage(connectionB));
1:         assertNoMessagesLeft(connectionA);
1:             
1:     }
1:     
1:     protected String getLocalURI() {
1:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:     }
1:     
1:     protected String getRemoteURI() {
1:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:     }
1:     
1:     protected TransportConnector createConnector() throws Exception, IOException, URISyntaxException {
1:         TransportConnector x = super.createConnector();
0:         x.setDiscoveryUri(new URI("multicast://default"));
1:         return x;
1:     }
1:     
1:     protected TransportConnector createRemoteConnector() throws Exception, IOException, URISyntaxException {
1:         TransportConnector x = super.createRemoteConnector();
0:         x.setDiscoveryUri(new URI("multicast://default"));
1:         return x;
1:     }
1:         
0:     protected StubConnection createFailoverConnection() throws Exception {        
0:         URI failoverURI = new URI("discovery:multicast://default");
1:         Transport transport = TransportFactory.connect(failoverURI);
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
0:         return connection;        
1:     }
1:     
1:     public static Test suite() {
1:         return suite(DiscoveryTransportBrokerTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:d458445
/////////////////////////////////////////////////////////////////////////
1:         x.setDiscoveryUri(new URI(getDiscoveryUri()));
0: 
1:     protected String getDiscoveryUri() {
0:         return "multicast://default";
1:     }
1:         x.setDiscoveryUri(new URI(getDiscoveryUri()));
0:         URI failoverURI = new URI("discovery:" + getDiscoveryUri());
============================================================================