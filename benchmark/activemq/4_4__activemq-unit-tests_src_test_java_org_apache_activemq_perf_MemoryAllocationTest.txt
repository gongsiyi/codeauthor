1:6575f2d: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:6575f2d:  */
1:6575f2d: package org.apache.activemq.perf;
4:6575f2d: 
1:6575f2d: import javax.jms.Connection;
1:6575f2d: import javax.jms.ConnectionFactory;
1:6575f2d: import javax.jms.Destination;
1:6575f2d: import javax.jms.JMSException;
1:6575f2d: import javax.jms.Message;
1:6575f2d: import javax.jms.MessageProducer;
1:6575f2d: import javax.jms.Session;
1:6575f2d: import javax.jms.TemporaryQueue;
1:6575f2d: import javax.jms.TemporaryTopic;
1:93dc39b: 
1:6575f2d: import junit.framework.TestCase;
1:93dc39b: 
1:6575f2d: import org.apache.activemq.ActiveMQConnectionFactory;
1:6575f2d: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:6575f2d: /**
1:4743a20:  *
1:6575f2d:  */
1:230a86c: public class MemoryAllocationTest extends TestCase {
1:230a86c: 
1:933eb2f:     protected static final int MESSAGE_COUNT = 2000;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MemoryAllocationTest.class);
1:93dc39b: 
1:6575f2d:     protected BrokerService broker;
1:230a86c:     protected String bindAddress = "vm://localhost";
1:230a86c:     protected int topicCount;
1:93dc39b: 
1:230a86c:     public void testPerformance() throws Exception {
1:230a86c:         ConnectionFactory factory = createConnectionFactory();
1:230a86c:         Connection connection = factory.createConnection();
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:230a86c: 
1:230a86c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:             Destination dest = session.createTemporaryTopic();
1:933eb2f:             session.createConsumer(dest);
1:230a86c:             MessageProducer mp = session.createProducer(dest);
1:230a86c:             Message msg = session.createTextMessage("test" + i);
1:6575f2d:             mp.send(msg);
1:6575f2d:             session.close();
1:230a86c:             releaseDestination(dest);
1:fc00993:             if (i % 500 == 0) {
1:230a86c:                 LOG.info("Iterator " + i);
1:fc00993:             }
1:6575f2d:         }
1:6575f2d:         connection.close();
1:6575f2d:     }
1:6575f2d: 
1:230a86c:     protected Destination getDestination(Session session) throws JMSException {
1:230a86c:         String topicName = getClass().getName() + "." + topicCount++;
1:6575f2d:         return session.createTopic(topicName);
1:6575f2d:     }
1:6575f2d: 
1:230a86c:     protected void releaseDestination(Destination dest) throws JMSException {
1:230a86c:         if (dest instanceof TemporaryTopic) {
1:230a86c:             TemporaryTopic tt = (TemporaryTopic)dest;
1:6575f2d:             tt.delete();
1:230a86c:         } else if (dest instanceof TemporaryQueue) {
1:230a86c:             TemporaryQueue tq = (TemporaryQueue)dest;
1:6575f2d:             tq.delete();
1:6575f2d:         }
1:6575f2d:     }
1:6575f2d: 
1:4743a20:     @Override
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         if (broker == null) {
1:230a86c:             broker = createBroker();
1:6575f2d:         }
1:6575f2d:         super.setUp();
1:6575f2d:     }
1:6575f2d: 
1:4743a20:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:6575f2d:         super.tearDown();
1:230a86c: 
1:230a86c:         if (broker != null) {
1:230a86c:             broker.stop();
1:6575f2d:         }
1:6575f2d:     }
1:6575f2d: 
1:230a86c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:6575f2d:         return cf;
1:6575f2d:     }
1:6575f2d: 
1:230a86c:     protected BrokerService createBroker() throws Exception {
1:230a86c:         BrokerService answer = new BrokerService();
1:6575f2d:         configureBroker(answer);
1:6575f2d:         answer.start();
1:6575f2d:         return answer;
1:6575f2d:     }
1:6575f2d: 
1:230a86c:     protected void configureBroker(BrokerService answer) throws Exception {
1:6575f2d:         answer.setPersistent(false);
1:6575f2d:         answer.addConnector(bindAddress);
1:6575f2d:         answer.setDeleteAllMessagesOnStartup(true);
1:6575f2d:     }
1:6575f2d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MESSAGE_COUNT = 2000;
/////////////////////////////////////////////////////////////////////////
1:             session.createConsumer(dest);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MemoryAllocationTest.class);
/////////////////////////////////////////////////////////////////////////
1:             if (i % 500 == 0) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class MemoryAllocationTest extends TestCase {
0:     protected static final Log LOG = LogFactory.getLog(MemoryAllocationTest.class);
1: 
0:     protected static final int MESSAGE_COUNT = 2000;
1:     protected String bindAddress = "vm://localhost";
1:     protected int topicCount;
1:     public void testPerformance() throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
1:         Connection connection = factory.createConnection();
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination dest = session.createTemporaryTopic();
0:             MessageConsumer mc = session.createConsumer(dest);
1:             MessageProducer mp = session.createProducer(dest);
1:             Message msg = session.createTextMessage("test" + i);
1:             releaseDestination(dest);
0:             if (i % 500 == 0)
1:                 LOG.info("Iterator " + i);
1:     protected Destination getDestination(Session session) throws JMSException {
1:         String topicName = getClass().getName() + "." + topicCount++;
1:     protected void releaseDestination(Destination dest) throws JMSException {
1:         if (dest instanceof TemporaryTopic) {
1:             TemporaryTopic tt = (TemporaryTopic)dest;
1:         } else if (dest instanceof TemporaryQueue) {
1:             TemporaryQueue tq = (TemporaryQueue)dest;
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:     protected void tearDown() throws Exception {
1: 
1:         if (broker != null) {
1:             broker.stop();
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:     protected void configureBroker(BrokerService answer) throws Exception {
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1:     
0:     protected static final Log log = LogFactory.getLog(MemoryAllocationTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (i%500==0)log.info("Iterator "+i);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryAllocationTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:6575f2d
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class MemoryAllocationTest extends TestCase{
0:     protected static final int MESSAGE_COUNT=2000;
1:     protected BrokerService broker;
0:     protected String bindAddress="vm://localhost";
0:     protected int topicCount=0;
1: 
0:     public void testPerformance() throws Exception{
0:         ConnectionFactory factory=createConnectionFactory();
0:         Connection connection=factory.createConnection();
0:         for(int i=0;i<MESSAGE_COUNT;i++){
1:            
0:             Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:             Destination dest=session.createTemporaryTopic();
0:             MessageConsumer mc=session.createConsumer(dest);
0:             MessageProducer mp=session.createProducer(dest);
0:             Message msg=session.createTextMessage("test"+i);
1:             mp.send(msg);
1:             session.close();
0:            releaseDestination(dest);
0:             if (i%500==0)System.out.println("Iterator "+i);
1:         }
1:         connection.close();
1:     }
1: 
0:     protected Destination getDestination(Session session) throws JMSException{
0:         String topicName=getClass().getName()+"."+topicCount++;
1:         return session.createTopic(topicName);
1:     }
1: 
0:     protected void releaseDestination(Destination dest) throws JMSException{
0:         if(dest instanceof TemporaryTopic){
0:             TemporaryTopic tt=(TemporaryTopic) dest;
1:             tt.delete();
0:         }else if(dest instanceof TemporaryQueue){
0:             TemporaryQueue tq=(TemporaryQueue) dest;
1:             tq.delete();
1:         }
1:     }
1: 
0:     protected void setUp() throws Exception{
0:         if(broker==null){
0:             broker=createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
1:         
0:         if(broker!=null){
0:           broker.stop();
1:         }
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory cf=new ActiveMQConnectionFactory(bindAddress);
1:         return cf;
1:     }
1: 
0:     protected BrokerService createBroker() throws Exception{
0:         BrokerService answer=new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
0:     protected void configureBroker(BrokerService answer) throws Exception{
1:         answer.setPersistent(false);
1:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================