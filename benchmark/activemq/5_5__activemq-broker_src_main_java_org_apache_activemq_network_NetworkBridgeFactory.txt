1:f812e34: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:ec6e6a5:  */
1:ae73f86: package org.apache.activemq.network;
3:ae73f86: 
1:8012f28: import java.net.URI;
1:8012f28: import java.util.HashMap;
1:a8a032a: import java.util.LinkedHashSet;
1:a8a032a: import java.util.ServiceLoader;
1:a8a032a: import java.util.Set;
1:a8a032a: 
1:ae73f86: import org.apache.activemq.transport.Transport;
1:8012f28: import org.apache.activemq.transport.TransportFactory;
1:8012f28: import org.apache.activemq.util.URISupport;
1:933eb2f: 
1:f812e34: /**
1:ae73f86:  * Factory for network bridges
1:b0c2a40:  * 
1:f812e34:  * 
1:f812e34:  */
1:a8a032a: public final class NetworkBridgeFactory implements BridgeFactory {
1:a8a032a: 
1:a8a032a:     public final static BridgeFactory INSTANCE = new NetworkBridgeFactory();
1:ae73f86: 
1:933eb2f:     private NetworkBridgeFactory() {
1:a8a032a: 
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     @Override
1:a8a032a:     public DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, NetworkBridgeListener listener) {
1:a8a032a:         if (configuration.isConduitSubscriptions()) {
1:a8a032a:             // dynamicOnly determines whether durables are auto bridged
1:a8a032a:             return attachListener(new DurableConduitBridge(configuration, localTransport, remoteTransport), listener);
1:a8a032a:         }
1:a8a032a:         return attachListener(new DemandForwardingBridge(configuration, localTransport, remoteTransport), listener);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     private DemandForwardingBridge attachListener(DemandForwardingBridge bridge, NetworkBridgeListener listener) {
1:a8a032a:         if (listener != null) {
1:a8a032a:             bridge.setNetworkBridgeListener(listener);
1:a8a032a:         }
1:a8a032a:         return bridge;
1:d84a586:     }
1:d84a586: 
2:ec6e6a5:     /**
1:a8a032a:      * Create a network bridge
1:f812e34:      * 
1:f812e34:      * @param configuration
2:f812e34:      * @param localTransport
2:f812e34:      * @param remoteTransport
1:f812e34:      * @param listener
2:f812e34:      * @return the NetworkBridge
1:f812e34:      */
1:a8a032a:     @Deprecated
1:f812e34:     public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration configuration,
1:f812e34:                                                       Transport localTransport, Transport remoteTransport,
1:f812e34:                                                       final NetworkBridgeListener listener) {
1:a8a032a:         return INSTANCE.createNetworkBridge(configuration, localTransport, remoteTransport, listener);
1:933eb2f:     }
1:8012f28: 
1:4ef1fc7:     public static Transport createLocalTransport(NetworkBridgeConfiguration configuration, URI uri) throws Exception {
1:4ef1fc7:         // one end of the localbroker<->bridge transport needs to be async to allow concurrent forwards and acks
1:4ef1fc7:         return createLocalTransport(uri, !configuration.isDispatchAsync());
4:f812e34:     }
1:ae73f86: 
1:d84a586:     public static Transport createLocalAsyncTransport(URI uri) throws Exception {
1:d84a586:         return createLocalTransport(uri, true);
1:d84a586:     }
1:d84a586: 
1:d84a586:     private static Transport createLocalTransport(URI uri, boolean async) throws Exception {
1:8012f28:         HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
1:d84a586:         map.put("async", String.valueOf(async));
1:981c0f2:         map.put("create", "false"); // we don't want a vm connect during shutdown to trigger a broker create
1:8012f28:         uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
1:8012f28:         return TransportFactory.connect(uri);
1:8012f28:     }
1:a8a032a: 
1:f812e34: }
============================================================================
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashSet;
1: import java.util.ServiceLoader;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1: public final class NetworkBridgeFactory implements BridgeFactory {
1: 
1:     public final static BridgeFactory INSTANCE = new NetworkBridgeFactory();
1: 
1:     }
1: 
1:     @Override
1:     public DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, NetworkBridgeListener listener) {
1:         if (configuration.isConduitSubscriptions()) {
1:             // dynamicOnly determines whether durables are auto bridged
1:             return attachListener(new DurableConduitBridge(configuration, localTransport, remoteTransport), listener);
1:         }
1:         return attachListener(new DemandForwardingBridge(configuration, localTransport, remoteTransport), listener);
1:     }
1: 
1:     private DemandForwardingBridge attachListener(DemandForwardingBridge bridge, NetworkBridgeListener listener) {
1:         if (listener != null) {
1:             bridge.setNetworkBridgeListener(listener);
1:         }
1:         return bridge;
1:      * Create a network bridge
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:         return INSTANCE.createNetworkBridge(configuration, localTransport, remoteTransport, listener);
/////////////////////////////////////////////////////////////////////////
1: 
author:gtully
-------------------------------------------------------------------------------
commit:4ef1fc7
/////////////////////////////////////////////////////////////////////////
1:     public static Transport createLocalTransport(NetworkBridgeConfiguration configuration, URI uri) throws Exception {
1:         // one end of the localbroker<->bridge transport needs to be async to allow concurrent forwards and acks
1:         return createLocalTransport(uri, !configuration.isDispatchAsync());
commit:d84a586
/////////////////////////////////////////////////////////////////////////
0:     public static Transport createLocalTransport(URI uri) throws Exception {
0:         return createLocalTransport(uri, false);
1:     }
1: 
1:     public static Transport createLocalAsyncTransport(URI uri) throws Exception {
1:         return createLocalTransport(uri, true);
1:     }
1: 
1:     private static Transport createLocalTransport(URI uri, boolean async) throws Exception {
1:         map.put("async", String.valueOf(async));
commit:3100909
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:981c0f2
/////////////////////////////////////////////////////////////////////////
1:         map.put("create", "false"); // we don't want a vm connect during shutdown to trigger a broker create
author:Gary Tully
-------------------------------------------------------------------------------
commit:f08a178
/////////////////////////////////////////////////////////////////////////
0:         map.put("async", "true");
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.HashMap;
0: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public static Transport createLocalTransport(Broker broker) throws Exception {
0:         URI uri = broker.getVmConnectorURI();
1:         HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
0:         map.put("network", "true");
0:         map.put("async", "false");
1:         uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
1:         return TransportFactory.connect(uri);
1:     }
commit:05f82a9
/////////////////////////////////////////////////////////////////////////
0:             // dynamicOnly determines whether durables are auto bridged
0:             result = new DurableConduitBridge(configuration, localTransport, remoteTransport);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: public final class NetworkBridgeFactory {
1:     private NetworkBridgeFactory() {
1:     }
1:     
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Create a network bridge
1:      * 
0:      * @param config
1:      * @param localTransport
1:      * @param remoteTransport
1:      * @return the NetworkBridge
1:      */
0:     public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config,
0:                                                       Transport localTransport, Transport remoteTransport) {
0:         return createBridge(config, localTransport, remoteTransport, null);
1:     }
1:     /**
0:      * create a network bridge
1:      * 
1:      * @param configuration
1:      * @param localTransport
1:      * @param remoteTransport
1:      * @param listener
1:      * @return the NetworkBridge
1:      */
1:     public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration configuration,
1:                                                       Transport localTransport, Transport remoteTransport,
1:                                                       final NetworkBridgeListener listener) {
0:         DemandForwardingBridge result = null;
0:         if (configuration.isConduitSubscriptions()) {
0:             if (configuration.isDynamicOnly()) {
0:                 result = new ConduitBridge(configuration, localTransport, remoteTransport);
0:             } else {
0:                 result = new DurableConduitBridge(configuration, localTransport, remoteTransport);
1:             }
0:         } else {
0:             result = new DemandForwardingBridge(configuration, localTransport, remoteTransport);
1:         }
0:         if (listener != null) {
0:             result.setNetworkBridgeListener(listener);
1:         }
0:         return result;
1:     }
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
0: public class NetworkBridgeFactory {
1: 	/**
0: 	 * Create a network bridge
0: 	 * 
0: 	 * @param config
0: 	 * @param localTransport
0: 	 * @param remoteTransport
0: 	 * @return the NetworkBridge
1: 	 */
0: 	public static DemandForwardingBridge createBridge(
0: 			NetworkBridgeConfiguration config, Transport localTransport,
0: 			Transport remoteTransport) {
0: 		return createBridge(config, localTransport, remoteTransport, null);
0: 	}
1: 	/**
0: 	 * create a network bridge
0: 	 * 
0: 	 * @param configuration
0: 	 * @param localTransport
0: 	 * @param remoteTransport
0: 	 * @param listener
0: 	 * @return the NetworkBridge
1: 	 */
0: 	public static DemandForwardingBridge createBridge(
0: 			NetworkBridgeConfiguration configuration, Transport localTransport,
0: 			Transport remoteTransport, final NetworkBridgeListener listener) {
0: 		DemandForwardingBridge result = null;
0: 		if (configuration.isConduitSubscriptions()) {
0: 			if (configuration.isDynamicOnly()) {
0: 				result = new ConduitBridge(configuration, localTransport,
0: 						remoteTransport);
0: 			} else {
0: 				result = new DurableConduitBridge(configuration,
0: 						localTransport, remoteTransport);
0: 			}
0: 		} else {
0: 			result = new DemandForwardingBridge(configuration, localTransport,
0: 					remoteTransport);
0: 		}
0: 		if (listener != null) {
0: 			result.setNetworkBridgeListener(listener);
0: 		}
0: 		return result;
0: 	}
author:Robert Davies
-------------------------------------------------------------------------------
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0:  */
1: 
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.transport.Transport;
1: 
0: /**
1:  * Factory for network bridges
0:  * 
0:  * @version $Revision: 1.1 $
0:  */
0: public class NetworkBridgeFactory{
1: 
0:     /**
0:      * Create a network bridge
0:      * 
0:      * @param config
0:      * @param localTransport
0:      * @param remoteTransport
0:      * @return the NetworkBridge
0:      */
0:     public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config,Transport localTransport,
0:             Transport remoteTransport){
0:         return createBridge(config,localTransport,remoteTransport,null);
0:     }
1: 
0:     /**
0:      * create a network bridge
0:      * 
0:      * @param configuration
0:      * @param localTransport
0:      * @param remoteTransport
0:      * @param listener
0:      * @return the NetworkBridge
0:      */
0:     public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration configuration,Transport localTransport,
0:             Transport remoteTransport,NetworkBridgeFailedListener listener){
0:         DemandForwardingBridge result=null;
0:         if(configuration.isConduitSubscriptions()){
0:             if(configuration.isDynamicOnly()){
0:                 result=new ConduitBridge(configuration,localTransport,remoteTransport);
0:             }else{
0:                 result=new DurableConduitBridge(configuration,localTransport,remoteTransport);
0:             }
0:         }else{
0:             result=new DemandForwardingBridge(configuration,localTransport,remoteTransport);
0:         }
0:         if(listener!=null){
0:             result.setNetworkBridgeFailedListener(listener);
0:         }
0:         return result;
0:     }
0: }
============================================================================