1:a6c51a4: /**
1:a6c51a4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a6c51a4:  * contributor license agreements.  See the NOTICE file distributed with
1:a6c51a4:  * this work for additional information regarding copyright ownership.
1:a6c51a4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a6c51a4:  * (the "License"); you may not use this file except in compliance with
1:a6c51a4:  * the License.  You may obtain a copy of the License at
1:a6c51a4:  *
1:a6c51a4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a6c51a4:  *
1:a6c51a4:  * Unless required by applicable law or agreed to in writing, software
1:a6c51a4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a6c51a4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a6c51a4:  * See the License for the specific language governing permissions and
1:a6c51a4:  * limitations under the License.
1:a6c51a4:  */
1:a6c51a4: package org.apache.activemq.bugs;
3:a6c51a4: 
1:a6c51a4: import javax.jms.Connection;
1:a6c51a4: import javax.jms.MessageProducer;
1:a6c51a4: import javax.jms.Session;
1:a6c51a4: import org.apache.activemq.ActiveMQConnectionFactory;
1:a6c51a4: import org.apache.activemq.broker.BrokerService;
1:a6c51a4: import org.apache.activemq.command.ActiveMQQueue;
1:a6c51a4: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:a6c51a4: import org.apache.activemq.store.kahadb.KahaDBStore;
1:a6c51a4: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:a6c51a4: import org.junit.After;
1:a6c51a4: import org.junit.Test;
1:1595378: 
1:1595378: 
1:a6c51a4: import static org.junit.Assert.assertNotNull;
1:a6c51a4: import static org.junit.Assert.assertNull;
1:a6c51a4: 
1:a6c51a4: public class AMQ2736Test {
1:a6c51a4:     BrokerService broker;
1:a6c51a4: 
1:a6c51a4:     @Test
1:a6c51a4:     public void testRollbackOnRecover() throws Exception {
1:a6c51a4:         broker = createAndStartBroker(true);
1:a6c51a4:         DefaultIOExceptionHandler ignoreAllExceptionsIOExHandler = new DefaultIOExceptionHandler();
1:a6c51a4:         ignoreAllExceptionsIOExHandler.setIgnoreAllErrors(true);
1:a6c51a4:         broker.setIoExceptionHandler(ignoreAllExceptionsIOExHandler);
1:a6c51a4: 
1:a6c51a4:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:a6c51a4:         f.setAlwaysSyncSend(true);
1:a6c51a4:         Connection c = f.createConnection();
1:a6c51a4:         c.start();
1:a6c51a4:         Session s = c.createSession(true, Session.SESSION_TRANSACTED);
1:a6c51a4:         MessageProducer p = s.createProducer(new ActiveMQQueue("Tx"));
1:a6c51a4:         p.send(s.createTextMessage("aa"));
1:a6c51a4: 
1:a6c51a4:         // kill journal without commit
1:a6c51a4:         KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:a6c51a4:         KahaDBStore store = pa.getStore();
1:a6c51a4: 
1:0dcdab7:         assertNotNull("last tx location is present " + store.getInProgressTxLocationRange()[1]);
1:a6c51a4: 
1:a6c51a4:         // test hack, close the journal to ensure no further journal updates when broker stops
1:a6c51a4:         // mimic kill -9 in terms of no normal shutdown sequence
1:1595378:         store.getJournal().close();
1:a6c51a4:         try {
1:a6c51a4:             store.close();
1:a6c51a4:         } catch (Exception expectedLotsAsJournalBorked) {
1:a6c51a4:         }
1:a6c51a4: 
1:a6c51a4:         broker.stop();
1:a6c51a4:         broker.waitUntilStopped();
1:a6c51a4: 
1:a6c51a4:         // restart with recovery
1:a6c51a4:         broker = createAndStartBroker(false);
1:a6c51a4: 
1:a6c51a4:         pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:a6c51a4:         store = pa.getStore();
1:a6c51a4: 
1:a6c51a4:         // inflight non xa tx should be rolledback on recovery
1:0dcdab7:         assertNull("in progress tx location is present ", store.getInProgressTxLocationRange()[0]);
1:a6c51a4: 
1:a6c51a4:     }
1:a6c51a4: 
1:a6c51a4:     @After
1:a6c51a4:     public void stopBroker() throws Exception {
1:a6c51a4:         if (broker != null) {
1:a6c51a4:             broker.stop();
1:a6c51a4:         }
1:a6c51a4:     }
1:a6c51a4: 
1:a6c51a4:     private BrokerService createAndStartBroker(boolean deleteAll) throws Exception {
1:a6c51a4:         BrokerService broker = new BrokerService();
1:a6c51a4:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:a6c51a4:         broker.setUseJmx(false);
1:a6c51a4:         broker.getManagementContext().setCreateConnector(false);
1:a6c51a4:         broker.start();
1:a6c51a4:         return broker;
1:a6c51a4:     }
1:a6c51a4: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:0dcdab7
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("last tx location is present " + store.getInProgressTxLocationRange()[1]);
/////////////////////////////////////////////////////////////////////////
1:         assertNull("in progress tx location is present ", store.getInProgressTxLocationRange()[0]);
commit:2030097
/////////////////////////////////////////////////////////////////////////
commit:1595378
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         store.getJournal().close();
commit:a6c51a4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: public class AMQ2736Test {
1:     BrokerService broker;
1: 
1:     @Test
1:     public void testRollbackOnRecover() throws Exception {
1:         broker = createAndStartBroker(true);
1:         DefaultIOExceptionHandler ignoreAllExceptionsIOExHandler = new DefaultIOExceptionHandler();
1:         ignoreAllExceptionsIOExHandler.setIgnoreAllErrors(true);
1:         broker.setIoExceptionHandler(ignoreAllExceptionsIOExHandler);
1: 
1:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost?async=false");
1:         f.setAlwaysSyncSend(true);
1:         Connection c = f.createConnection();
1:         c.start();
1:         Session s = c.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer p = s.createProducer(new ActiveMQQueue("Tx"));
1:         p.send(s.createTextMessage("aa"));
1: 
1:         // kill journal without commit
1:         KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         KahaDBStore store = pa.getStore();
1: 
0:         assertNotNull("last tx location is present " + store.getFirstInProgressTxLocation());
1: 
1:         // test hack, close the journal to ensure no further journal updates when broker stops
1:         // mimic kill -9 in terms of no normal shutdown sequence
0:         store.getJournal().close();
1:         try {
1:             store.close();
1:         } catch (Exception expectedLotsAsJournalBorked) {
1:         }
0:         store.getLockFile().unlock();
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         // restart with recovery
1:         broker = createAndStartBroker(false);
1: 
1:         pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         store = pa.getStore();
1: 
1:         // inflight non xa tx should be rolledback on recovery
0:         assertNull("in progress tx location is present ", store.getFirstInProgressTxLocation());
1: 
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     private BrokerService createAndStartBroker(boolean deleteAll) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:         broker.setUseJmx(false);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.start();
1:         return broker;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:8e61f51
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         store.getJournalManager().close();
============================================================================