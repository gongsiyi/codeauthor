1:1421317: /**
1:1421317:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1421317:  * contributor license agreements.  See the NOTICE file distributed with
1:1421317:  * this work for additional information regarding copyright ownership.
1:1421317:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1421317:  * (the "License"); you may not use this file except in compliance with
1:1421317:  * the License.  You may obtain a copy of the License at
1:1421317:  *
1:1421317:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1421317:  *
1:1421317:  * Unless required by applicable law or agreed to in writing, software
1:1421317:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1421317:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1421317:  * See the License for the specific language governing permissions and
1:1421317:  * limitations under the License.
1:bec711c:  */
1:1421317: package org.apache.activemq.broker;
1:bec711c: 
1:e0e14e0: import org.apache.activemq.ActiveMQConnection;
1:e0e14e0: import org.apache.activemq.ActiveMQConnectionFactory;
1:e0e14e0: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:e0e14e0: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e0e14e0: import org.junit.Ignore;
1:e0e14e0: import org.junit.Test;
1:e0e14e0: import org.junit.runner.RunWith;
1:e0e14e0: import org.junit.runners.BlockJUnit4ClassRunner;
1:e0e14e0: import org.slf4j.Logger;
1:e0e14e0: import org.slf4j.LoggerFactory;
1:e0e14e0: 
1:e0e14e0: import javax.jms.ConnectionFactory;
1:e0e14e0: import javax.jms.ExceptionListener;
1:e0e14e0: import javax.jms.JMSException;
1:1421317: import java.net.URI;
1:1421317: import java.util.ArrayList;
1:444412f: import java.util.Collections;
1:63baaf0: import java.util.HashMap;
1:1421317: import java.util.List;
1:63baaf0: import java.util.Map;
1:63baaf0: import java.util.concurrent.ExecutorService;
1:63baaf0: import java.util.concurrent.Executors;
1:63baaf0: import java.util.concurrent.TimeUnit;
1:d2c901f: import java.util.concurrent.atomic.AtomicInteger;
1:bec711c: 
1:e0e14e0: import static org.junit.Assert.assertNotNull;
1:e0e14e0: import static org.junit.Assert.fail;
1:63baaf0: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:d2c901f: public class NioQueueSubscriptionTest extends QueueSubscriptionTest {
1:63baaf0: 
1:8bf987b:     protected static final Logger LOG = LoggerFactory.getLogger(NioQueueSubscriptionTest.class);
1:d2c901f: 
1:d2c901f:     private final Map<Thread, Throwable> exceptions = Collections.synchronizedMap(new HashMap<Thread, Throwable>());
1:d2c901f: 
2:1421317:     @Override
1:1421317:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:63baaf0:         return new ActiveMQConnectionFactory("tcp://localhost:62621?trace=false");
1:bec711c:     }
1:bec711c: 
1:d2c901f: 
1:d2c901f:     @Override
1:1421317:     protected BrokerService createBroker() throws Exception {
1:d2c901f:         BrokerService answer = BrokerFactory.createBroker(new URI(
1:d2c901f:             "broker://nio://localhost:62621?useQueueForAccept=false&persistent=false&wiewformat.maxInactivityDuration=0"));
1:63baaf0:         answer.getManagementContext().setCreateConnector(false);
1:63baaf0:         answer.setUseJmx(false);
1:63baaf0:         answer.setDeleteAllMessagesOnStartup(true);
1:1421317:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:1421317:         final PolicyEntry entry = new PolicyEntry();
1:1421317:         entry.setQueue(">");
1:1421317:         entry.setOptimizedDispatch(true);
1:1421317:         policyEntries.add(entry);
1:d2c901f: 
1:1421317:         final PolicyMap policyMap = new PolicyMap();
1:1421317:         policyMap.setPolicyEntries(policyEntries);
1:1421317:         answer.setDestinationPolicy(policyMap);
1:1421317:         return answer;
1:63baaf0:     }
1:bec711c: 
1:d2c901f: 
1:bec711c:     @Ignore("See AMQ-4286")
1:bec711c:     @Test(timeout = 60 * 1000)
1:63baaf0:     public void testLotsOfConcurrentConnections() throws Exception {
1:d2c901f:         ExecutorService executor = Executors.newCachedThreadPool();
1:63baaf0:         final ConnectionFactory factory = createConnectionFactory();
1:63baaf0:         int connectionCount = 400;
1:d2c901f:         final AtomicInteger threadId = new AtomicInteger(0);
1:d2c901f:         for (int i = 0; i < connectionCount; i++) {
1:63baaf0:             executor.execute(new Runnable() {
1:d2c901f:                 @Override
1:63baaf0:                 public void run() {
1:d2c901f:                     final int innerId = threadId.incrementAndGet();
1:63baaf0:                     try {
1:d2c901f:                         ExceptionListener listener = new NioQueueSubscriptionTestListener(innerId, exceptions, LOG);
1:63baaf0:                         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:63baaf0:                         connection.setExceptionListener(listener);
1:63baaf0:                         connection.start();
1:63baaf0:                         assertNotNull(connection.getBrokerName());
1:63baaf0:                         connections.add(connection);
1:63baaf0:                     } catch (Exception e) {
1:d2c901f:                         LOG.error(">>>> Exception in run() on thread " + innerId, e);
1:63baaf0:                         exceptions.put(Thread.currentThread(), e);
1:63baaf0:                     }
1:63baaf0:                 }
1:63baaf0:             });
1:63baaf0:         }
1:d2c901f: 
1:63baaf0:         executor.shutdown();
1:63baaf0:         executor.awaitTermination(30, TimeUnit.SECONDS);
1:63baaf0: 
1:63baaf0:         if (!exceptions.isEmpty()) {
1:d2c901f:             LOG.error(">>>> " + exceptions.size() + " exceptions like", exceptions.values().iterator().next());
1:d2c901f:             fail("unexpected exceptions in worker threads: " + exceptions.values().iterator().next());
1:63baaf0:         }
1:d2c901f:         LOG.info("created " + connectionCount + " connections");
1:d2c901f:     }
1:d2c901f: }
1:d2c901f: 
1:d2c901f: class NioQueueSubscriptionTestListener implements ExceptionListener {
1:d2c901f:     private int id = 0;
1:d2c901f:     protected Logger LOG;
1:d2c901f:     private final Map<Thread, Throwable> exceptions;
1:d2c901f: 
1:d2c901f:     public NioQueueSubscriptionTestListener(int id, Map<Thread, Throwable> exceptions, Logger log) {
1:d2c901f:         this.id = id;
1:d2c901f:         this.exceptions = exceptions;
1:d2c901f:         this.LOG = log;
1:63baaf0:     }
1:63baaf0: 
1:d2c901f:     @Override
1:63baaf0:     public void onException(JMSException exception) {
1:d2c901f:         LOG.error(">>>> Exception in onException() on thread " + id, exception);
1:63baaf0:         exceptions.put(Thread.currentThread(), exception);
1:63baaf0:     }
3:1421317: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:e0e14e0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Ignore;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
0: import static org.junit.Assert.*;
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
0:     /*
0:     @Before
0:     public void setUp() throws Exception {
0:     @After
0:     public void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1:     */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Ignore("See AMQ-4286")
1:     @Test(timeout = 60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d2c901f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: public class NioQueueSubscriptionTest extends QueueSubscriptionTest {
1: 
1:     private final Map<Thread, Throwable> exceptions = Collections.synchronizedMap(new HashMap<Thread, Throwable>());
1: 
1: 
1:     @Override
0:         // setMaxTestTime(20*60*1000);
1: 
1:         BrokerService answer = BrokerFactory.createBroker(new URI(
1:             "broker://nio://localhost:62621?useQueueForAccept=false&persistent=false&wiewformat.maxInactivityDuration=0"));
/////////////////////////////////////////////////////////////////////////
1: 
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         final AtomicInteger threadId = new AtomicInteger(0);
1:         for (int i = 0; i < connectionCount; i++) {
1:                 @Override
1:                     final int innerId = threadId.incrementAndGet();
1:                         ExceptionListener listener = new NioQueueSubscriptionTestListener(innerId, exceptions, LOG);
1:                         LOG.error(">>>> Exception in run() on thread " + innerId, e);
1: 
1:             LOG.error(">>>> " + exceptions.size() + " exceptions like", exceptions.values().iterator().next());
1:             fail("unexpected exceptions in worker threads: " + exceptions.values().iterator().next());
1:         LOG.info("created " + connectionCount + " connections");
1:     }
1: }
1: 
1: class NioQueueSubscriptionTestListener implements ExceptionListener {
1:     private int id = 0;
1:     protected Logger LOG;
1:     private final Map<Thread, Throwable> exceptions;
1: 
1:     public NioQueueSubscriptionTestListener(int id, Map<Thread, Throwable> exceptions, Logger log) {
1:         this.id = id;
1:         this.exceptions = exceptions;
1:         this.LOG = log;
1:     @Override
1:         LOG.error(">>>> Exception in onException() on thread " + id, exception);
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(NioQueueSubscriptionTest.class);
commit:444412f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:63baaf0
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
0: import javax.jms.ExceptionListener;
0: import javax.jms.JMSException;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.Collections;
0: @SuppressWarnings("unchecked")
0: public class NioQueueSubscriptionTest extends QueueSubscriptionTest implements ExceptionListener {
1:     
0:     protected static final Log LOG = LogFactory.getLog(NioQueueSubscriptionTest.class);
1:     
0:     private Map<Thread, Throwable> exceptions = Collections.synchronizedMap(new HashMap<Thread, Throwable>());
1:         return new ActiveMQConnectionFactory("tcp://localhost:62621?trace=false");
1:     }
1:     
0:     protected void setUp() throws Exception {
0:         //setMaxTestTime(20*60*1000);
0:         super.setUp();
0:         BrokerService answer = BrokerFactory.createBroker(new URI("broker://nio://localhost:62621?useQueueForAccept=false&persistent=false&wiewformat.maxInactivityDuration=0"));
1:         answer.getManagementContext().setCreateConnector(false);
1:         answer.setUseJmx(false);
1:         answer.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testLotsOfConcurrentConnections() throws Exception {
0:         ExecutorService executor = Executors.newCachedThreadPool(); 
1:         final ConnectionFactory factory = createConnectionFactory();
0:         final ExceptionListener listener = this;
1:         int connectionCount = 400;
0:         for (int i=0;i<connectionCount ;i++) {
1:             executor.execute(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:                         connection.setExceptionListener(listener);
1:                         connection.start();
1:                         assertNotNull(connection.getBrokerName());
1:                         connections.add(connection);
1:                     } catch (Exception e) {
1:                         exceptions.put(Thread.currentThread(), e);
1:                     }
1:                 }
1:             });
1:         }
0:         
1:         executor.shutdown();
1:         executor.awaitTermination(30, TimeUnit.SECONDS);
0: 
1:         if (!exceptions.isEmpty()) {
0:           LOG.error("" + exceptions.size() + " exceptions like", exceptions.values().iterator().next());
0:           fail("unexpected exceptions in worker threads: " + exceptions.values().iterator().next());
1:         }
0:         LOG.info("created " + connectionCount + " connecitons");
1:     }
0: 
1:     public void onException(JMSException exception) {
0:         LOG.error("Exception on conneciton", exception);
1:         exceptions.put(Thread.currentThread(), exception);
1:     }
commit:1421317
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.broker;
0: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
0: 
0: import javax.jms.ConnectionFactory;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: 
0: 
0: public class NioQueueSubscriptionTest extends QueueSubscriptionTest {
0:     
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory("tcp://localhost:62621");
1:     }
0:     
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
0:         BrokerService answer = BrokerFactory.createBroker(new URI("broker://nio://localhost:62621?persistent=false&useJmx=true"));
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setQueue(">");
1:         entry.setOptimizedDispatch(true);
1:         policyEntries.add(entry);
0: 
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         answer.setDestinationPolicy(policyMap);
1:         return answer;
1:     }
1: }
============================================================================