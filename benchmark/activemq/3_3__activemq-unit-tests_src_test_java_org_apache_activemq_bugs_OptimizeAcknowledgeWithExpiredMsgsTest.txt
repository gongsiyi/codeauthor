1:0147739: /**
1:0147739:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0147739:  * contributor license agreements.  See the NOTICE file distributed with
1:0147739:  * this work for additional information regarding copyright ownership.
1:0147739:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0147739:  * (the "License"); you may not use this file except in compliance with
1:0147739:  * the License.  You may obtain a copy of the License at
1:0147739:  *
1:0147739:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0147739:  *
1:0147739:  * Unless required by applicable law or agreed to in writing, software
1:0147739:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0147739:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0147739:  * See the License for the specific language governing permissions and
1:0147739:  * limitations under the License.
1:0147739:  */
1:39e20d0: package org.apache.activemq.bugs;
36:39e20d0: 
1:39e20d0: import static org.junit.Assert.assertNotNull;
1:39e20d0: import static org.junit.Assert.assertTrue;
1:39e20d0: 
1:39e20d0: import java.util.concurrent.atomic.AtomicInteger;
1:39e20d0: 
1:39e20d0: import javax.jms.Connection;
1:39e20d0: import javax.jms.DeliveryMode;
1:39e20d0: import javax.jms.Destination;
1:39e20d0: import javax.jms.ExceptionListener;
1:39e20d0: import javax.jms.JMSException;
1:39e20d0: import javax.jms.Message;
1:39e20d0: import javax.jms.MessageConsumer;
1:39e20d0: import javax.jms.MessageListener;
1:39e20d0: import javax.jms.MessageProducer;
1:39e20d0: import javax.jms.Session;
1:39e20d0: import javax.jms.TextMessage;
1:39e20d0: 
1:39e20d0: import org.apache.activemq.ActiveMQConnectionFactory;
1:39e20d0: import org.apache.activemq.broker.BrokerService;
1:39e20d0: import org.apache.activemq.util.Wait;
1:39e20d0: import org.junit.After;
1:39e20d0: import org.junit.Before;
1:39e20d0: import org.junit.Test;
1:39e20d0: import org.slf4j.Logger;
1:39e20d0: import org.slf4j.LoggerFactory;
1:39e20d0: 
4:39e20d0: /**
1:39e20d0:  * Test for AMQ-3965.
1:6038303:  * A consumer may be stalled in case it uses optimizeAcknowledge and receives
1:6038303:  * a number of messages that expire before being dispatched to application code.
1:6038303:  * See for more details.
1:6038303:  *
2:39e20d0:  */
1:39e20d0: public class OptimizeAcknowledgeWithExpiredMsgsTest {
1:6038303: 
1:39e20d0:     private final static Logger LOG = LoggerFactory.getLogger(OptimizeAcknowledgeWithExpiredMsgsTest.class);
1:39e20d0: 
1:6038303:     private BrokerService broker = null;
1:39e20d0: 
1:6038303:     private String connectionUri;
1:6038303: 
1:6038303:     /**
1:6038303:      * Creates a broker instance but does not start it.
1:6038303:      *
1:39e20d0:      * @param brokerUri - transport uri of broker
1:39e20d0:      * @param brokerName - name for the broker
1:39e20d0:      * @return a BrokerService instance with transport uri and broker name set
1:39e20d0:      * @throws Exception
1:39e20d0:      */
1:6038303:     protected BrokerService createBroker() throws Exception {
1:6038303:         BrokerService broker = new BrokerService();
1:6038303:         broker.setPersistent(false);
1:6038303:         broker.setDeleteAllMessagesOnStartup(true);
1:39e20d0:         broker.setUseJmx(false);
1:6038303:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:39e20d0:         return broker;
10:39e20d0:     }
1:6038303: 
1:39e20d0:     @Before
1:39e20d0:     public void setUp() throws Exception {
1:6038303:         broker = createBroker();
1:39e20d0:         broker.start();
1:6038303:         broker.waitUntilStarted();
1:39e20d0:     }
1:6038303: 
1:39e20d0:     @After
1:6038303:     public void tearDown() throws Exception {
1:6038303:         if (broker != null) {
1:6038303:             broker.stop();
1:6038303:             broker.waitUntilStopped();
1:6038303:             broker = null;
1:6038303:         }
1:39e20d0:     }
1:39e20d0: 
1:39e20d0:     /**
1:39e20d0:      * Tests for AMQ-3965
1:39e20d0:      * Creates connection into broker using optimzeAcknowledge and prefetch=100
1:39e20d0:      * Creates producer and consumer. Producer sends 45 msgs that will expire
1:39e20d0:      * at consumer (but before being dispatched to app code).
1:39e20d0:      * Producer then sends 60 msgs without expiry.
1:6038303:      *
1:39e20d0:      * Consumer receives msgs using a MessageListener and increments a counter.
1:6038303:      * Main thread sleeps for 5 seconds and checks the counter value.
1:39e20d0:      * If counter != 60 msgs (the number of msgs that should get dispatched
1:6038303:      * to consumer) the test fails.
1:39e20d0:      */
1:39e20d0:     @Test
1:39e20d0:     public void testOptimizedAckWithExpiredMsgs() throws Exception
1:39e20d0:     {
1:6038303:         ActiveMQConnectionFactory connectionFactory =
1:6038303:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1:6038303: 
1:6038303:         // Create JMS resources
1:6038303:         Connection connection = connectionFactory.createConnection();
1:6038303:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6038303:         Destination destination = session.createQueue("TEST.FOO");
1:6038303: 
1:6038303:         // ***** Consumer code *****
1:6038303:         MessageConsumer consumer = session.createConsumer(destination);
1:6038303: 
1:6038303:         final MyMessageListener listener = new MyMessageListener();
1:6038303:         connection.setExceptionListener((ExceptionListener) listener);
1:6038303: 
1:6038303:         // ***** Producer Code *****
1:6038303:         MessageProducer producer = session.createProducer(destination);
1:6038303:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:6038303: 
1:6038303:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
1:6038303:         TextMessage message;
1:6038303: 
1:6038303:         // Produce msgs that will expire quickly
1:6038303:         for (int i=0; i<45; i++) {
1:6038303:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,100);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 10 msec");
1:6038303:         }
1:6038303:         // Produce msgs that don't expire
1:6038303:         for (int i=0; i<60; i++) {
1:6038303:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,60000);
1:6038303:             // producer.send(message);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 30 sec");
1:6038303:         }
1:6038303:         consumer.setMessageListener(listener);
1:6038303: 
1:6038303:         sleep(1000);  // let the batch of 45 expire.
1:6038303: 
1:6038303:         connection.start();
1:6038303: 
1:6038303:         assertTrue("Should receive all expected messages, counter at " + listener.getCounter(), Wait.waitFor(new Wait.Condition() {
1:6038303: 
1:6038303:             @Override
1:6038303:             public boolean isSatisified() throws Exception {
1:6038303:                 return listener.getCounter() == 60;
1:6038303:             }
1:6038303:         }));
1:6038303: 
1:6038303:         LOG.info("Received all expected messages with counter at: " + listener.getCounter());
1:6038303: 
1:6038303:         // Cleanup
1:6038303:         producer.close();
1:6038303:         consumer.close();
1:6038303:         session.close();
1:6038303:         connection.close();
1:6038303:     }
1:6038303: 
1:6038303:     @Test
1:6038303:     public void testOptimizedAckWithExpiredMsgsSync() throws Exception
1:6038303:     {
1:6038303:         ActiveMQConnectionFactory connectionFactory =
1:6038303:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1:6038303: 
1:39e20d0:         // Create JMS resources
1:39e20d0:         Connection connection = connectionFactory.createConnection();
1:39e20d0:         connection.start();
1:39e20d0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:39e20d0:         Destination destination = session.createQueue("TEST.FOO");
1:6038303: 
1:6038303:         // ***** Consumer code *****
1:6038303:         MessageConsumer consumer = session.createConsumer(destination);
1:39e20d0: 
1:39e20d0:         // ***** Producer Code *****
1:39e20d0:         MessageProducer producer = session.createProducer(destination);
1:39e20d0:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:39e20d0: 
1:39e20d0:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
1:6038303:         TextMessage message;
1:39e20d0: 
1:39e20d0:         // Produce msgs that will expire quickly
1:39e20d0:         for (int i=0; i<45; i++) {
1:39e20d0:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,10);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 10 msec");
1:39e20d0:         }
1:39e20d0:         // Produce msgs that don't expire
1:39e20d0:         for (int i=0; i<60; i++) {
1:39e20d0:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,30000);
1:6038303:             // producer.send(message);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 30 sec");
1:39e20d0:         }
1:6038303:         sleep(200);
1:6038303: 
1:6038303:         int counter = 1;
1:6038303:         for (; counter <= 60; ++counter) {
1:6038303:             assertNotNull(consumer.receive(2000));
1:6038303:             LOG.info("counter at " + counter);
1:6038303:         }
1:6038303:         LOG.info("Received all expected messages with counter at: " + counter);
1:6038303: 
1:39e20d0:         // Cleanup
1:39e20d0:         producer.close();
1:39e20d0:         consumer.close();
1:39e20d0:         session.close();
1:39e20d0:         connection.close();
1:6038303:     }
1:6038303: 
1:6038303:     @Test
1:6038303:     public void testOptimizedAckWithExpiredMsgsSync2() throws Exception
1:6038303:     {
1:6038303:         ActiveMQConnectionFactory connectionFactory =
1:6038303:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1:6038303: 
1:6038303:         // Create JMS resources
1:6038303:         Connection connection = connectionFactory.createConnection();
1:6038303:         connection.start();
1:6038303:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6038303:         Destination destination = session.createQueue("TEST.FOO");
1:6038303: 
1:6038303:         // ***** Consumer code *****
1:6038303:         MessageConsumer consumer = session.createConsumer(destination);
1:6038303: 
1:6038303:         // ***** Producer Code *****
1:6038303:         MessageProducer producer = session.createProducer(destination);
1:6038303:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:6038303: 
1:6038303:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
1:6038303:         TextMessage message;
1:6038303: 
1:6038303:         // Produce msgs that don't expire
1:6038303:         for (int i=0; i<56; i++) {
1:6038303:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,30000);
1:6038303:             // producer.send(message);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 30 sec");
1:6038303:         }
1:6038303:         // Produce msgs that will expire quickly
1:6038303:         for (int i=0; i<44; i++) {
1:6038303:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,10);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 10 msec");
1:6038303:         }
1:6038303:         // Produce some moremsgs that don't expire
1:6038303:         for (int i=0; i<4; i++) {
1:6038303:             message = session.createTextMessage(text);
1:6038303:             producer.send(message,1,1,30000);
1:6038303:             // producer.send(message);
1:6038303:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:6038303:                 " with expiry 30 sec");
1:6038303:         }
1:6038303: 
1:6038303:         sleep(200);
1:6038303: 
1:6038303:         int counter = 1;
1:6038303:         for (; counter <= 60; ++counter) {
1:6038303:             assertNotNull(consumer.receive(2000));
1:6038303:             LOG.info("counter at " + counter);
1:6038303:         }
1:6038303:         LOG.info("Received all expected messages with counter at: " + counter);
1:39e20d0: 
1:6038303:         // Cleanup
1:6038303:         producer.close();
1:6038303:         consumer.close();
1:6038303:         session.close();
1:6038303:         connection.close();
1:39e20d0:     }
1:39e20d0: 
1:39e20d0:     private void sleep(int milliSecondTime) {
2:39e20d0:         try {
1:39e20d0:             Thread.sleep(milliSecondTime);
1:39e20d0:         } catch (InterruptedException igonred) {
1:6038303:         }
1:39e20d0:     }
1:39e20d0: 
1:6038303:     /**
1:39e20d0:      * Standard JMS MessageListener
1:39e20d0:      */
1:39e20d0:     private class MyMessageListener implements MessageListener, ExceptionListener {
1:6038303: 
1:6038303:         private AtomicInteger counter = new AtomicInteger(0);
1:6038303: 
1:6038303:         public void onMessage(final Message message) {
1:6038303:             try {
1:6038303:                 LOG.trace("Got Message " + message.getJMSMessageID());
1:6038303:                 LOG.info("counter at " + counter.incrementAndGet());
1:6038303:             } catch (final Exception e) {
1:6038303:             }
1:39e20d0:         }
1:6038303: 
1:6038303:         public int getCounter() {
1:6038303:             return counter.get();
1:6038303:         }
1:6038303: 
1:6038303:         public synchronized void onException(JMSException ex) {
1:39e20d0:             LOG.error("JMS Exception occured.  Shutting down client.");
1:39e20d0:         }
1:39e20d0:     }
1:39e20d0: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6038303
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * A consumer may be stalled in case it uses optimizeAcknowledge and receives
1:  * a number of messages that expire before being dispatched to application code.
1:  * See for more details.
1:  *
1: 
1:     private BrokerService broker = null;
1:     private String connectionUri;
1: 
1:     /**
1:      * Creates a broker instance but does not start it.
1:      *
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1: 
1:         broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * Main thread sleeps for 5 seconds and checks the counter value.
1:      * to consumer) the test fails.
1:         ActiveMQConnectionFactory connectionFactory =
1:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1: 
1:         // Create JMS resources
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST.FOO");
1: 
1:         // ***** Consumer code *****
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         final MyMessageListener listener = new MyMessageListener();
1:         connection.setExceptionListener((ExceptionListener) listener);
1: 
1:         // ***** Producer Code *****
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
1:         TextMessage message;
1: 
1:         // Produce msgs that will expire quickly
1:         for (int i=0; i<45; i++) {
1:             message = session.createTextMessage(text);
1:             producer.send(message,1,1,100);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 10 msec");
1:         }
1:         // Produce msgs that don't expire
1:         for (int i=0; i<60; i++) {
1:             message = session.createTextMessage(text);
1:             producer.send(message,1,1,60000);
1:             // producer.send(message);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 30 sec");
1:         }
1:         consumer.setMessageListener(listener);
1: 
1:         sleep(1000);  // let the batch of 45 expire.
1: 
1:         connection.start();
1: 
1:         assertTrue("Should receive all expected messages, counter at " + listener.getCounter(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return listener.getCounter() == 60;
1:             }
1:         }));
1: 
1:         LOG.info("Received all expected messages with counter at: " + listener.getCounter());
1: 
1:         // Cleanup
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testOptimizedAckWithExpiredMsgsSync() throws Exception
1:     {
1:         ActiveMQConnectionFactory connectionFactory =
1:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
/////////////////////////////////////////////////////////////////////////
1:         // ***** Consumer code *****
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         TextMessage message;
1: 
1:             producer.send(message,1,1,10);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 10 msec");
1:             producer.send(message,1,1,30000);
1:             // producer.send(message);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 30 sec");
1:         sleep(200);
1:         int counter = 1;
1:         for (; counter <= 60; ++counter) {
1:             assertNotNull(consumer.receive(2000));
1:             LOG.info("counter at " + counter);
1:         }
1:         LOG.info("Received all expected messages with counter at: " + counter);
1: 
1: 
1:     @Test
1:     public void testOptimizedAckWithExpiredMsgsSync2() throws Exception
1:     {
1:         ActiveMQConnectionFactory connectionFactory =
1:                 new ActiveMQConnectionFactory(connectionUri + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1: 
1:         // Create JMS resources
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST.FOO");
1: 
1:         // ***** Consumer code *****
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         // ***** Producer Code *****
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
1:         TextMessage message;
1: 
1:         // Produce msgs that don't expire
1:         for (int i=0; i<56; i++) {
1:             message = session.createTextMessage(text);
1:             producer.send(message,1,1,30000);
1:             // producer.send(message);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 30 sec");
1:         }
1:         // Produce msgs that will expire quickly
1:         for (int i=0; i<44; i++) {
1:             message = session.createTextMessage(text);
1:             producer.send(message,1,1,10);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 10 msec");
1:         }
1:         // Produce some moremsgs that don't expire
1:         for (int i=0; i<4; i++) {
1:             message = session.createTextMessage(text);
1:             producer.send(message,1,1,30000);
1:             // producer.send(message);
1:             LOG.trace("Sent message: "+ message.getJMSMessageID() +
1:                 " with expiry 30 sec");
1:         }
1: 
1:         sleep(200);
1: 
1:         int counter = 1;
1:         for (; counter <= 60; ++counter) {
1:             assertNotNull(consumer.receive(2000));
1:             LOG.info("counter at " + counter);
1:         }
1:         LOG.info("Received all expected messages with counter at: " + counter);
1: 
1:         // Cleanup
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:     }
1:         }
1:     /**
1: 
1:         private AtomicInteger counter = new AtomicInteger(0);
1: 
1:         public void onMessage(final Message message) {
1:             try {
1:                 LOG.trace("Got Message " + message.getJMSMessageID());
1:                 LOG.info("counter at " + counter.incrementAndGet());
1:             } catch (final Exception e) {
1:         }
1: 
1:         public int getCounter() {
1:             return counter.get();
1:         }
1: 
1:         public synchronized void onException(JMSException ex) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:0147739
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:39e20d0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.net.URI;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import javax.management.ObjectName;
1: 
0: import junit.framework.Assert;
1: 
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ActiveMQMessageConsumer;
0: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.DestinationViewMBean;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.Wait;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test for AMQ-3965.
0:  * A consumer may be stalled in case it uses optimizeAcknowledge and receives 
0:  * a number of messages that expire before being dispatched to application code. 
0:  * See AMQ-3965 for more details.
1:  */
1: public class OptimizeAcknowledgeWithExpiredMsgsTest {
1: 	
1:     private final static Logger LOG = LoggerFactory.getLogger(OptimizeAcknowledgeWithExpiredMsgsTest.class);
1: 
0:     private static BrokerService broker = null; 
0:     protected static final String DATA_DIR = "target/activemq-data/";
0:     public final String brokerUrl =  "tcp://localhost:61614";
1: 
1:    
1:     /** 
0:      * Creates a broker instance and starts it.
0:      * 
1:      * @param brokerUri - transport uri of broker
1:      * @param brokerName - name for the broker
1:      * @return a BrokerService instance with transport uri and broker name set
1:      * @throws Exception
1:      */
0:     protected BrokerService createBroker(URI brokerUri, String brokerName) throws Exception {
0:         BrokerService broker = BrokerFactory.createBroker(brokerUri);
0:         broker.setBrokerName(brokerName);
0:         broker.setBrokerId(brokerName);
0:         broker.setDataDirectory(DATA_DIR);
0:         broker.setEnableStatistics(true);
1:         broker.setUseJmx(false);
1:         return broker;
1:     }
1:     
1:     
1:     @Before
1:     public void setUp() throws Exception {
0:         final String options = "?persistent=false&useJmx=false&deleteAllMessagesOnStartup=true";
1:         
0:         broker = createBroker(new URI("broker:(" + brokerUrl + ")" + options), "localhost");
1:         broker.start();
0:     	broker.waitUntilStarted();
1:     	
1:     }
1:     
1:     
1:     @After
0:     public void tearDown() throws Exception {    
0:         if (broker != null)
0:     		broker.stop();
1:     }
1: 	
1: 
1:     /**
1:      * Tests for AMQ-3965
1:      * Creates connection into broker using optimzeAcknowledge and prefetch=100
1:      * Creates producer and consumer. Producer sends 45 msgs that will expire
1:      * at consumer (but before being dispatched to app code).
1:      * Producer then sends 60 msgs without expiry.
0:      * 
1:      * Consumer receives msgs using a MessageListener and increments a counter.
0:      * Main thread sleeps for 5 seconds and checks the counter value. 
1:      * If counter != 60 msgs (the number of msgs that should get dispatched
0:      * to consumer) the test fails. 
1:      */
1:     @Test
1:     public void testOptimizedAckWithExpiredMsgs() throws Exception
1:     {
1:     	
0:     	ActiveMQConnectionFactory connectionFactory = 
0:     			new ActiveMQConnectionFactory(brokerUrl + "?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100");
1: 
1:         // Create JMS resources
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST.FOO");
1: 
0:         // ***** Consumer code ***** 
0:         MessageConsumer consumer = session.createConsumer(destination); 
1:                  
0:         MyMessageListener listener = new MyMessageListener();
0:         connection.setExceptionListener((ExceptionListener) listener);
1:                 
1:         // ***** Producer Code *****
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
0:         TextMessage message; 
1:         
0:         consumer.setMessageListener(listener);
0:         listener.setDelay(100);
1:         
1:         // Produce msgs that will expire quickly
1:         for (int i=0; i<45; i++) {
1:             message = session.createTextMessage(text);
0:             producer.send(message,1,1,30);
0:             LOG.trace("Sent message: "+ message.getJMSMessageID() + 
0:             	" with expiry 30 msec");
1:         }
1:         // Produce msgs that don't expire
1:         for (int i=0; i<60; i++) {
1:             message = session.createTextMessage(text);
0:             producer.send(message);
0:             LOG.trace("Sent message: "+ message.getJMSMessageID() + 
0:             	" with no expiry.");               	
1:         }
0:         listener.setDelay(0);       
1: 
0:         // set exit condition
0:         TestExitCondition cond = new TestExitCondition(listener);
0:         Wait.waitFor(cond, 5000);
1:         
0:         Assert.assertTrue("Error: Some non-expired messages were not received.", listener.getCounter() >= 60);
1:         
0:         LOG.info("Received all expected messages with counter at " + listener.getCounter());
1:         
1:         // Cleanup
0:         LOG.info("Cleaning up.");
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         connection.close();
0:         listener = null;
1:     }
1:     
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }    
1:     }
1:     
1:     
1:     /**
0:      * Defines the exit condition for the test.
1:      */
0:     private class TestExitCondition implements Wait.Condition {
1: 
0:     	private MyMessageListener listener;
1:     	
0:     	public TestExitCondition(MyMessageListener l) {
0:     		this.listener = l;
1:     	}
1:     	
0: 		public boolean isSatisified() throws Exception {
0:     		return listener.getCounter() == 36;
1: 		}
1:     	
1:     }
1:     
1:     
1:     /** 
1:      * Standard JMS MessageListener
1:      */
1:     private class MyMessageListener implements MessageListener, ExceptionListener {
1:     	
0:     	private AtomicInteger counter = new AtomicInteger(0);
0:     	private int delay = 0;
1:     	
0:     	public void onMessage(final Message message) { 
1:             try { 
0:                 LOG.trace("Got Message " + message.getJMSMessageID()); 
0:                 LOG.debug("counter at " + counter.incrementAndGet());
0:                 if (delay>0) {
0:                 	sleep(delay);
1:                 }
0:             } catch (final Exception e) { 
0:                 e.printStackTrace(); 
1:             }
1:         } 
1:     	
0:     	public int getCounter() {
0:     		return counter.get();
1:     	}
1:     	
0:     	public int getDelay() {
0:     		return delay;
1:     	}
1:     	
0:     	public void setDelay(int newDelay) {
0:     		this.delay = newDelay;
1:     	}
1:     	
0:     	public synchronized void onException(JMSException ex) {
1:             LOG.error("JMS Exception occured.  Shutting down client.");
1:         }
1:     }
1: }
1:  
============================================================================