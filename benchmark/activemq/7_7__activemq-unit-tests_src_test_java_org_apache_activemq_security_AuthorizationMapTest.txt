1:affd134: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:affd134:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:affd134:  * Unless required by applicable law or agreed to in writing, software
1:affd134:  * distributed under the License is distributed on an "AS IS" BASIS,
1:affd134:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:affd134:  * See the License for the specific language governing permissions and
1:affd134:  * limitations under the License.
1:affd134:  */
1:affd134: package org.apache.activemq.security;
1:e78e72f: 
1:f812e34: import java.util.ArrayList;
1:f812e34: import java.util.List;
1:f812e34: import java.util.Set;
1:e78e72f: 
1:affd134: import junit.framework.TestCase;
1:f812e34: import org.apache.activemq.command.ActiveMQQueue;
1:3dbc9c9: import org.apache.activemq.filter.DestinationMapEntry;
1:f812e34: import org.apache.activemq.jaas.GroupPrincipal;
2:e78e72f: 
1:affd134: /**
1:3dbc9c9:  *
1:3dbc9c9:  *
1:affd134:  */
1:affd134: public class AuthorizationMapTest extends TestCase {
1:fc00993:     static final GroupPrincipal USERS = new GroupPrincipal("users");
1:fc00993:     static final GroupPrincipal ADMINS = new GroupPrincipal("admins");
1:fc00993:     static final GroupPrincipal TEMP_DESTINATION_ADMINS = new GroupPrincipal("tempDestAdmins");
1:e78e72f: 
1:affd134:     public void testAuthorizationMap() {
1:7777744:         AuthorizationMap map = createAuthorizationMap();
1:e78e72f: 
1:3dbc9c9:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:7777744:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:fc00993:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:7777744:         assertTrue("Contains users group", readACLs.contains(USERS));
1:f812e34: 
1:e78e72f:     }
1:9a7443a: 
1:8bb5803:     public void testComposite() {
1:e16d054:         AuthorizationMap map = createAuthorizationMap();
1:e16d054:         addABEntry(map);
1:f812e34: 
1:9a7443a:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR,DENIED"));
1:7777744:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:9a7443a:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:8bb5803: 
1:8bb5803:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR,USERS.BAR.FOO"));
1:8bb5803:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:8bb5803:         assertTrue("Contains users group", readACLs.contains(USERS));
1:8bb5803: 
1:8bb5803:         readACLs = map.getReadACLs(new ActiveMQQueue("QUEUEA,QUEUEB"));
1:8bb5803:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:8bb5803:         assertTrue("Contains users group", readACLs.contains(USERS));
1:9a7443a:     }
1:9a7443a: 
1:e16d054:     protected void addABEntry(AuthorizationMap map) {
1:e16d054:         DefaultAuthorizationMap defaultMap = (DefaultAuthorizationMap) map;
1:e16d054:         defaultMap.put(new ActiveMQQueue("QUEUEA"), createEntry("QUEUEA", "users", "users", "users"));
1:e16d054:         defaultMap.put(new ActiveMQQueue("QUEUEB"), createEntry("QUEUEB", "users", "users", "users"));
1:e16d054:     }
1:e16d054: 
1:e78e72f:     public void testAuthorizationMapWithTempDest() {
1:e78e72f:         AuthorizationMap map = createAuthorizationMapWithTempDest();
1:f812e34: 
1:3dbc9c9:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:7777744:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:fc00993:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:7777744:         assertTrue("Contains users group", readACLs.contains(USERS));
1:f812e34: 
1:3dbc9c9:         Set<?> tempAdminACLs = map.getTempDestinationAdminACLs();
1:e78e72f:         assertEquals("set size: " + tempAdminACLs, 1, tempAdminACLs.size());
1:fc00993:         assertTrue("Contains users group", tempAdminACLs.contains(TEMP_DESTINATION_ADMINS));
1:7777744: 
1:f812e34:     }
1:7777744: 
1:0525772:     public void testWildcards() {
1:0525772:         AuthorizationMap map = createWildcardAuthorizationMap();
1:0525772: 
1:0525772:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:0525772:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:0525772:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:0525772:         assertTrue("Contains users group", readACLs.contains(USERS));
1:0525772: 
1:0525772:         Set<?> writeAcls = map.getWriteACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:0525772:         assertEquals("set size: " + writeAcls, 1, writeAcls.size());
1:0525772:         assertTrue("Contains users group", writeAcls.contains(ADMINS));
1:0525772:         assertTrue("Contains users group", writeAcls.contains(USERS));
1:0525772: 
1:0525772:         Set<?> adminAcls = map.getAdminACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:0525772:         assertEquals("set size: " + adminAcls, 1, adminAcls.size());
1:0525772:         assertTrue("Contains users group", adminAcls.contains(ADMINS));
1:0525772:         assertFalse("Contains users group", adminAcls.contains(USERS));
1:0525772: 
1:0525772:         Set<?> tempAdminACLs = map.getTempDestinationAdminACLs();
1:0525772:         assertEquals("set size: " + tempAdminACLs, 1, tempAdminACLs.size());
1:0525772:         assertTrue("Contains users group", tempAdminACLs.contains(TEMP_DESTINATION_ADMINS));
1:0525772:     }
1:0525772: 
1:3b39d2c:     public void testWildcardSubscriptions() {
1:3b39d2c:         final GroupPrincipal USERSA = new GroupPrincipal("usersA");
1:3b39d2c: 
1:3b39d2c:         DefaultAuthorizationMap map = new DefaultAuthorizationMap();
1:3b39d2c:         List<DestinationMapEntry> entries = new ArrayList<>();
1:3b39d2c:         entries.add(createEntry("A", "usersA", null, null));
1:3b39d2c:         map.setAuthorizationEntries(entries);
1:3b39d2c: 
1:3b39d2c:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c: 
1:3b39d2c:         entries.add(createEntry("USERS.>", "users", null, null));
1:3b39d2c:         map.setAuthorizationEntries(entries);
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         entries.add(createEntry("USERS.A.>", "usersA", null, null));
1:3b39d2c:         map.setAuthorizationEntries(entries);
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.A.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c: 
1:3b39d2c:         entries.add(createEntry(">", "admins", null, null));
1:3b39d2c:         map.setAuthorizationEntries(entries);
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c: 
1:3b39d2c:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.A.>"));
1:3b39d2c:         assertEquals("set size: " + readACLs, 3, readACLs.size());
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERS));
1:3b39d2c:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:3b39d2c:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:3b39d2c:     }
1:3b39d2c: 
1:0525772:     protected AuthorizationMap createWildcardAuthorizationMap() {
1:0525772:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
1:0525772: 
1:0525772:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
1:0525772: 
1:0525772:         AuthorizationEntry entry = new AuthorizationEntry();
1:0525772:         entry.setQueue(">");
1:0525772:         try {
1:0525772:             entry.setRead("*");
1:0525772:             entry.setWrite("*");
1:0525772:             entry.setAdmin("admins");
1:0525772:         } catch (Exception e) {
1:0525772:             fail(e.toString());
1:0525772:         }
1:0525772: 
1:0525772:         entries.add(entry);
1:0525772: 
1:0525772:         answer.setAuthorizationEntries(entries);
1:0525772: 
1:0525772:         TempDestinationAuthorizationEntry tEntry = new TempDestinationAuthorizationEntry();
1:0525772:         try {
1:0525772:             tEntry.setAdmin("*");
1:0525772:         } catch (Exception e) {
1:0525772:             fail(e.toString());
1:0525772:         }
1:0525772: 
1:0525772:         answer.setTempDestinationAuthorizationEntry(tEntry);
1:0525772: 
1:0525772:         return answer;
1:0525772: 
1:0525772:     }
1:0525772: 
1:3dbc9c9:     @SuppressWarnings("rawtypes")
1:affd134:     protected AuthorizationMap createAuthorizationMap() {
1:affd134:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
1:7777744: 
1:3dbc9c9:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
1:f812e34: 
1:affd134:         AuthorizationEntry entry = new AuthorizationEntry();
1:346119b:         entry.setGroupClass("org.apache.activemq.jaas.GroupPrincipal");
1:affd134:         entry.setQueue(">");
1:346119b:         try {
1:f812e34:             entry.setRead("admins");
1:346119b:         } catch (Exception e) {
1:f812e34:             fail(e.toString());
1:7777744:         }
1:f812e34: 
1:affd134:         entries.add(entry);
1:f812e34:         // entry using default org.apache.activemq.jaas.GroupPrincipal class
1:affd134:         entry = new AuthorizationEntry();
1:affd134:         entry.setQueue("USERS.>");
1:346119b:         try {
1:f812e34:             entry.setRead("users");
1:346119b:         } catch (Exception e) {
1:f812e34:             fail(e.toString());
1:346119b:         }
1:affd134:         entries.add(entry);
1:f812e34: 
1:affd134:         answer.setAuthorizationEntries(entries);
1:346119b: 
1:affd134:         return answer;
1:346119b:     }
1:346119b: 
1:3dbc9c9:     @SuppressWarnings("rawtypes")
1:e78e72f:     protected AuthorizationMap createAuthorizationMapWithTempDest() {
1:e78e72f:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
1:e78e72f: 
1:3dbc9c9:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
1:e78e72f: 
1:e78e72f:         AuthorizationEntry entry = new AuthorizationEntry();
1:e78e72f:         entry.setQueue(">");
1:346119b:         try {
1:f812e34:             entry.setRead("admins");
1:346119b:         } catch (Exception e) {
1:f812e34:             fail(e.toString());
1:346119b:         }
1:e78e72f:         entries.add(entry);
1:e78e72f: 
1:e78e72f:         entry = new AuthorizationEntry();
1:e78e72f:         entry.setQueue("USERS.>");
1:346119b:         try {
1:f812e34:             entry.setRead("users");
1:346119b:         } catch (Exception e) {
1:f812e34:             fail(e.toString());
1:346119b:         }
1:e78e72f:         entries.add(entry);
1:e78e72f: 
1:e78e72f:         answer.setAuthorizationEntries(entries);
1:e78e72f: 
1:f812e34:         // create entry for temporary queue
1:e78e72f:         TempDestinationAuthorizationEntry tEntry = new TempDestinationAuthorizationEntry();
1:346119b:         try {
1:f812e34:             tEntry.setAdmin("tempDestAdmins");
1:346119b:         } catch (Exception e) {
1:f812e34:             fail(e.toString());
1:f812e34:         }
1:f812e34: 
1:e78e72f:         answer.setTempDestinationAuthorizationEntry(tEntry);
1:e78e72f: 
1:e78e72f:         return answer;
1:f812e34:     }
1:e78e72f: 
1:3b39d2c:     protected AuthorizationEntry createEntry(String queue, String read, String write, String admin) {
1:3b39d2c:         AuthorizationEntry entry = new AuthorizationEntry();
1:3b39d2c:         if (queue != null) {
1:3b39d2c:             entry.setQueue(queue);
1:3b39d2c:         }
1:3b39d2c:         try {
1:3b39d2c:             if (read != null) {
1:3b39d2c:                 entry.setRead(read);
1:3b39d2c:             }
1:3b39d2c:             if (write != null) {
1:3b39d2c:                 entry.setWrite(write);
1:3b39d2c:             }
1:3b39d2c:             if (admin != null) {
1:3b39d2c:                 entry.setAdmin(admin);
1:3b39d2c:             }
1:3b39d2c:         } catch (Exception e) {
1:3b39d2c:             fail(e.toString());
1:3b39d2c:         }
1:3b39d2c:         return entry;
1:3b39d2c:     }
1:3b39d2c: 
1:346119b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e16d054
/////////////////////////////////////////////////////////////////////////
1:         AuthorizationMap map = createAuthorizationMap();
1:         addABEntry(map);
/////////////////////////////////////////////////////////////////////////
1:     protected void addABEntry(AuthorizationMap map) {
1:         DefaultAuthorizationMap defaultMap = (DefaultAuthorizationMap) map;
1:         defaultMap.put(new ActiveMQQueue("QUEUEA"), createEntry("QUEUEA", "users", "users", "users"));
1:         defaultMap.put(new ActiveMQQueue("QUEUEB"), createEntry("QUEUEB", "users", "users", "users"));
1:     }
1: 
commit:0525772
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testWildcards() {
1:         AuthorizationMap map = createWildcardAuthorizationMap();
1: 
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         Set<?> writeAcls = map.getWriteACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:         assertEquals("set size: " + writeAcls, 1, writeAcls.size());
1:         assertTrue("Contains users group", writeAcls.contains(ADMINS));
1:         assertTrue("Contains users group", writeAcls.contains(USERS));
1: 
1:         Set<?> adminAcls = map.getAdminACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:         assertEquals("set size: " + adminAcls, 1, adminAcls.size());
1:         assertTrue("Contains users group", adminAcls.contains(ADMINS));
1:         assertFalse("Contains users group", adminAcls.contains(USERS));
1: 
1:         Set<?> tempAdminACLs = map.getTempDestinationAdminACLs();
1:         assertEquals("set size: " + tempAdminACLs, 1, tempAdminACLs.size());
1:         assertTrue("Contains users group", tempAdminACLs.contains(TEMP_DESTINATION_ADMINS));
1:     }
1: 
1:     protected AuthorizationMap createWildcardAuthorizationMap() {
1:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
1: 
1:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
1:         try {
1:             entry.setRead("*");
1:             entry.setWrite("*");
1:             entry.setAdmin("admins");
1:         } catch (Exception e) {
1:             fail(e.toString());
1:         }
1: 
1:         entries.add(entry);
1: 
1:         answer.setAuthorizationEntries(entries);
1: 
1:         TempDestinationAuthorizationEntry tEntry = new TempDestinationAuthorizationEntry();
1:         try {
1:             tEntry.setAdmin("*");
1:         } catch (Exception e) {
1:             fail(e.toString());
1:         }
1: 
1:         answer.setTempDestinationAuthorizationEntry(tEntry);
1: 
1:         return answer;
1: 
1:     }
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:8bb5803
/////////////////////////////////////////////////////////////////////////
1:     public void testComposite() {
0:         DefaultAuthorizationMap map = (DefaultAuthorizationMap)createAuthorizationMap();
0:         map.put(new ActiveMQQueue("QUEUEA"), createEntry("QUEUEA", "users", "users", "users"));
0:         map.put(new ActiveMQQueue("QUEUEB"), createEntry("QUEUEB", "users", "users", "users"));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR,USERS.BAR.FOO"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("QUEUEA,QUEUEB"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
commit:3b39d2c
/////////////////////////////////////////////////////////////////////////
1:     public void testWildcardSubscriptions() {
1:         final GroupPrincipal USERSA = new GroupPrincipal("usersA");
1: 
1:         DefaultAuthorizationMap map = new DefaultAuthorizationMap();
1:         List<DestinationMapEntry> entries = new ArrayList<>();
1:         entries.add(createEntry("A", "usersA", null, null));
1:         map.setAuthorizationEntries(entries);
1: 
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1: 
1:         entries.add(createEntry("USERS.>", "users", null, null));
1:         map.setAuthorizationEntries(entries);
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         entries.add(createEntry("USERS.A.>", "usersA", null, null));
1:         map.setAuthorizationEntries(entries);
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:         assertEquals("set size: " + readACLs, 0, readACLs.size());
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.A.>"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1: 
1:         entries.add(createEntry(">", "admins", null, null));
1:         map.setAuthorizationEntries(entries);
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("A"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.TEST"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1: 
1:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.A.>"));
1:         assertEquals("set size: " + readACLs, 3, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains users group", readACLs.contains(USERSA));
1:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected AuthorizationEntry createEntry(String queue, String read, String write, String admin) {
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         if (queue != null) {
1:             entry.setQueue(queue);
1:         }
1:         try {
1:             if (read != null) {
1:                 entry.setRead(read);
1:             }
1:             if (write != null) {
1:                 entry.setWrite(write);
1:             }
1:             if (admin != null) {
1:                 entry.setAdmin(admin);
1:             }
1:         } catch (Exception e) {
1:             fail(e.toString());
1:         }
1:         return entry;
1:     }
1: 
commit:24c2215
/////////////////////////////////////////////////////////////////////////
commit:7777744
/////////////////////////////////////////////////////////////////////////
0:     public void testWildcardSubscriptions() {
1:         AuthorizationMap map = createAuthorizationMap();
0:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue(">"));
1:         assertEquals("set size: " + readACLs, 1, readACLs.size());
0:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
0:         assertFalse("Contains users group", readACLs.contains(USERS));
1: 
0:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.>"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
0:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1: 
0:         readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.>"));
1:         assertEquals("set size: " + readACLs, 2, readACLs.size());
0:         assertTrue("Contains admins group", readACLs.contains(ADMINS));
1:         assertTrue("Contains users group", readACLs.contains(USERS));
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationMapEntry;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
/////////////////////////////////////////////////////////////////////////
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
1:         Set<?> tempAdminACLs = map.getTempDestinationAdminACLs();
1:     @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> entries = new ArrayList<DestinationMapEntry>();
author:Gary Tully
-------------------------------------------------------------------------------
commit:9a7443a
/////////////////////////////////////////////////////////////////////////
0:     public void testCompositeDoesNotBypassAuthorizationMap() {
0:         AuthorizationMap map = createAuthorizationMap();
1: 
1:         Set<?> readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR,DENIED"));
0:         assertEquals("set size: " + readACLs, 1, readACLs.size());
1:         assertTrue("Contains users group", readACLs.contains(ADMINS));
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         List<AuthorizationEntry> entries = new ArrayList<AuthorizationEntry>();
/////////////////////////////////////////////////////////////////////////
0:         List<AuthorizationEntry> entries = new ArrayList<AuthorizationEntry>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     static final GroupPrincipal GUESTS = new GroupPrincipal("guests");
1:     static final GroupPrincipal USERS = new GroupPrincipal("users");
1:     static final GroupPrincipal ADMINS = new GroupPrincipal("admins");
1:     static final GroupPrincipal TEMP_DESTINATION_ADMINS = new GroupPrincipal("tempDestAdmins");
1:         assertTrue("Contains users group", readACLs.contains(ADMINS));
0:         assertTrue("Contains users group", readACLs.contains(USERS));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Contains users group", readACLs.contains(ADMINS));
0:         assertTrue("Contains users group", readACLs.contains(USERS));
1:         assertTrue("Contains users group", tempAdminACLs.contains(TEMP_DESTINATION_ADMINS));
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.jaas.GroupPrincipal;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             entry.setRead("admins");
1:             fail(e.toString());
1: 
1:         // entry using default org.apache.activemq.jaas.GroupPrincipal class
1:             entry.setRead("users");
1:             fail(e.toString());
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             entry.setRead("admins");
1:             fail(e.toString());
1:             entry.setRead("users");
1:             fail(e.toString());
1: 
1:         // create entry for temporary queue
1:             tEntry.setAdmin("tempDestAdmins");
1:             fail(e.toString());
1:         }
1: 
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:346119b
/////////////////////////////////////////////////////////////////////////
1:         entry.setGroupClass("org.apache.activemq.jaas.GroupPrincipal");
1:         try {
0:         	entry.setRead("admins");
1:         } catch (Exception e) {
0:         	fail(e.toString());
1:         }
1:         
1:         
0:         // entry using default org.apache.activemq.jaas.GroupPrincipal class  
1:         try {
0:         	entry.setRead("users");
1:         } catch (Exception e) {
0:         	fail(e.toString());
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try {
0:         	entry.setRead("admins");
1:         } catch (Exception e) {
0:         	fail(e.toString());
1:         }
1:         try {
0:         	entry.setRead("users");
1:         } catch (Exception e) {
0:         	fail(e.toString());
1:         }
1:         try {
0:         	tEntry.setAdmin("tempDestAdmins");
1:         } catch (Exception e) {
0:         	fail(e.toString());
1:         }        
commit:e78e72f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQTempQueue;
/////////////////////////////////////////////////////////////////////////
0:     static final GroupPrincipal tempDestinationAdmins = new GroupPrincipal("tempDestAdmins");
/////////////////////////////////////////////////////////////////////////
1:         
1:     public void testAuthorizationMapWithTempDest() {
1:         AuthorizationMap map = createAuthorizationMapWithTempDest();
1: 
0:         Set readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
0:         assertEquals("set size: " + readACLs, 2, readACLs.size());
0:         assertTrue("Contains users group", readACLs.contains(admins));
0:         assertTrue("Contains users group", readACLs.contains(users));
1:         
0:         Set tempAdminACLs = map.getTempDestinationAdminACLs();
1:         assertEquals("set size: " + tempAdminACLs, 1, tempAdminACLs.size());
0:         assertTrue("Contains users group", tempAdminACLs.contains(tempDestinationAdmins));
1:               
1:     }    
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected AuthorizationMap createAuthorizationMapWithTempDest() {
1:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
1: 
0:         List entries = new ArrayList();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
0:         entry.setRead("admins");
1:         entries.add(entry);
1: 
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
0:         entry.setRead("users");
1:         entries.add(entry);
1: 
1:         answer.setAuthorizationEntries(entries);
1:         
0:         //create entry for temporary queue
1:         TempDestinationAuthorizationEntry tEntry = new TempDestinationAuthorizationEntry();
0:         tEntry.setAdmin("tempDestAdmins");
1:         
1:         answer.setTempDestinationAuthorizationEntry(tEntry);
1: 
1:         return answer;
0:     }    
author:James Strachan
-------------------------------------------------------------------------------
commit:affd134
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
0: 
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.jaas.GroupPrincipal;
0: 
0: import java.util.*;
0: import java.util.Set;
0: 
1: import junit.framework.TestCase;
0: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class AuthorizationMapTest extends TestCase {
0:     static final GroupPrincipal guests = new GroupPrincipal("guests");
0:     static final GroupPrincipal users = new GroupPrincipal("users");
0:     static final GroupPrincipal admins = new GroupPrincipal("admins");
0: 
1:     public void testAuthorizationMap() {
0:         AuthorizationMap map = createAuthorizationMap();
0: 
0:         Set readACLs = map.getReadACLs(new ActiveMQQueue("USERS.FOO.BAR"));
0:         assertEquals("set size: " + readACLs, 2, readACLs.size());
0:         assertTrue("Contains users group", readACLs.contains(admins));
0:         assertTrue("Contains users group", readACLs.contains(users));
0:     }
0: 
1:     protected AuthorizationMap createAuthorizationMap() {
1:         DefaultAuthorizationMap answer = new DefaultAuthorizationMap();
0: 
0:         List entries = new ArrayList();
0: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
0:         entry.setRead("admins");
1:         entries.add(entry);
0: 
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
0:         entry.setRead("users");
1:         entries.add(entry);
0: 
1:         answer.setAuthorizationEntries(entries);
0: 
1:         return answer;
0:     }
0: 
0: }
============================================================================