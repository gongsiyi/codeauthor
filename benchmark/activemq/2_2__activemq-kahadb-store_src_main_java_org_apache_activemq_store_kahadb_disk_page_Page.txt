1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.page;
4:456a2ba: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * A Page within a file.
1:456a2ba:  */
1:456a2ba: public class Page<T> {
1:456a2ba: 
1:456a2ba:     public static final int PAGE_HEADER_SIZE = 21;
1:456a2ba: 
1:456a2ba:     public static final byte PAGE_FREE_TYPE = 0;
1:456a2ba:     public static final byte PAGE_PART_TYPE = 1;
1:456a2ba:     public static final byte PAGE_END_TYPE = 2;
1:456a2ba: 
1:456a2ba:     long pageId;
1:456a2ba: 
1:456a2ba:     // The following fields are persisted
1:456a2ba:     byte type = PAGE_FREE_TYPE;
1:456a2ba:     long txId;
1:456a2ba:     // A field reserved to hold checksums..  Not in use (yet)
1:456a2ba:     int checksum;
1:456a2ba: 
1:456a2ba:     // Points to the next page in the chunk stream
1:456a2ba:     long next;
1:456a2ba:     T data;
1:456a2ba: 
1:456a2ba:     public Page() {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Page(long pageId) {
1:456a2ba:         this.pageId=pageId;
1:456a2ba:     }
1:456a2ba: 
1:cdba931:     public Page<T> copy(Page<T> other) {
1:456a2ba:         this.pageId = other.pageId;
1:456a2ba:         this.txId = other.txId;
1:456a2ba:         this.type = other.type;
1:456a2ba:         this.next = other.next;
1:456a2ba:         this.data = other.data;
1:cdba931:         return this;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     Page<T> copy() {
1:cdba931:         return new Page<T>().copy(this);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void makeFree(long txId) {
1:456a2ba:         this.type = Page.PAGE_FREE_TYPE;
1:456a2ba:         this.txId = txId;
1:456a2ba:         this.data = null;
1:456a2ba:         this.next = 0;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void makePagePart(long next, long txId) {
1:456a2ba:         this.type = Page.PAGE_PART_TYPE;
1:456a2ba:         this.next = next;
1:456a2ba:         this.txId = txId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void makePageEnd(long size, long txId) {
1:456a2ba:         this.type = Page.PAGE_END_TYPE;
1:456a2ba:         this.next = size;
1:456a2ba:         this.txId = txId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void write(DataOutput os) throws IOException {
1:456a2ba:         os.writeByte(type);
1:456a2ba:         os.writeLong(txId);
1:456a2ba:         os.writeLong(next);
1:456a2ba:         os.writeInt(checksum);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void read(DataInput is) throws IOException {
1:456a2ba:         type = is.readByte();
1:456a2ba:         txId = is.readLong();
1:456a2ba:         next = is.readLong();
1:456a2ba:         checksum = is.readInt();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getPageId() {
1:456a2ba:         return pageId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getTxId() {
1:456a2ba:         return txId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T get() {
1:456a2ba:         return data;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void set(T data) {
1:456a2ba:         this.data = data;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public short getType() {
1:456a2ba:         return type;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getNext() {
1:456a2ba:         return next;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public String toString() {
1:456a2ba:         return "[Page:" + getPageId()+", type: "+type+"]";
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getChecksum() {
1:456a2ba:         return checksum;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setChecksum(int checksum) {
1:456a2ba:         this.checksum = checksum;
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.page;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.page;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
1: 
0: import org.apache.kahadb.util.ByteSequence;
0: import org.apache.kahadb.util.DataByteArrayInputStream;
0: import org.apache.kahadb.util.DataByteArrayOutputStream;
0: import org.apache.kahadb.util.Marshaller;
1: 
1: /**
1:  * A Page within a file.
1:  * 
0:  * @version $Revision$
1:  */
1: public class Page<T> {
1: 
1:     public static final int PAGE_HEADER_SIZE = 21;
1: 
1:     public static final byte PAGE_FREE_TYPE = 0;
1:     public static final byte PAGE_PART_TYPE = 1;
1:     public static final byte PAGE_END_TYPE = 2;
1: 
1:     long pageId;
1: 
1:     // The following fields are persisted
1:     byte type = PAGE_FREE_TYPE;
1:     long txId;
1:     // A field reserved to hold checksums..  Not in use (yet)
1:     int checksum;
1:     
1:     // Points to the next page in the chunk stream
1:     long next;
1:     T data;
1: 
1:     public Page() {
1:     }
1: 
1:     public Page(long pageId) {
1:         this.pageId=pageId;
1:     }
1: 
0:     public void copy(Page<T> other) {
1:         this.pageId = other.pageId;
1:         this.txId = other.txId;
1:         this.type = other.type;
1:         this.next = other.next;
1:         this.data = other.data;
1:     }
1: 
1:     Page<T> copy() {
0:         Page<T> rc = new Page<T>();
0:         rc.copy(this);
0:         return rc;
1:     }
1: 
1:     void makeFree(long txId) {
1:         this.type = Page.PAGE_FREE_TYPE;
1:         this.txId = txId;
1:         this.data = null;
1:         this.next = 0;
1:     }
1:     
1:     public void makePagePart(long next, long txId) {
1:         this.type = Page.PAGE_PART_TYPE;
1:         this.next = next;
1:         this.txId = txId;
1:     }
1:     
1:     public void makePageEnd(long size, long txId) {
1:         this.type = Page.PAGE_END_TYPE;
1:         this.next = size;
1:         this.txId = txId;
1:     }
1: 
1:     void write(DataOutput os) throws IOException {
1:         os.writeByte(type);
1:         os.writeLong(txId);
1:         os.writeLong(next);
1:         os.writeInt(checksum);
1:     }
1: 
1:     void read(DataInput is) throws IOException {
1:         type = is.readByte();
1:         txId = is.readLong();
1:         next = is.readLong();
1:         checksum = is.readInt();
1:     }
1: 
1:     public long getPageId() {
1:         return pageId;
1:     }
1: 
1:     public long getTxId() {
1:         return txId;
1:     }
1: 
1:     public T get() {
1:         return data;
1:     }
1: 
1:     public void set(T data) {
1:         this.data = data;
1:     }
1: 
1:     public short getType() {
1:         return type;
1:     }
1: 
1:     public long getNext() {
1:         return next;
1:     }
1: 
1:     public String toString() {
1:         return "[Page:" + getPageId()+", type: "+type+"]";
1:     }
1: 
1:     public int getChecksum() {
1:         return checksum;
1:     }
1: 
1:     public void setChecksum(int checksum) {
1:         this.checksum = checksum;
1:     }
1: 
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:cdba931
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     public Page<T> copy(Page<T> other) {
1:         return this;
1:         return new Page<T>().copy(this);
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
============================================================================