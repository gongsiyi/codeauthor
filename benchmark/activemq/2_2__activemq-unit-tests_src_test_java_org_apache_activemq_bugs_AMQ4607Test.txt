1:a95c6db: /**
1:a95c6db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a95c6db:  * contributor license agreements.  See the NOTICE file distributed with
1:a95c6db:  * this work for additional information regarding copyright ownership.
1:a95c6db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a95c6db:  * (the "License"); you may not use this file except in compliance with
1:a95c6db:  * the License.  You may obtain a copy of the License at
1:a95c6db:  *
1:a95c6db:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a95c6db:  *
1:a95c6db:  * Unless required by applicable law or agreed to in writing, software
1:a95c6db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a95c6db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a95c6db:  * See the License for the specific language governing permissions and
1:a95c6db:  * limitations under the License.
1:a95c6db:  */
1:a95c6db: package org.apache.activemq.bugs;
1:a95c6db: 
1:a95c6db: import java.lang.Thread.UncaughtExceptionHandler;
1:a95c6db: import java.net.URI;
1:a95c6db: import java.util.Arrays;
1:a95c6db: import java.util.HashMap;
1:a95c6db: import java.util.LinkedHashMap;
1:a95c6db: import java.util.Map;
1:a95c6db: import java.util.Map.Entry;
1:a95c6db: import javax.jms.Destination;
1:a95c6db: import javax.jms.MessageConsumer;
1:a95c6db: import junit.framework.Test;
1:a95c6db: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:a95c6db: import org.apache.activemq.broker.BrokerService;
1:a95c6db: import org.apache.activemq.broker.jmx.ManagementContext;
1:a95c6db: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a95c6db: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a95c6db: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a95c6db: import org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory;
1:a95c6db: import org.apache.activemq.network.NetworkConnector;
1:a95c6db: import org.apache.activemq.util.Wait;
1:a95c6db: import org.slf4j.Logger;
1:a95c6db: import org.slf4j.LoggerFactory;
1:a95c6db: 
1:a95c6db: public class AMQ4607Test extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:a95c6db:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4607Test.class);
1:a95c6db: 
1:a95c6db:     public static final int BROKER_COUNT = 3;
1:a95c6db:     public static final int CONSUMER_COUNT = 1;
1:a95c6db:     public static final int MESSAGE_COUNT = 0;
1:a95c6db:     public static final boolean CONDUIT = true;
1:a95c6db:     public static final int TIMEOUT = 20000;
1:a95c6db: 
1:a95c6db:     public boolean duplex = true;
1:a95c6db:     protected Map<String, MessageConsumer> consumerMap;
1:a95c6db:     Map<Thread, Throwable> unhandeledExceptions = new HashMap<Thread, Throwable>();
1:a95c6db: 
1:a95c6db:     private void assertNoUnhandeledExceptions() {
1:a95c6db:         for( Entry<Thread, Throwable> e: unhandeledExceptions.entrySet()) {
1:a95c6db:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:a95c6db:         }
1:a95c6db:         assertTrue("There are no unhandelled exceptions, see: log for detail on: " + unhandeledExceptions,
1:a95c6db:                 unhandeledExceptions.isEmpty());
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public NetworkConnector bridge(String from, String to) throws Exception {
1:a95c6db:         NetworkConnector networkConnector = bridgeBrokers(from, to, true, -1, CONDUIT);
1:a95c6db:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:a95c6db:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:a95c6db:         networkConnector.setConsumerTTL(1);
1:a95c6db:         networkConnector.setDuplex(duplex);
1:a95c6db:         return networkConnector;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public static Test suite() {
1:a95c6db:         return suite(AMQ4607Test.class);
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void initCombos() {
1:a95c6db:         addCombinationValues("duplex", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void testMigratingConsumer() throws Exception {
1:a95c6db:         bridge("Broker0", "Broker1");
1:a95c6db:         if (!duplex) bridge("Broker1", "Broker0");
1:a95c6db: 
1:a95c6db:         bridge("Broker1", "Broker2");
1:a95c6db:         if (!duplex) bridge("Broker2", "Broker1");
1:a95c6db: 
1:a95c6db:         bridge("Broker0", "Broker2");
1:a95c6db:         if (!duplex) bridge("Broker2", "Broker0");
1:a95c6db: 
1:a95c6db:         startAllBrokers();
1:a95c6db:         this.waitForBridgeFormation();
1:a95c6db: 
1:a95c6db:         Destination dest = createDestination("TEST.FOO", false);
1:a95c6db:         sendMessages("Broker0", dest, 1);
1:a95c6db: 
1:a95c6db:         for (int i=0; i< BROKER_COUNT; i++) {
1:a95c6db:             MessageConsumer messageConsumer = createConsumer("Broker" + i, dest, "DoNotConsume = 'true'");
1:a95c6db: 
1:a95c6db:             for (int J = 0; J < BROKER_COUNT; J++) {
1:a95c6db:                 assertExactConsumersConnect("Broker" + J, dest, CONSUMER_COUNT, TIMEOUT);
1:a95c6db:             }
1:a95c6db: 
1:a95c6db:             assertNoUnhandeledExceptions();
1:a95c6db: 
1:a95c6db:             assertExactMessageCount("Broker" + i, dest, 1, TIMEOUT);
1:a95c6db: 
1:a95c6db:             messageConsumer.close();
1:a95c6db:             LOG.info("Check for no consumers..");
1:a95c6db:             for (int J = 0; J < BROKER_COUNT; J++) {
1:a95c6db:         	    assertExactConsumersConnect("Broker" + J, dest, 0, TIMEOUT);
1:a95c6db:             }
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         // now consume the message
1:a95c6db:         final String brokerId = "Broker2";
1:a95c6db:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:a95c6db:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:a95c6db:             @Override
1:a95c6db:             public boolean isSatisified() throws Exception {
1:a95c6db:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:a95c6db:             }
1:a95c6db:         }));
1:a95c6db:         messageConsumer.close();
1:a95c6db: 
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void testMigratingConsumerFullCircle() throws Exception {
1:a95c6db:         bridge("Broker0", "Broker1");
1:a95c6db:         if (!duplex) bridge("Broker1", "Broker0");
1:a95c6db: 
1:a95c6db:         bridge("Broker1", "Broker2");
1:a95c6db:         if (!duplex) bridge("Broker2", "Broker1");
1:a95c6db: 
1:a95c6db:         bridge("Broker0", "Broker2");
1:a95c6db:         if (!duplex) bridge("Broker2", "Broker0");
1:a95c6db: 
1:a95c6db:         // allow full loop, immediate replay back to 0 from 2
1:a95c6db:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:a95c6db:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:a95c6db:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:a95c6db:         brokers.get("Broker2").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1:a95c6db:         startAllBrokers();
1:a95c6db:         this.waitForBridgeFormation();
1:82c9f95: 
1:a95c6db:         Destination dest = createDestination("TEST.FOO", false);
1:82c9f95: 
1:a95c6db:         sendMessages("Broker0", dest, 1);
1:a95c6db: 
1:a95c6db:         for (int i=0; i< BROKER_COUNT; i++) {
1:a95c6db:             MessageConsumer messageConsumer = createConsumer("Broker" + i, dest, "DoNotConsume = 'true'");
1:a95c6db: 
1:a95c6db:             for (int J = 0; J < BROKER_COUNT; J++) {
1:a95c6db:                 assertExactConsumersConnect("Broker" + J, dest, CONSUMER_COUNT, TIMEOUT);
1:a95c6db:             }
1:a95c6db: 
1:a95c6db:             assertNoUnhandeledExceptions();
1:a95c6db: 
1:a95c6db:             // validate the message has been forwarded
1:a95c6db:             assertExactMessageCount("Broker" + i, dest, 1, TIMEOUT);
1:a95c6db: 
1:a95c6db:             messageConsumer.close();
1:a95c6db:             LOG.info("Check for no consumers..");
1:a95c6db:             for (int J = 0; J < BROKER_COUNT; J++) {
1:a95c6db:         	    assertExactConsumersConnect("Broker" + J, dest, 0, TIMEOUT);
1:a95c6db:             }
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         // now consume the message from the origin
1:a95c6db:         LOG.info("Consume from origin...");
1:a95c6db:         final String brokerId = "Broker0";
1:a95c6db:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:a95c6db:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:a95c6db:             @Override
1:a95c6db:             public boolean isSatisified() throws Exception {
1:a95c6db:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:a95c6db:             }
1:a95c6db:         }));
1:a95c6db:         messageConsumer.close();
1:a95c6db: 
1:a95c6db:     }
1:a95c6db: 
1:82c9f95:     public void testMigratingConsumerSelectorAwareTrue() throws Exception {
1:82c9f95:         bridge("Broker0", "Broker1");
1:82c9f95:         if (!duplex) bridge("Broker1", "Broker0");
1:82c9f95: 
1:82c9f95:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setSelectorAware(true);
1:82c9f95:         brokers.get("Broker1").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1:82c9f95: 
1:82c9f95:         startAllBrokers();
1:82c9f95:         this.waitForBridgeFormation();
1:82c9f95: 
1:82c9f95:         Destination dest = createDestination("TEST.FOO", false);
1:82c9f95:         sendMessages("Broker0", dest, 1);
1:82c9f95: 
1:82c9f95:         assertExactMessageCount("Broker0", dest, 1, TIMEOUT);
1:82c9f95: 
1:82c9f95:         MessageConsumer messageConsumerNoMatch = createConsumer("Broker1", dest, "DoNotConsume = 'true'");
1:82c9f95: 
1:82c9f95:         assertExactConsumersConnect("Broker0", dest, 1, TIMEOUT);
1:82c9f95:         assertExactConsumersConnect("Broker1", dest, 1, TIMEOUT);
1:82c9f95: 
1:82c9f95:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:82c9f95:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1:82c9f95: 
1:82c9f95:         // now consume the message
1:82c9f95:         final String brokerId = "Broker0";
1:82c9f95:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:82c9f95: 
1:82c9f95:         assertExactConsumersConnect("Broker0", dest, 2, TIMEOUT);
1:82c9f95:         assertExactConsumersConnect("Broker1", dest, 2, TIMEOUT);
1:82c9f95: 
1:82c9f95: 
1:82c9f95:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:82c9f95:             @Override
1:82c9f95:             public boolean isSatisified() throws Exception {
1:82c9f95:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:82c9f95:             }
1:82c9f95:         }));
1:82c9f95:         messageConsumer.close();
1:82c9f95:     }
1:82c9f95: 
1:82c9f95:     public void testMigratingConsumerSelectorAwareFalse() throws Exception {
1:82c9f95:         bridge("Broker0", "Broker1");
1:82c9f95:         if (!duplex) bridge("Broker1", "Broker0");
1:82c9f95: 
1:82c9f95:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:82c9f95:         conditionalNetworkBridgeFilterFactory.setSelectorAware(false);
1:82c9f95:         brokers.get("Broker1").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1:82c9f95: 
1:82c9f95:         startAllBrokers();
1:82c9f95:         this.waitForBridgeFormation();
1:82c9f95: 
1:82c9f95:         Destination dest = createDestination("TEST.FOO", false);
1:82c9f95:         sendMessages("Broker0", dest, 1);
1:82c9f95: 
1:82c9f95:         assertExactMessageCount("Broker0", dest, 1, TIMEOUT);
1:82c9f95: 
1:82c9f95:         MessageConsumer messageConsumerNoMatch = createConsumer("Broker1", dest, "DoNotConsume = 'true'");
1:82c9f95: 
1:82c9f95:         assertExactConsumersConnect("Broker0", dest, 1, TIMEOUT);
1:82c9f95:         assertExactConsumersConnect("Broker1", dest, 1, TIMEOUT);
1:82c9f95: 
1:82c9f95:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:82c9f95:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1:a95c6db: 
1:82c9f95:         // now try consume the message
1:82c9f95:         final String brokerId = "Broker0";
1:82c9f95:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:82c9f95: 
1:82c9f95:         assertExactConsumersConnect("Broker0", dest, 2, TIMEOUT);
1:82c9f95:         assertExactConsumersConnect("Broker1", dest, 2, TIMEOUT);
1:82c9f95: 
1:82c9f95:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:82c9f95:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1:a95c6db: 
1:82c9f95:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:82c9f95:             @Override
1:82c9f95:             public boolean isSatisified() throws Exception {
1:82c9f95:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 0;
1:82c9f95:             }
1:82c9f95:         }));
1:82c9f95:         messageConsumer.close();
1:82c9f95:     }
1:82c9f95: 
1:82c9f95: 
1:a95c6db:     protected void assertExactMessageCount(final String brokerName, Destination destination, final int count, long timeout) throws Exception {
1:a95c6db:         ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
1:a95c6db:         final QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:a95c6db:         assertTrue("Excepected queue depth: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:a95c6db:             @Override
1:a95c6db:             public boolean isSatisified() throws Exception {
1:a95c6db:                 long currentCount = queueViewMBean.getQueueSize();
1:a95c6db:                 LOG.info("On " + brokerName + " current queue size for " + queueViewMBean + ", " + currentCount);
1:a95c6db:                 if (count != currentCount) {
1:a95c6db:                     LOG.info("Sub IDs: " + Arrays.asList(queueViewMBean.getSubscriptions()));
1:a95c6db:                 }
1:a95c6db:                 return currentCount == count;
1:a95c6db:             }
1:a95c6db:         }, timeout));
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     protected void assertExactConsumersConnect(final String brokerName, Destination destination, final int count, long timeout) throws Exception {
1:a95c6db:         final ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
1:a95c6db:         assertTrue("Excepected consumers count: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:a95c6db:             @Override
1:a95c6db:             public boolean isSatisified() throws Exception {
1:a95c6db:                 try {
1:a95c6db:                     QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:a95c6db:                     long currentCount = queueViewMBean.getConsumerCount();
1:a95c6db:                     LOG.info("On " + brokerName + " current consumer count for " + queueViewMBean + ", " + currentCount);
1:a95c6db:                     if (count != currentCount) {
1:a95c6db:                         LOG.info("Sub IDs: " + Arrays.asList(queueViewMBean.getSubscriptions()));
1:a95c6db:                     }
1:a95c6db:                     return currentCount == count;
1:a95c6db:                 } catch (Exception e) {
1:a95c6db:                     LOG.warn("Unexpected: " + e, e);
1:a95c6db:                     return false;
1:a95c6db:                 }
1:a95c6db:             }
1:a95c6db:         }, timeout));
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void setUp() throws Exception {
1:a95c6db:         super.setUp();
1:a95c6db: 
1:a95c6db:         unhandeledExceptions.clear();
1:a95c6db:         Thread.setDefaultUncaughtExceptionHandler(this);
1:a95c6db:         
1:a95c6db:         // Setup n brokers
1:a95c6db:         for (int i = 0; i < BROKER_COUNT; i++) {
1:a95c6db:             createBroker(new URI("broker:(tcp://localhost:6161" + i + ")/Broker" + i + "?persistent=false&useJmx=true"));
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         consumerMap = new LinkedHashMap<String, MessageConsumer>();
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     @Override
1:a95c6db:     protected void configureBroker(BrokerService brokerService) {
1:a95c6db:         PolicyEntry policyEntry = new PolicyEntry();
1:a95c6db:         policyEntry.setExpireMessagesPeriod(0);
1:a95c6db:         PolicyMap policyMap = new PolicyMap();
1:a95c6db:         policyMap.setDefaultEntry(policyEntry);
1:a95c6db:         brokerService.setDestinationPolicy(policyMap);
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void uncaughtException(Thread t, Throwable e) {
1:a95c6db:         synchronized(unhandeledExceptions) {
1:a95c6db:             unhandeledExceptions.put(t,e);
1:a95c6db:         }
1:a95c6db:     }
1:a95c6db: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:82c9f95
/////////////////////////////////////////////////////////////////////////
1:     public void testMigratingConsumerSelectorAwareTrue() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!duplex) bridge("Broker1", "Broker0");
1: 
1:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:         conditionalNetworkBridgeFilterFactory.setSelectorAware(true);
1:         brokers.get("Broker1").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1: 
1:         startAllBrokers();
1:         this.waitForBridgeFormation();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1:         sendMessages("Broker0", dest, 1);
1: 
1:         assertExactMessageCount("Broker0", dest, 1, TIMEOUT);
1: 
1:         MessageConsumer messageConsumerNoMatch = createConsumer("Broker1", dest, "DoNotConsume = 'true'");
1: 
1:         assertExactConsumersConnect("Broker0", dest, 1, TIMEOUT);
1:         assertExactConsumersConnect("Broker1", dest, 1, TIMEOUT);
1: 
1:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1: 
1:         // now consume the message
1:         final String brokerId = "Broker0";
1:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1: 
1:         assertExactConsumersConnect("Broker0", dest, 2, TIMEOUT);
1:         assertExactConsumersConnect("Broker1", dest, 2, TIMEOUT);
1: 
1: 
1:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:             }
1:         }));
1:         messageConsumer.close();
1:     }
1: 
1:     public void testMigratingConsumerSelectorAwareFalse() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!duplex) bridge("Broker1", "Broker0");
1: 
1:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:         conditionalNetworkBridgeFilterFactory.setSelectorAware(false);
1:         brokers.get("Broker1").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1: 
1:         startAllBrokers();
1:         this.waitForBridgeFormation();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1:         sendMessages("Broker0", dest, 1);
1: 
1:         assertExactMessageCount("Broker0", dest, 1, TIMEOUT);
1: 
1:         MessageConsumer messageConsumerNoMatch = createConsumer("Broker1", dest, "DoNotConsume = 'true'");
1: 
1:         assertExactConsumersConnect("Broker0", dest, 1, TIMEOUT);
1:         assertExactConsumersConnect("Broker1", dest, 1, TIMEOUT);
1: 
1:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1: 
1:         // now try consume the message
1:         final String brokerId = "Broker0";
1:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1: 
1:         assertExactConsumersConnect("Broker0", dest, 2, TIMEOUT);
1:         assertExactConsumersConnect("Broker1", dest, 2, TIMEOUT);
1: 
1:         assertExactMessageCount("Broker1", dest, 1, TIMEOUT);
1:         assertExactMessageCount("Broker0", dest, 0, TIMEOUT);
1: 
1:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 0;
1:             }
1:         }));
1:         messageConsumer.close();
1:     }
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.lang.Thread.UncaughtExceptionHandler;
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import junit.framework.Test;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4607Test extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4607Test.class);
1: 
1:     public static final int BROKER_COUNT = 3;
1:     public static final int CONSUMER_COUNT = 1;
1:     public static final int MESSAGE_COUNT = 0;
1:     public static final boolean CONDUIT = true;
1:     public static final int TIMEOUT = 20000;
1: 
1:     public boolean duplex = true;
1:     protected Map<String, MessageConsumer> consumerMap;
1:     Map<Thread, Throwable> unhandeledExceptions = new HashMap<Thread, Throwable>();
1: 
1:     private void assertNoUnhandeledExceptions() {
1:         for( Entry<Thread, Throwable> e: unhandeledExceptions.entrySet()) {
1:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:         }
1:         assertTrue("There are no unhandelled exceptions, see: log for detail on: " + unhandeledExceptions,
1:                 unhandeledExceptions.isEmpty());
1:     }
1: 
1:     public NetworkConnector bridge(String from, String to) throws Exception {
1:         NetworkConnector networkConnector = bridgeBrokers(from, to, true, -1, CONDUIT);
1:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:         networkConnector.setConsumerTTL(1);
1:         networkConnector.setDuplex(duplex);
1:         return networkConnector;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(AMQ4607Test.class);
1:     }
1: 
1:     public void initCombos() {
1:         addCombinationValues("duplex", new Boolean[]{Boolean.TRUE, Boolean.FALSE});
1:     }
1: 
1:     public void testMigratingConsumer() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!duplex) bridge("Broker1", "Broker0");
1: 
1:         bridge("Broker1", "Broker2");
1:         if (!duplex) bridge("Broker2", "Broker1");
1: 
1:         bridge("Broker0", "Broker2");
1:         if (!duplex) bridge("Broker2", "Broker0");
1: 
1:         startAllBrokers();
1:         this.waitForBridgeFormation();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1:         sendMessages("Broker0", dest, 1);
1: 
1:         for (int i=0; i< BROKER_COUNT; i++) {
1:             MessageConsumer messageConsumer = createConsumer("Broker" + i, dest, "DoNotConsume = 'true'");
1: 
1:             for (int J = 0; J < BROKER_COUNT; J++) {
1:                 assertExactConsumersConnect("Broker" + J, dest, CONSUMER_COUNT, TIMEOUT);
1:             }
1: 
1:             assertNoUnhandeledExceptions();
1: 
1:             assertExactMessageCount("Broker" + i, dest, 1, TIMEOUT);
1: 
1:             messageConsumer.close();
1:             LOG.info("Check for no consumers..");
1:             for (int J = 0; J < BROKER_COUNT; J++) {
1:         	    assertExactConsumersConnect("Broker" + J, dest, 0, TIMEOUT);
1:             }
1:         }
1: 
1:         // now consume the message
1:         final String brokerId = "Broker2";
1:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:             }
1:         }));
1:         messageConsumer.close();
1: 
1:     }
1: 
1:     public void testMigratingConsumerFullCircle() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!duplex) bridge("Broker1", "Broker0");
1: 
1:         bridge("Broker1", "Broker2");
1:         if (!duplex) bridge("Broker2", "Broker1");
1: 
1:         bridge("Broker0", "Broker2");
1:         if (!duplex) bridge("Broker2", "Broker0");
1: 
1:         // allow full loop, immediate replay back to 0 from 2
1:         ConditionalNetworkBridgeFilterFactory conditionalNetworkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:         conditionalNetworkBridgeFilterFactory.setReplayDelay(0);
1:         conditionalNetworkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:         brokers.get("Broker2").broker.getDestinationPolicy().getDefaultEntry().setNetworkBridgeFilterFactory(conditionalNetworkBridgeFilterFactory);
1:         startAllBrokers();
1:         this.waitForBridgeFormation();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         sendMessages("Broker0", dest, 1);
1: 
1:         for (int i=0; i< BROKER_COUNT; i++) {
1:             MessageConsumer messageConsumer = createConsumer("Broker" + i, dest, "DoNotConsume = 'true'");
1: 
1:             for (int J = 0; J < BROKER_COUNT; J++) {
1:                 assertExactConsumersConnect("Broker" + J, dest, CONSUMER_COUNT, TIMEOUT);
1:             }
1: 
1:             assertNoUnhandeledExceptions();
1: 
1:             // validate the message has been forwarded
1:             assertExactMessageCount("Broker" + i, dest, 1, TIMEOUT);
1: 
1:             messageConsumer.close();
1:             LOG.info("Check for no consumers..");
1:             for (int J = 0; J < BROKER_COUNT; J++) {
1:         	    assertExactConsumersConnect("Broker" + J, dest, 0, TIMEOUT);
1:             }
1:         }
1: 
1:         // now consume the message from the origin
1:         LOG.info("Consume from origin...");
1:         final String brokerId = "Broker0";
1:         MessageConsumer messageConsumer = createConsumer(brokerId, dest);
1:         assertTrue("Consumed ok", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokers.get(brokerId).allMessages.getMessageIds().size() == 1;
1:             }
1:         }));
1:         messageConsumer.close();
1: 
1:     }
1: 
1:     protected void assertExactMessageCount(final String brokerName, Destination destination, final int count, long timeout) throws Exception {
1:         ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
1:         final QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:         assertTrue("Excepected queue depth: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long currentCount = queueViewMBean.getQueueSize();
1:                 LOG.info("On " + brokerName + " current queue size for " + queueViewMBean + ", " + currentCount);
1:                 if (count != currentCount) {
1:                     LOG.info("Sub IDs: " + Arrays.asList(queueViewMBean.getSubscriptions()));
1:                 }
1:                 return currentCount == count;
1:             }
1:         }, timeout));
1:     }
1: 
1:     protected void assertExactConsumersConnect(final String brokerName, Destination destination, final int count, long timeout) throws Exception {
1:         final ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
1:         assertTrue("Excepected consumers count: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:                     long currentCount = queueViewMBean.getConsumerCount();
1:                     LOG.info("On " + brokerName + " current consumer count for " + queueViewMBean + ", " + currentCount);
1:                     if (count != currentCount) {
1:                         LOG.info("Sub IDs: " + Arrays.asList(queueViewMBean.getSubscriptions()));
1:                     }
1:                     return currentCount == count;
1:                 } catch (Exception e) {
1:                     LOG.warn("Unexpected: " + e, e);
1:                     return false;
1:                 }
1:             }
1:         }, timeout));
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         unhandeledExceptions.clear();
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:         
1:         // Setup n brokers
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             createBroker(new URI("broker:(tcp://localhost:6161" + i + ")/Broker" + i + "?persistent=false&useJmx=true"));
1:         }
1: 
1:         consumerMap = new LinkedHashMap<String, MessageConsumer>();
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService brokerService) {
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(0);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policyEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     public void uncaughtException(Thread t, Throwable e) {
1:         synchronized(unhandeledExceptions) {
1:             unhandeledExceptions.put(t,e);
1:         }
1:     }
1: }
============================================================================