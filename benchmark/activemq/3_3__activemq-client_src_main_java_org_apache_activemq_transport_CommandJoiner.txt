1:8704338: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8704338:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8704338:  *
1:8704338:  * Unless required by applicable law or agreed to in writing, software
1:8704338:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8704338:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8704338:  * See the License for the specific language governing permissions and
1:8704338:  * limitations under the License.
1:8704338:  */
1:8704338: package org.apache.activemq.transport;
1:72b382d: 
1:f451ad0: import java.io.ByteArrayOutputStream;
1:f451ad0: import java.io.DataInputStream;
1:f451ad0: import java.io.IOException;
1:f451ad0: 
1:8704338: import org.apache.activemq.command.Command;
1:8704338: import org.apache.activemq.command.LastPartialCommand;
1:8704338: import org.apache.activemq.command.PartialCommand;
1:8704338: import org.apache.activemq.openwire.OpenWireFormat;
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
10:8704338: 
1:8704338: /**
1:c2fc820:  * Joins together of partial commands which were split into individual chunks of
1:c2fc820:  * data.
1:0bbc0ac:  * 
1:8704338:  * 
1:8704338:  */
1:8704338: public class CommandJoiner extends TransportFilter {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CommandJoiner.class);
1:c2fc820: 
1:8704338:     private ByteArrayOutputStream out = new ByteArrayOutputStream();
1:8704338:     private OpenWireFormat wireFormat;
1:8704338: 
1:8704338:     public CommandJoiner(Transport next, OpenWireFormat wireFormat) {
1:8704338:         super(next);
1:8704338:         this.wireFormat = wireFormat;
1:c2fc820:     }
1:c2fc820: 
1:9ca56a0:     public void onCommand(Object o) {
1:74a7a8b:         Command command = (Command)o;
1:8704338:         byte type = command.getDataStructureType();
1:f3ef1a9:         if (type == PartialCommand.DATA_STRUCTURE_TYPE || type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
1:74a7a8b:             PartialCommand header = (PartialCommand)command;
1:8704338:             byte[] partialData = header.getData();
1:c2fc820:             try {
1:8704338:                 out.write(partialData);
1:74a7a8b:             } catch (IOException e) {
1:c2fc820:                 getTransportListener().onException(e);
1:c2fc820:             }
1:f3ef1a9:             if (type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
1:f3ef1a9:                 try {
1:f3ef1a9:                     byte[] fullData = out.toByteArray();
1:f3ef1a9:                     out.reset();
1:f3ef1a9:                     DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(fullData));
1:74a7a8b:                     Command completeCommand = (Command)wireFormat.unmarshal(dataIn);
1:f3ef1a9: 
1:74a7a8b:                     LastPartialCommand lastCommand = (LastPartialCommand)command;
1:f3ef1a9:                     lastCommand.configure(completeCommand);
1:f3ef1a9: 
1:f3ef1a9:                     getTransportListener().onCommand(completeCommand);
1:74a7a8b:                 } catch (IOException e) {
1:fc00993:                     LOG.warn("Failed to unmarshal partial command: " + command);
1:f3ef1a9:                     getTransportListener().onException(e);
1:f3ef1a9:                 }
1:f3ef1a9:             }
1:74a7a8b:         } else {
1:8704338:             getTransportListener().onCommand(command);
1:c2fc820:         }
8:8704338:     }
1:72b382d: 
1:8704338:     public void stop() throws Exception {
1:8704338:         super.stop();
1:72b382d:         out = null;
1:8704338:     }
1:c2fc820: 
1:8704338:     public String toString() {
1:8704338:         return next.toString();
1:8704338:     }
1:8704338: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CommandJoiner.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Failed to unmarshal partial command: " + command);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         Command command = (Command)o;
1:             PartialCommand header = (PartialCommand)command;
1:             } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:                     Command completeCommand = (Command)wireFormat.unmarshal(dataIn);
1:                     LastPartialCommand lastCommand = (LastPartialCommand)command;
1:                 } catch (IOException e) {
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1:     public void onCommand(Object o) {
0:     	Command command = (Command) o;
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: 
0: import org.apache.activeio.util.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CommandJoiner.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1:         if (type == PartialCommand.DATA_STRUCTURE_TYPE || type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
1:                 try {
1:                     byte[] fullData = out.toByteArray();
1:                     out.reset();
1:                     DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(fullData));
0:                     Command completeCommand = (Command) wireFormat.unmarshal(dataIn);
1: 
0:                     LastPartialCommand lastCommand = (LastPartialCommand) command;
1:                     lastCommand.configure(completeCommand);
1: 
1:                     getTransportListener().onCommand(completeCommand);
1:                 }
0:                 catch (IOException e) {
0:                     log.warn("Failed to unmarshal partial command: " + command);
1:                     getTransportListener().onException(e);
1:                 }
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(CommandJoiner.class);
/////////////////////////////////////////////////////////////////////////
0:                 out.reset();
1:                 
0:                 LastPartialCommand lastCommand = (LastPartialCommand) command;
0:                 lastCommand.configure(completeCommand);
1:                 
0:                 log.warn("Failed to unmarshal partial command: " + command);
/////////////////////////////////////////////////////////////////////////
1:         out = null;
commit:95ab99c
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteArrayInputStream;
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
1:  * Joins together of partial commands which were split into individual chunks of
1:  * data.
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (type == PartialCommand.DATA_STRUCTURE_TYPE) {
1:             }
0:             catch (IOException e) {
1:                 getTransportListener().onException(e);
1:             }
1:         }
0:         else if (type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
1:             try {
0:                 byte[] fullData = out.toByteArray();
0:                 Command completeCommand = (Command) wireFormat.unmarshal(new DataInputStream(new ByteArrayInputStream(fullData)));
0:                 completeCommand.setCommandId(command.getCommandId());
0:                 completeCommand.setResponseRequired(command.isResponseRequired());
0:                 resetBuffer();
0:                 getTransportListener().onCommand(completeCommand);
/////////////////////////////////////////////////////////////////////////
1: 
commit:8704338
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.LastPartialCommand;
1: import org.apache.activemq.command.PartialCommand;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.IOException;
1: 
1: 
1: /**
0:  * Joins together of partial commands which were split into individual chunks of data.
1:  * 
0:  * @version $Revision$
1:  */
1: public class CommandJoiner extends TransportFilter {
1:     
1:     private ByteArrayOutputStream out = new ByteArrayOutputStream();
1:     private OpenWireFormat wireFormat;
1: 
1:     public CommandJoiner(Transport next, OpenWireFormat wireFormat) {
1:         super(next);
1:         this.wireFormat = wireFormat;
1:     }
1:     
0:     public void onCommand(Command command) {
1:         byte type = command.getDataStructureType();
0:         if (type == PartialCommand.DATA_STRUCTURE_TYPE || type == LastPartialCommand.DATA_STRUCTURE_TYPE) {
0:             PartialCommand header = (PartialCommand) command;
1:             byte[] partialData = header.getData();
0:             try {
1:                 out.write(partialData);
1: 
0:                 if (header.isLastPart()) {
0:                     byte[] fullData = out.toByteArray();
0:                     Command completeCommand = (Command) wireFormat.unmarshal(new DataInputStream(new ByteArrayInputStream(fullData)));
0:                     resetBuffer();
0:                     getTransportListener().onCommand(completeCommand);
1:                 }
1:             }
0:             catch (IOException e) {
0:                 getTransportListener().onException(e);
1:             }
1:         }
0:         else {
1:             getTransportListener().onCommand(command);
1:         }
1:     }
1:     
1:     public void stop() throws Exception {
1:         super.stop();
0:         resetBuffer();
1:     }
1: 
1:     public String toString() {
1:         return next.toString();
1:     }
1: 
0:     protected void resetBuffer() {
0:         out.reset();
1:     }
1: }
============================================================================