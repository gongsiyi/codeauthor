1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq.broker;
1:d29ca2a: 
1:4d9f708: import java.io.File;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.spring.SpringConsumer;
1:d29ca2a: import org.apache.activemq.spring.SpringProducer;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: import org.springframework.context.support.AbstractApplicationContext;
1:d29ca2a: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:d29ca2a: 
1:d29ca2a: public class SpringTest extends TestCase {
1:d29ca2a:     
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SpringTest.class);
1:d29ca2a: 
1:d29ca2a:     protected AbstractApplicationContext context;
1:d29ca2a:     protected SpringConsumer consumer;
1:d29ca2a:     protected SpringProducer producer;
1:d29ca2a: 
1:d29ca2a:     public void testSenderWithSpringXml() throws Exception {
1:d29ca2a:         assertSenderConfig("org/apache/activemq/broker/spring.xml");
1:d29ca2a:     }
1:d29ca2a:     /**
1:d29ca2a:      * assert method that is used by all the test method to send and receive messages
1:d29ca2a:      * based on each spring configuration.
1:d29ca2a:      *
1:d29ca2a:      * @param config
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected void assertSenderConfig(String config) throws Exception {
1:d29ca2a:         context = new ClassPathXmlApplicationContext(config);
1:d29ca2a: 
1:d29ca2a:         consumer = (SpringConsumer) context.getBean("consumer");
1:d29ca2a:         assertTrue("Found a valid consumer", consumer != null);
1:d29ca2a: 
1:d29ca2a:         consumer.start();
1:d29ca2a: 
1:d29ca2a:         producer = (SpringProducer) context.getBean("producer");
1:d29ca2a:         assertTrue("Found a valid producer", producer != null);
1:d29ca2a: 
1:d29ca2a:         consumer.flushMessages();
1:d29ca2a:         producer.start();
1:d29ca2a: 
1:d29ca2a:         // lets sleep a little to give the JMS time to dispatch stuff
1:d29ca2a:         consumer.waitForMessagesToArrive(producer.getMessageCount());
1:d29ca2a: 
1:d29ca2a:         // now lets check that the consumer has received some messages
1:d29ca2a:         List messages = consumer.flushMessages();
1:fc00993:         LOG.info("Consumer has received messages....");
1:d29ca2a:         for (Iterator iter = messages.iterator(); iter.hasNext();) {
1:d29ca2a:             Object message = iter.next();
1:fc00993:             LOG.info("Received: " + message);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         assertEquals("Message count", producer.getMessageCount(), messages.size());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Clean up method.
1:d29ca2a:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (consumer != null) {
1:d29ca2a:             consumer.stop();
1:d29ca2a:         }
1:d29ca2a:         if (producer != null) {
1:d29ca2a:             producer.stop();
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         if (context != null) {
1:d29ca2a:             context.destroy();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:4d9f708:     protected void setUp() throws Exception {
1:4d9f708:         if (System.getProperty("basedir") == null) {
1:4d9f708:             File file = new File(".");
1:4d9f708:             System.setProperty("basedir", file.getAbsolutePath());
1:4d9f708:         }
1:4d9f708:         super.setUp();
1:4d9f708:     }
1:4d9f708: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Gary Tully
-------------------------------------------------------------------------------
commit:4d9f708
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws Exception {
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1:         super.setUp();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SpringTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SpringTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consumer has received messages....");
1:             LOG.info("Received: " + message);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.spring.SpringConsumer;
1: import org.apache.activemq.spring.SpringProducer;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: public class SpringTest extends TestCase {
1:     
0:     private static final Log log = LogFactory.getLog(SpringTest.class);
1: 
1:     protected AbstractApplicationContext context;
1:     protected SpringConsumer consumer;
1:     protected SpringProducer producer;
1: 
1:     public void testSenderWithSpringXml() throws Exception {
1:         assertSenderConfig("org/apache/activemq/broker/spring.xml");
1:     }
1:     /**
1:      * assert method that is used by all the test method to send and receive messages
1:      * based on each spring configuration.
1:      *
1:      * @param config
1:      * @throws Exception
1:      */
1:     protected void assertSenderConfig(String config) throws Exception {
1:         context = new ClassPathXmlApplicationContext(config);
1: 
1:         consumer = (SpringConsumer) context.getBean("consumer");
1:         assertTrue("Found a valid consumer", consumer != null);
1: 
1:         consumer.start();
1: 
1:         producer = (SpringProducer) context.getBean("producer");
1:         assertTrue("Found a valid producer", producer != null);
1: 
1:         consumer.flushMessages();
1:         producer.start();
1: 
1:         // lets sleep a little to give the JMS time to dispatch stuff
1:         consumer.waitForMessagesToArrive(producer.getMessageCount());
1: 
1:         // now lets check that the consumer has received some messages
1:         List messages = consumer.flushMessages();
0:         log.info("Consumer has received messages....");
1:         for (Iterator iter = messages.iterator(); iter.hasNext();) {
1:             Object message = iter.next();
0:             log.info("Received: " + message);
1:         }
1: 
1:         assertEquals("Message count", producer.getMessageCount(), messages.size());
1:     }
1: 
1:     /**
1:      * Clean up method.
1:      *
1:      * @throws Exception
1:      */
1:     protected void tearDown() throws Exception {
1:         if (consumer != null) {
1:             consumer.stop();
1:         }
1:         if (producer != null) {
1:             producer.stop();
1:         }
1: 
1:         if (context != null) {
1:             context.destroy();
1:         }
1:     }
1: 
1: }
============================================================================