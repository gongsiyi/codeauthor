5:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
4:d29ca2a:  */
1:c8d74e7: package org.apache.activemq;
1:d29ca2a: 
1:82d60e1: import java.io.Serializable;
1:4c4f86a: import java.util.Random;
1:ac8c8d1: import org.apache.activemq.filter.DestinationMapEntry;
1:ac8c8d1: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:ac8c8d1:  * Configuration options for a messageConsumer used to control how messages are re-delivered when they
1:c5b3802:  * are rolled back.
1:ac8c8d1:  * May be used server side on a per destination basis via the Broker RedeliveryPlugin
1:b3001f2:  *
1:b3001f2:  * @org.apache.xbean.XBean element="redeliveryPolicy"
1:b0c2a40:  *
1:d29ca2a:  */
1:ac8c8d1: public class RedeliveryPolicy extends DestinationMapEntry implements Cloneable, Serializable {
1:d29ca2a: 
1:230a86c:     public static final int NO_MAXIMUM_REDELIVERIES = -1;
1:fc15f13:     public static final int DEFAULT_MAXIMUM_REDELIVERIES = 6;
1:fc15f13: 
1:230a86c:     private static Random randomNumberGenerator;
1:230a86c: 
1:4c4f86a:     // +/-15% for a 30% spread -cgs
1:ac8c8d1:     protected double collisionAvoidanceFactor = 0.15d;
1:fc15f13:     protected int maximumRedeliveries = DEFAULT_MAXIMUM_REDELIVERIES;
1:ac8c8d1:     protected long maximumRedeliveryDelay = -1;
1:ac8c8d1:     protected long initialRedeliveryDelay = 1000L;
1:ac8c8d1:     protected boolean useCollisionAvoidance;
1:ac8c8d1:     protected boolean useExponentialBackOff;
1:ac8c8d1:     protected double backOffMultiplier = 5.0;
1:ac8c8d1:     protected long redeliveryDelay = initialRedeliveryDelay;
1:b6bca39:     protected boolean preDispatchCheck = true;
1:d29ca2a: 
1:d29ca2a:     public RedeliveryPolicy() {
1:d29ca2a:     }
1:d29ca2a: 
1:c5b3802:     public RedeliveryPolicy copy() {
1:c5b3802:         try {
1:230a86c:             return (RedeliveryPolicy)clone();
1:230a86c:         } catch (CloneNotSupportedException e) {
1:c5b3802:             throw new RuntimeException("Could not clone: " + e, e);
1:20832f1:         }
1:d29ca2a:     }
1:d29ca2a: 
1:487f2cc:     public double getBackOffMultiplier() {
1:d29ca2a:         return backOffMultiplier;
1:d29ca2a:     }
1:4c4f86a: 
1:487f2cc:     public void setBackOffMultiplier(double backOffMultiplier) {
1:d29ca2a:         this.backOffMultiplier = backOffMultiplier;
1:d29ca2a:     }
1:d29ca2a: 
1:4c4f86a:     public short getCollisionAvoidancePercent() {
1:230a86c:         return (short)Math.round(collisionAvoidanceFactor * 100);
1:4c4f86a:     }
1:4c4f86a: 
1:4c4f86a:     public void setCollisionAvoidancePercent(short collisionAvoidancePercent) {
1:4c4f86a:         this.collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d;
1:4c4f86a:     }
1:4c4f86a: 
1:d29ca2a:     public long getInitialRedeliveryDelay() {
1:d29ca2a:         return initialRedeliveryDelay;
1:d29ca2a:     }
1:4c4f86a: 
1:d29ca2a:     public void setInitialRedeliveryDelay(long initialRedeliveryDelay) {
1:d29ca2a:         this.initialRedeliveryDelay = initialRedeliveryDelay;
1:d29ca2a:     }
1:d29ca2a: 
1:f29c801:     public long getMaximumRedeliveryDelay() {
1:f29c801:         return maximumRedeliveryDelay;
1:f29c801:     }
1:f29c801: 
1:f29c801:     public void setMaximumRedeliveryDelay(long maximumRedeliveryDelay) {
1:f29c801:         this.maximumRedeliveryDelay = maximumRedeliveryDelay;
1:f29c801:     }
1:f29c801: 
1:d29ca2a:     public int getMaximumRedeliveries() {
1:d29ca2a:         return maximumRedeliveries;
1:d29ca2a:     }
6:c5b3802: 
1:d29ca2a:     public void setMaximumRedeliveries(int maximumRedeliveries) {
1:d29ca2a:         this.maximumRedeliveries = maximumRedeliveries;
1:d29ca2a:     }
1:d29ca2a: 
1:c23f9e6:     public long getNextRedeliveryDelay(long previousDelay) {
1:1d71cb7:         long nextDelay = redeliveryDelay;
1:4c4f86a: 
1:33b88d3:         if (previousDelay > 0 && useExponentialBackOff && backOffMultiplier > 1) {
1:c23f9e6:             nextDelay = (long) (previousDelay * backOffMultiplier);
1:f29c801:             if(maximumRedeliveryDelay != -1 && nextDelay > maximumRedeliveryDelay) {
1:f29c801:                 // in case the user made max redelivery delay less than redelivery delay for some reason.
1:f29c801:                 nextDelay = Math.max(maximumRedeliveryDelay, redeliveryDelay);
1:f29c801:             }
1:4c4f86a:         }
1:4c4f86a: 
1:4c4f86a:         if (useCollisionAvoidance) {
1:2a3f9e3:             /*
1:4c4f86a:              * First random determines +/-, second random determines how far to
1:4c4f86a:              * go in that direction. -cgs
1:d29ca2a:              */
1:2a3f9e3:             Random random = getRandomNumberGenerator();
1:2a3f9e3:             double variance = (random.nextBoolean() ? collisionAvoidanceFactor : -collisionAvoidanceFactor) * random.nextDouble();
1:c23f9e6:             nextDelay += nextDelay * variance;
1:4c4f86a:         }
1:4c4f86a: 
1:c23f9e6:         return nextDelay;
1:4c4f86a:     }
1:4c4f86a: 
1:4c4f86a:     public boolean isUseCollisionAvoidance() {
1:4c4f86a:         return useCollisionAvoidance;
1:4c4f86a:     }
1:4c4f86a: 
1:4c4f86a:     public void setUseCollisionAvoidance(boolean useCollisionAvoidance) {
1:4c4f86a:         this.useCollisionAvoidance = useCollisionAvoidance;
1:4c4f86a:     }
1:4c4f86a: 
1:d29ca2a:     public boolean isUseExponentialBackOff() {
1:d29ca2a:         return useExponentialBackOff;
1:d29ca2a:     }
1:c5b3802: 
1:d29ca2a:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:d29ca2a:         this.useExponentialBackOff = useExponentialBackOff;
1:d29ca2a:     }
1:d29ca2a: 
1:2a3f9e3:     protected static synchronized Random getRandomNumberGenerator() {
1:4c4f86a:         if (randomNumberGenerator == null) {
1:4c4f86a:             randomNumberGenerator = new Random();
1:d29ca2a:         }
1:2a3f9e3:         return randomNumberGenerator;
1:d29ca2a:     }
1:4c4f86a: 
1:c23f9e6:     public void setRedeliveryDelay(long redeliveryDelay) {
1:c23f9e6:         this.redeliveryDelay = redeliveryDelay;
1:c23f9e6:     }
1:c23f9e6: 
1:c23f9e6:     public long getRedeliveryDelay() {
1:c23f9e6:         return redeliveryDelay;
1:c23f9e6:     }
1:ac8c8d1: 
1:ac8c8d1:     @Override
1:ac8c8d1:     public String toString() {
1:ac8c8d1:         return IntrospectionSupport.toString(this, DestinationMapEntry.class, null);
1:ac8c8d1:     }
1:b6bca39: 
1:b6bca39:     public void setPreDispatchCheck(boolean preDispatchCheck) {
1:b6bca39:         this.preDispatchCheck = preDispatchCheck;
1:b6bca39:     }
1:b6bca39: 
1:b6bca39:     public boolean isPreDispatchCheck() {
1:b6bca39:         return preDispatchCheck;
1:b6bca39:     }
1:4c4f86a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b6bca39
/////////////////////////////////////////////////////////////////////////
1:     protected boolean preDispatchCheck = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setPreDispatchCheck(boolean preDispatchCheck) {
1:         this.preDispatchCheck = preDispatchCheck;
1:     }
1: 
1:     public boolean isPreDispatchCheck() {
1:         return preDispatchCheck;
1:     }
commit:1d71cb7
/////////////////////////////////////////////////////////////////////////
1:         long nextDelay = redeliveryDelay;
commit:33b88d3
/////////////////////////////////////////////////////////////////////////
0:         long nextDelay = redeliveryDelay;
1:         if (previousDelay > 0 && useExponentialBackOff && backOffMultiplier > 1) {
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:20832f1
/////////////////////////////////////////////////////////////////////////
0:         long nextDelay = initialRedeliveryDelay;
0:         if (nextDelay == 0) {
0:             nextDelay = redeliveryDelay;
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc15f13
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_MAXIMUM_REDELIVERIES = 6;
1: 
1:     protected int maximumRedeliveries = DEFAULT_MAXIMUM_REDELIVERIES;
commit:ac8c8d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.util.IntrospectionSupport;
1:  * Configuration options for a messageConsumer used to control how messages are re-delivered when they
1:  * May be used server side on a per destination basis via the Broker RedeliveryPlugin
1: public class RedeliveryPolicy extends DestinationMapEntry implements Cloneable, Serializable {
1:     protected double collisionAvoidanceFactor = 0.15d;
0:     protected int maximumRedeliveries = 6;
1:     protected long maximumRedeliveryDelay = -1;
1:     protected long initialRedeliveryDelay = 1000L;
1:     protected boolean useCollisionAvoidance;
1:     protected boolean useExponentialBackOff;
1:     protected double backOffMultiplier = 5.0;
1:     protected long redeliveryDelay = initialRedeliveryDelay;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return IntrospectionSupport.toString(this, DestinationMapEntry.class, null);
1:     }
commit:c23f9e6
/////////////////////////////////////////////////////////////////////////
0:     private long redeliveryDelay = initialRedeliveryDelay;
/////////////////////////////////////////////////////////////////////////
1:     public long getNextRedeliveryDelay(long previousDelay) {
0:         long nextDelay;
0:             nextDelay = redeliveryDelay;
1:             nextDelay = (long) (previousDelay * backOffMultiplier);
0:             nextDelay = previousDelay;
/////////////////////////////////////////////////////////////////////////
1:             nextDelay += nextDelay * variance;
1:         return nextDelay;
/////////////////////////////////////////////////////////////////////////
1:     public void setRedeliveryDelay(long redeliveryDelay) {
1:         this.redeliveryDelay = redeliveryDelay;
1:     }
1: 
1:     public long getRedeliveryDelay() {
1:         return redeliveryDelay;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public static final int NO_MAXIMUM_REDELIVERIES = -1;
1:     private static Random randomNumberGenerator;
1: 
0:     private boolean useCollisionAvoidance;
0:     private boolean useExponentialBackOff;
/////////////////////////////////////////////////////////////////////////
1:             return (RedeliveryPolicy)clone();
1:         } catch (CloneNotSupportedException e) {
/////////////////////////////////////////////////////////////////////////
1:         return (short)Math.round(collisionAvoidanceFactor * 100);
commit:da5139c
/////////////////////////////////////////////////////////////////////////
0:     protected int maximumRedeliveries = 6;
commit:b3001f2
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="redeliveryPolicy"
1:  * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.command;
1: 
1: /**
0:  * Configuration options used to control how messages are re-delivered when
0:  * they are rolled back.
1:  *  
0:  * @openwire:marshaller
0:  * @version $Revision: 1.11 $
1:  */
0: public class RedeliveryPolicy implements DataStructure {
1:     
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.REDELIVERY_POLICY;
1:     
0:     protected int maximumRedeliveries = 5;
0:     protected long initialRedeliveryDelay = 1000L;
0:     protected boolean useExponentialBackOff = false;
0:     protected short backOffMultiplier = 5;
1:     
1:     public RedeliveryPolicy() {        
1:     }    
1:     
0:     public byte getDataStructureType() {
0:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1 cache=false
1:      */
0:     public short getBackOffMultiplier() {
1:         return backOffMultiplier;
1:     }
0:     public void setBackOffMultiplier(short backOffMultiplier) {
1:         this.backOffMultiplier = backOffMultiplier;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1 cache=false
1:      */
1:     public long getInitialRedeliveryDelay() {
1:         return initialRedeliveryDelay;
1:     }
1:     public void setInitialRedeliveryDelay(long initialRedeliveryDelay) {
1:         this.initialRedeliveryDelay = initialRedeliveryDelay;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1 cache=false
1:      */
1:     public int getMaximumRedeliveries() {
1:         return maximumRedeliveries;
1:     }
1:     public void setMaximumRedeliveries(int maximumRedeliveries) {
1:         this.maximumRedeliveries = maximumRedeliveries;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1 cache=false
1:      */
1:     public boolean isUseExponentialBackOff() {
1:         return useExponentialBackOff;
1:     }
1:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:         this.useExponentialBackOff = useExponentialBackOff;
1:     }
1: 
0:     public boolean isMarshallAware() {
0:         return false;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f29c801
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:     private long maximumRedeliveryDelay = -1;
/////////////////////////////////////////////////////////////////////////
1:     public long getMaximumRedeliveryDelay() {
1:         return maximumRedeliveryDelay;
1:     }
1: 
1:     public void setMaximumRedeliveryDelay(long maximumRedeliveryDelay) {
1:         this.maximumRedeliveryDelay = maximumRedeliveryDelay;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             if(maximumRedeliveryDelay != -1 && nextDelay > maximumRedeliveryDelay) {
1:                 // in case the user made max redelivery delay less than redelivery delay for some reason.
1:                 nextDelay = Math.max(maximumRedeliveryDelay, redeliveryDelay);
1:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:487f2cc
/////////////////////////////////////////////////////////////////////////
0:     private double backOffMultiplier = 5.0;
/////////////////////////////////////////////////////////////////////////
1:     public double getBackOffMultiplier() {
1:     public void setBackOffMultiplier(double backOffMultiplier) {
/////////////////////////////////////////////////////////////////////////
0:             redeliveryDelay = (long) (previousDelay * backOffMultiplier);
commit:8f85fdc
/////////////////////////////////////////////////////////////////////////
0:     private double collisionAvoidanceFactor = 0.15d;
0:     private int maximumRedeliveries = 6;
0:     private long initialRedeliveryDelay = 1000L;
0:     private static Random randomNumberGenerator;
0:     private boolean useCollisionAvoidance = false;
0:     private boolean useExponentialBackOff = false;
0:     private short backOffMultiplier = 5;
author:James Strachan
-------------------------------------------------------------------------------
commit:2a3f9e3
/////////////////////////////////////////////////////////////////////////
1:             /*
1:             Random random = getRandomNumberGenerator();
1:             double variance = (random.nextBoolean() ? collisionAvoidanceFactor : -collisionAvoidanceFactor) * random.nextDouble();
/////////////////////////////////////////////////////////////////////////
1:     protected static synchronized Random getRandomNumberGenerator() {
1:         return randomNumberGenerator;
commit:4c4f86a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     // +/-15% for a 30% spread -cgs
0:     protected double collisionAvoidanceFactor = 0.15d;
0:     protected static Random randomNumberGenerator;
0:     protected boolean useCollisionAvoidance = false;
/////////////////////////////////////////////////////////////////////////
1:     public short getCollisionAvoidancePercent() {
0:         return (short) Math.round(collisionAvoidanceFactor * 100);
1:     }
1: 
1:     public void setCollisionAvoidancePercent(short collisionAvoidancePercent) {
1:         this.collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public long getRedeliveryDelay(long previousDelay) {
0:         long redeliveryDelay;
1: 
0:         if (previousDelay == 0) {
0:             redeliveryDelay = initialRedeliveryDelay;
0:         } else if (useExponentialBackOff && backOffMultiplier > 1) {
0:             redeliveryDelay = previousDelay * backOffMultiplier;
0:         } else {
0:             redeliveryDelay = previousDelay;
1:         }
1: 
1:         if (useCollisionAvoidance) {
1:             if (randomNumberGenerator == null) {
0:                 initRandomNumberGenerator();
1:             }
1: 
0:             /* 
1:              * First random determines +/-, second random determines how far to
1:              * go in that direction. -cgs
0:              */
0:             double variance = (randomNumberGenerator.nextBoolean() ? collisionAvoidanceFactor : -collisionAvoidanceFactor) * randomNumberGenerator.nextDouble();
0:             redeliveryDelay += redeliveryDelay * variance;
1:         }
1: 
0:         return redeliveryDelay;
1:     }
1: 
1:     public boolean isUseCollisionAvoidance() {
1:         return useCollisionAvoidance;
1:     }
1: 
1:     public void setUseCollisionAvoidance(boolean useCollisionAvoidance) {
1:         this.useCollisionAvoidance = useCollisionAvoidance;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected static synchronized void initRandomNumberGenerator() {
0:         if (randomNumberGenerator == null) {
1:             randomNumberGenerator = new Random();
0:         }
0:     }
1: 
commit:c5b3802
/////////////////////////////////////////////////////////////////////////
0:  * Configuration options used to control how messages are re-delivered when they
1:  * are rolled back.
0:  * 
0: public class RedeliveryPolicy implements Cloneable {
1: 
1: 
0:     public RedeliveryPolicy() {
1:     public RedeliveryPolicy copy() {
1:         try {
0:             return (RedeliveryPolicy) clone();
0:         }
0:         catch (CloneNotSupportedException e) {
1:             throw new RuntimeException("Could not clone: " + e, e);
0:         }
0:     }
1: 
1: 
1: 
1: 
1: 
commit:c8d74e7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq;
0: 
0: import org.apache.activemq.command.CommandTypes;
0: import org.apache.activemq.command.DataStructure;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:979c5d5
/////////////////////////////////////////////////////////////////////////
0: 	public static final int NO_MAXIMUM_REDELIVERIES = -1;
0: 	
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:82d60e1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
0: 
0: public class RedeliveryPolicy implements Cloneable, Serializable {
============================================================================