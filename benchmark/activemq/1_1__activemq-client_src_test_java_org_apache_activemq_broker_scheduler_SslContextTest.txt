1:8bb3a77: /**
1:8bb3a77:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8bb3a77:  * contributor license agreements. See the NOTICE file distributed with
1:8bb3a77:  * this work for additional information regarding copyright ownership.
1:8bb3a77:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8bb3a77:  * (the "License"); you may not use this file except in compliance with
1:8bb3a77:  * the License. You may obtain a copy of the License at
1:8bb3a77:  * <p>
1:8bb3a77:  * http://www.apache.org/licenses/LICENSE-2.0
1:8bb3a77:  * <p>
1:8bb3a77:  * Unless required by applicable law or agreed to in writing, software
1:8bb3a77:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8bb3a77:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8bb3a77:  * See the License for the specific language governing permissions and
1:8bb3a77:  * limitations under the License.
1:8bb3a77:  */
1:8bb3a77: 
1:8bb3a77: package org.apache.activemq.broker.scheduler;
1:8bb3a77: 
1:8bb3a77: import org.apache.activemq.broker.SslContext;
1:8bb3a77: import org.junit.Test;
1:8bb3a77: 
1:8bb3a77: import javax.net.ssl.SSLContext;
1:8bb3a77: import java.security.KeyManagementException;
1:8bb3a77: import java.security.NoSuchAlgorithmException;
1:8bb3a77: import java.security.NoSuchProviderException;
1:8bb3a77: import java.util.concurrent.ExecutorService;
1:8bb3a77: import java.util.concurrent.Executors;
1:8bb3a77: import java.util.concurrent.TimeUnit;
1:8bb3a77: 
1:8bb3a77: import static org.junit.Assert.assertEquals;
1:8bb3a77: import static org.junit.Assert.assertTrue;
1:8bb3a77: 
1:8bb3a77: public class SslContextTest {
1:8bb3a77:     SslContext underTest = new SslContext();
1:8bb3a77: 
1:8bb3a77:     @Test
1:8bb3a77:     public void testConcurrentGet() throws Exception {
1:8bb3a77: 
1:8bb3a77:         final int numReps = 100;
1:8bb3a77:         ExecutorService executorService = Executors.newFixedThreadPool(numReps);
1:8bb3a77:         final SSLContext[] results = new SSLContext[numReps];
1:8bb3a77: 
1:8bb3a77:         for (int i=0; i<numReps; i++) {
1:8bb3a77:             final int instanceIndex = i;
1:8bb3a77:             executorService.execute(new Runnable() {
1:8bb3a77:                 @Override
1:8bb3a77:                 public void run() {
1:8bb3a77:                     try {
1:8bb3a77:                         results[instanceIndex] = underTest.getSSLContext();
1:8bb3a77:                     } catch (NoSuchProviderException e) {
1:8bb3a77:                         e.printStackTrace();
1:8bb3a77:                     } catch (NoSuchAlgorithmException e) {
1:8bb3a77:                         e.printStackTrace();
1:8bb3a77:                     } catch (KeyManagementException e) {
1:8bb3a77:                         e.printStackTrace();
1:8bb3a77:                     }
1:8bb3a77:                 }
1:8bb3a77:             });
1:8bb3a77:         }
1:8bb3a77: 
1:8bb3a77:         executorService.shutdown();
1:8bb3a77:         assertTrue(executorService.awaitTermination(10, TimeUnit.SECONDS));
1:8bb3a77: 
1:8bb3a77:         for (int i=0; i<numReps; i++) {
1:8bb3a77:             assertEquals("single instance", results[0], results[i]);
1:8bb3a77:         }
1:8bb3a77:     }
1:8bb3a77: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8bb3a77
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.junit.Test;
1: 
1: import javax.net.ssl.SSLContext;
1: import java.security.KeyManagementException;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.NoSuchProviderException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class SslContextTest {
1:     SslContext underTest = new SslContext();
1: 
1:     @Test
1:     public void testConcurrentGet() throws Exception {
1: 
1:         final int numReps = 100;
1:         ExecutorService executorService = Executors.newFixedThreadPool(numReps);
1:         final SSLContext[] results = new SSLContext[numReps];
1: 
1:         for (int i=0; i<numReps; i++) {
1:             final int instanceIndex = i;
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         results[instanceIndex] = underTest.getSSLContext();
1:                     } catch (NoSuchProviderException e) {
1:                         e.printStackTrace();
1:                     } catch (NoSuchAlgorithmException e) {
1:                         e.printStackTrace();
1:                     } catch (KeyManagementException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue(executorService.awaitTermination(10, TimeUnit.SECONDS));
1: 
1:         for (int i=0; i<numReps; i++) {
1:             assertEquals("single instance", results[0], results[i]);
1:         }
1:     }
1: }
============================================================================