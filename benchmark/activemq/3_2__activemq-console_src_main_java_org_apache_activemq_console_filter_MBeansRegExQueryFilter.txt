1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:5f1adbe: import java.lang.reflect.Method;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.Map;
1:5f1adbe: import java.util.regex.Pattern;
1:5f1adbe: 
1:5f1adbe: import javax.management.Attribute;
1:5f1adbe: import javax.management.AttributeList;
1:a107823: import javax.management.ObjectInstance;
1:a107823: import javax.management.ObjectName;
1:a107823: 
1:a107823: public class MBeansRegExQueryFilter extends RegExQueryFilter {
1:a107823:     /**
1:5f1adbe:      * Creates a regular expression query that is able to match the values of
1:5f1adbe:      * specific mbeans
1:5f1adbe:      * 
1:a107823:      * @param next - next query filter
1:a107823:      */
1:a107823:     public MBeansRegExQueryFilter(QueryFilter next) {
1:a107823:         super(next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Try to match the object data using the regular expression map. The regex
1:5f1adbe:      * map contains a key-value mapping of an attribute key to a regular
1:5f1adbe:      * expression the value of the key should match. The basic rule of matching
1:5f1adbe:      * is that the data must contain a property key that is included in the
1:5f1adbe:      * regex map, and that the value of the property key should match the regex
1:5f1adbe:      * specified.
1:5f1adbe:      * 
1:a107823:      * @param data - object data to match
1:a107823:      * @param regex - regex map
1:a107823:      * @return true if the data matches the regex map specified
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     protected boolean matches(Object data, Map regex) throws Exception {
1:540ebc6:         // TODO why not just use instanceof?
1:540ebc6: 
1:a107823:         // Use reflection to determine where the object should go
1:a107823:         try {
1:5f1adbe:             Method method = this.getClass().getDeclaredMethod("matches", new Class[] {
1:5f1adbe:                 data.getClass(), Map.class
1:5f1adbe:             });
1:5f1adbe:             return ((Boolean)method.invoke(this, new Object[] {
1:5f1adbe:                 data, regex
1:5f1adbe:             })).booleanValue();
1:a107823:         } catch (NoSuchMethodException e) {
1:a107823:             return false;
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Try to match the object instance using the regular expression map
1:5f1adbe:      * 
1:a107823:      * @param data - object instance to match
1:a107823:      * @param regex - regex map
1:a107823:      * @return true if the object instance matches the regex map
1:a107823:      */
1:a107823:     protected boolean matches(ObjectInstance data, Map regex) {
1:a107823:         return matches(data.getObjectName(), regex);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Try to match the object name instance using the regular expression map
1:5f1adbe:      * 
1:a107823:      * @param data - object name to match
1:a107823:      * @param regex - regex map
1:a107823:      * @return true if the object name matches the regex map
1:a107823:      */
1:a107823:     protected boolean matches(ObjectName data, Map regex) {
1:5f1adbe:         for (Iterator i = regex.keySet().iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823:             String target = data.getKeyProperty(key);
1:a107823: 
1:a107823:             // Try to match the value of the property of the object name
1:a107823:             if (target != null && !((Pattern)regex.get(key)).matcher(target).matches()) {
1:a107823:                 return false;
1:a107823:             }
1:a107823:         }
1:a107823:         return true;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Try to match the attribute list using the regular expression map
1:5f1adbe:      * 
1:a107823:      * @param data - attribute list to match
1:a107823:      * @param regex - regex map
1:a107823:      * @return true if the attribute list matches the regex map
1:a107823:      */
1:a107823:     protected boolean matches(AttributeList data, Map regex) {
1:5f1adbe:         for (Iterator i = regex.keySet().iterator(); i.hasNext();) {
1:a107823:             String key = (String)i.next();
1:a107823: 
1:5f1adbe:             // Try to match each regex to the attributes of the mbean including
1:5f1adbe:             // its ObjectName
1:5f1adbe:             for (Iterator j = data.iterator(); j.hasNext();) {
1:a107823:                 Attribute attrib = (Attribute)j.next();
1:a107823: 
1:a107823:                 // Try to match to the properties of the ObjectName
1:a107823:                 if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
1:a107823:                     String target = ((ObjectName)attrib.getValue()).getKeyProperty(key);
1:a107823: 
1:a107823:                     if (target == null || !((Pattern)regex.get(key)).matcher(target).matches()) {
1:a107823:                         return false;
1:a107823:                     } else {
1:a107823:                         // If match skip to the next regex
1:a107823:                         break;
1:a107823:                     }
1:a107823: 
1:5f1adbe:                     // Try to match to the mbean attributes
1:a107823:                 } else if (attrib.getName().equals(key)) {
1:a107823:                     if (!((Pattern)regex.get(key)).matcher(attrib.getValue().toString()).matches()) {
1:a107823:                         return false;
1:a107823:                     } else {
1:a107823:                         // If match skip to the next regex
1:a107823:                         break;
1:a107823:                     }
1:a107823: 
1:5f1adbe:                     // If mbean does not contain the specified attribute
1:a107823:                 } else {
1:a107823:                     return false;
1:a107823:                 }
1:a107823:             }
1:a107823:         }
1:a107823:         return true;
1:a107823:     }
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.regex.Pattern;
1: 
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1:      * Creates a regular expression query that is able to match the values of
1:      * specific mbeans
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Try to match the object data using the regular expression map. The regex
1:      * map contains a key-value mapping of an attribute key to a regular
1:      * expression the value of the key should match. The basic rule of matching
1:      * is that the data must contain a property key that is included in the
1:      * regex map, and that the value of the property key should match the regex
1:      * specified.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             Method method = this.getClass().getDeclaredMethod("matches", new Class[] {
1:                 data.getClass(), Map.class
1:             });
1:             return ((Boolean)method.invoke(this, new Object[] {
1:                 data, regex
1:             })).booleanValue();
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = regex.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         for (Iterator i = regex.keySet().iterator(); i.hasNext();) {
1:             // Try to match each regex to the attributes of the mbean including
1:             // its ObjectName
1:             for (Iterator j = data.iterator(); j.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:                     // Try to match to the mbean attributes
/////////////////////////////////////////////////////////////////////////
1:                     // If mbean does not contain the specified attribute
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import java.util.Map;
0: import java.util.Iterator;
0: import java.util.regex.Pattern;
0: import java.lang.reflect.Method;
1: 
1: public class MBeansRegExQueryFilter extends RegExQueryFilter {
1:     /**
0:      * Creates a regular expression query that is able to match the values of specific mbeans
1:      * @param next - next query filter
1:      */
1:     public MBeansRegExQueryFilter(QueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
0:      * Try to match the object data using the regular expression map. The regex map contains a key-value mapping of an attribute
0:      * key to a regular expression the value of the key should match. The basic rule of matching is that the data must contain
0:      * a property key that is included in the regex map, and that the value of the property key should match the regex specified.
1:      * @param data - object data to match
1:      * @param regex - regex map
1:      * @return true if the data matches the regex map specified
1:      * @throws Exception
1:      */
1:     protected boolean matches(Object data, Map regex) throws Exception {
1:         // Use reflection to determine where the object should go
1:         try {
0:             Method method = this.getClass().getDeclaredMethod("matches", new Class[] {data.getClass(), Map.class});
0:             return ((Boolean)method.invoke(this, new Object[] {data, regex})).booleanValue();
1:         } catch (NoSuchMethodException e) {
1:             return false;
1:         }
1:     }
1: 
1:     /**
1:      * Try to match the object instance using the regular expression map
1:      * @param data - object instance to match
1:      * @param regex - regex map
1:      * @return true if the object instance matches the regex map
1:      */
1:     protected boolean matches(ObjectInstance data, Map regex) {
1:         return matches(data.getObjectName(), regex);
1:     }
1: 
1:     /**
1:      * Try to match the object name instance using the regular expression map
1:      * @param data - object name to match
1:      * @param regex - regex map
1:      * @return true if the object name matches the regex map
1:      */
1:     protected boolean matches(ObjectName data, Map regex) {
0:         for (Iterator i=regex.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String target = data.getKeyProperty(key);
1: 
1:             // Try to match the value of the property of the object name
1:             if (target != null && !((Pattern)regex.get(key)).matcher(target).matches()) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Try to match the attribute list using the regular expression map
1:      * @param data - attribute list to match
1:      * @param regex - regex map
1:      * @return true if the attribute list matches the regex map
1:      */
1:     protected boolean matches(AttributeList data, Map regex) {
0:         for (Iterator i=regex.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1: 
0:             // Try to match each regex to the attributes of the mbean including its ObjectName
0:             for (Iterator j=data.iterator(); j.hasNext();) {
1:                 Attribute attrib = (Attribute)j.next();
1: 
1:                 // Try to match to the properties of the ObjectName
1:                 if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
1:                     String target = ((ObjectName)attrib.getValue()).getKeyProperty(key);
1: 
1:                     if (target == null || !((Pattern)regex.get(key)).matcher(target).matches()) {
1:                         return false;
1:                     } else {
1:                         // If match skip to the next regex
1:                         break;
1:                     }
1: 
0:                 // Try to match to the mbean attributes
1:                 } else if (attrib.getName().equals(key)) {
1:                     if (!((Pattern)regex.get(key)).matcher(attrib.getValue().toString()).matches()) {
1:                         return false;
1:                     } else {
1:                         // If match skip to the next regex
1:                         break;
1:                     }
1: 
0:                 // If mbean does not contain the specified attribute
1:                 } else {
1:                     return false;
1:                 }
1:             }
1:         }
1:         return true;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:540ebc6
/////////////////////////////////////////////////////////////////////////
1:         // TODO why not just use instanceof?
1: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0:      * Try to match the attribute list using the regular expression map
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import java.util.Map;
0: import java.util.Iterator;
0: import java.util.regex.Pattern;
0: import java.lang.reflect.Method;
0: 
0: public class MBeansRegExQueryFilter extends RegExQueryFilter {
0:     /**
0:      * Creates a regular expression query that is able to match the values of specific mbeans
0:      * @param next - next query filter
0:      */
0:     public MBeansRegExQueryFilter(QueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Try to match the object data using the regular expression map. The regex map contains a key-value mapping of an attribute
0:      * key to a regular expression the value of the key should match. The basic rule of matching is that the data must contain
0:      * a property key that is included in the regex map, and that the value of the property key should match the regex specified.
0:      * @param data - object data to match
0:      * @param regex - regex map
0:      * @return true if the data matches the regex map specified
0:      * @throws Exception
0:      */
0:     protected boolean matches(Object data, Map regex) throws Exception {
0:         // Use reflection to determine where the object should go
0:         try {
0:             Method method = this.getClass().getDeclaredMethod("matches", new Class[] {data.getClass(), Map.class});
0:             return ((Boolean)method.invoke(this, new Object[] {data, regex})).booleanValue();
0:         } catch (NoSuchMethodException e) {
0:             return false;
0:         }
0:     }
0: 
0:     /**
0:      * Try to match the object instance using the regular expression map
0:      * @param data - object instance to match
0:      * @param regex - regex map
0:      * @return true if the object instance matches the regex map
0:      */
0:     protected boolean matches(ObjectInstance data, Map regex) {
0:         return matches(data.getObjectName(), regex);
0:     }
0: 
0:     /**
0:      * Try to match the object name instance using the regular expression map
0:      * @param data - object name to match
0:      * @param regex - regex map
0:      * @return true if the object name matches the regex map
0:      */
0:     protected boolean matches(ObjectName data, Map regex) {
0:         for (Iterator i=regex.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String target = data.getKeyProperty(key);
0: 
0:             // Try to match the value of the property of the object name
0:             if (target != null && !((Pattern)regex.get(key)).matcher(target).matches()) {
0:                 return false;
0:             }
0:         }
0:         return true;
0:     }
0: 
0:     /**
0:      * Try to match the attribute list using teh regular expression map
0:      * @param data - attribute list to match
0:      * @param regex - regex map
0:      * @return true if the attribute list matches the regex map
0:      */
0:     protected boolean matches(AttributeList data, Map regex) {
0:         for (Iterator i=regex.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0: 
0:             // Try to match each regex to the attributes of the mbean including its ObjectName
0:             for (Iterator j=data.iterator(); j.hasNext();) {
0:                 Attribute attrib = (Attribute)j.next();
0: 
0:                 // Try to match to the properties of the ObjectName
0:                 if (attrib.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
0:                     String target = ((ObjectName)attrib.getValue()).getKeyProperty(key);
0: 
0:                     if (target == null || !((Pattern)regex.get(key)).matcher(target).matches()) {
0:                         return false;
0:                     } else {
0:                         // If match skip to the next regex
0:                         break;
0:                     }
0: 
0:                 // Try to match to the mbean attributes
0:                 } else if (attrib.getName().equals(key)) {
0:                     if (!((Pattern)regex.get(key)).matcher(attrib.getValue().toString()).matches()) {
0:                         return false;
0:                     } else {
0:                         // If match skip to the next regex
0:                         break;
0:                     }
0: 
0:                 // If mbean does not contain the specified attribute
0:                 } else {
0:                     return false;
0:                 }
0:             }
0:         }
0:         return true;
0:     }
0: }
============================================================================