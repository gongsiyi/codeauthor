1:a95d6fd: /*
1:a95d6fd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a95d6fd:  * contributor license agreements.  See the NOTICE file distributed with
1:a95d6fd:  * this work for additional information regarding copyright ownership.
1:a95d6fd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a95d6fd:  * (the "License"); you may not use this file except in compliance with
1:a95d6fd:  * the License.  You may obtain a copy of the License at
1:a95d6fd:  *
1:a95d6fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a95d6fd:  *
1:a95d6fd:  * Unless required by applicable law or agreed to in writing, software
1:a95d6fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a95d6fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a95d6fd:  * See the License for the specific language governing permissions and
1:a95d6fd:  * limitations under the License.
1:a95d6fd:  */
1:a95d6fd: package org.apache.activemq.transport.amqp;
2:a95d6fd: 
1:a95d6fd: import static org.junit.Assert.assertEquals;
1:a95d6fd: import static org.junit.Assert.assertNotNull;
1:a95d6fd: import static org.junit.Assert.assertTrue;
1:d563e90: import static org.junit.Assert.fail;
1:d563e90: import static org.junit.Assume.assumeFalse;
1:a95d6fd: 
1:a95d6fd: import java.util.ArrayList;
1:a95d6fd: import java.util.Arrays;
1:a95d6fd: import java.util.Collection;
1:d563e90: import java.util.Enumeration;
1:a95d6fd: import java.util.HashMap;
1:a95d6fd: import java.util.List;
1:a95d6fd: import java.util.Map;
1:d54e21b: import java.util.UUID;
1:a95d6fd: 
1:63d62a7: import javax.jms.BytesMessage;
1:a95d6fd: import javax.jms.Connection;
1:a95d6fd: import javax.jms.Destination;
1:d88c4e4: import javax.jms.MapMessage;
1:a95d6fd: import javax.jms.Message;
1:a95d6fd: import javax.jms.MessageConsumer;
1:a95d6fd: import javax.jms.MessageProducer;
1:a95d6fd: import javax.jms.ObjectMessage;
1:a95d6fd: import javax.jms.Session;
1:d563e90: import javax.jms.TextMessage;
1:a95d6fd: 
1:d54e21b: import org.apache.activemq.ActiveMQConnection;
1:d88c4e4: import org.apache.qpid.proton.amqp.Binary;
1:a95d6fd: import org.junit.Test;
1:a95d6fd: import org.junit.runner.RunWith;
1:a95d6fd: import org.junit.runners.Parameterized;
1:a95d6fd: import org.junit.runners.Parameterized.Parameters;
1:a95d6fd: import org.slf4j.Logger;
1:a95d6fd: import org.slf4j.LoggerFactory;
1:a95d6fd: 
1:a95d6fd: /**
1:a95d6fd:  * Tests interoperability between OpenWire and AMQP
1:a95d6fd:  */
1:a95d6fd: @RunWith(Parameterized.class)
1:a95d6fd: public class JMSInteroperabilityTest extends JMSClientTestSupport {
1:a95d6fd: 
1:a95d6fd:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1:a95d6fd: 
1:a95d6fd:     private final String transformer;
1:a95d6fd: 
1:a95d6fd:     @Parameters(name="Transformer->{0}")
1:a95d6fd:     public static Collection<Object[]> data() {
1:a95d6fd:         return Arrays.asList(new Object[][] {
1:a95d6fd:                 {"jms"},
1:a95d6fd:                 {"native"},
1:a95d6fd:                 {"raw"},
1:a95d6fd:             });
1:a95d6fd:     }
1:a95d6fd: 
1:a95d6fd:     public JMSInteroperabilityTest(String transformer) {
1:a95d6fd:         this.transformer = transformer;
1:a95d6fd:     }
1:a95d6fd: 
1:a95d6fd:     @Override
1:a95d6fd:     protected boolean isUseOpenWireConnector() {
1:a95d6fd:         return true;
1:a95d6fd:     }
1:a95d6fd: 
1:a95d6fd:     @Override
1:a95d6fd:     protected String getAmqpTransformer() {
1:a95d6fd:         return transformer;
1:a95d6fd:     }
1:d563e90: 
1:d563e90:     //----- Tests for property handling between protocols --------------------//
1:d563e90: 
1:d563e90:     @SuppressWarnings("unchecked")
1:d563e90:     @Test(timeout = 60000)
1:d563e90:     public void testMessagePropertiesArePreservedOpenWireToAMQP() throws Exception {
1:d563e90: 
1:d563e90:         boolean bool = true;
1:d563e90:         byte bValue = 127;
1:d563e90:         short nShort = 10;
1:d563e90:         int nInt = 5;
1:d563e90:         long nLong = 333;
1:d563e90:         float nFloat = 1;
1:d563e90:         double nDouble = 100;
1:d563e90:         Enumeration<String> propertyNames = null;
1:d563e90:         String testMessageBody = "Testing msgPropertyExistTest";
1:d563e90: 
1:d563e90:         Connection openwire = createJMSConnection();
1:d563e90:         Connection amqp = createConnection();
1:d563e90: 
1:d563e90:         openwire.start();
1:d563e90:         amqp.start();
1:d563e90: 
1:d563e90:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d563e90:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d563e90: 
1:d563e90:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d563e90: 
1:d563e90:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:d563e90:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:d563e90: 
2:d563e90:         TextMessage outbound = openwireSession.createTextMessage();
1:d563e90:         outbound.setText(testMessageBody);
1:d563e90:         outbound.setBooleanProperty("Boolean", bool);
1:d563e90:         outbound.setByteProperty("Byte", bValue);
1:d563e90:         outbound.setShortProperty("Short", nShort);
1:d563e90:         outbound.setIntProperty("Integer", nInt);
1:d563e90:         outbound.setFloatProperty("Float", nFloat);
1:d563e90:         outbound.setDoubleProperty("Double", nDouble);
1:d563e90:         outbound.setStringProperty("String", "test");
1:d563e90:         outbound.setLongProperty("Long", nLong);
1:d563e90:         outbound.setObjectProperty("BooleanObject", Boolean.valueOf(bool));
1:d563e90: 
1:d563e90:         openwireProducer.send(outbound);
1:d563e90: 
1:d563e90:         Message inbound = amqpConsumer.receive(2500);
1:d563e90: 
1:d563e90:         propertyNames = inbound.getPropertyNames();
1:d563e90:         int propertyCount = 0;
1:d563e90:         do {
1:d563e90:             String propertyName = propertyNames.nextElement();
1:d563e90: 
1:d563e90:             if (propertyName.indexOf("JMS") != 0) {
1:d563e90:                 propertyCount++;
1:d563e90:                 if (propertyName.equals("Boolean") || propertyName.equals("Byte") ||
1:d563e90:                     propertyName.equals("Integer") || propertyName.equals("Short") ||
1:d563e90:                     propertyName.equals("Float") || propertyName.equals("Double") ||
1:d563e90:                     propertyName.equals("String") || propertyName.equals("Long") ||
1:d563e90:                     propertyName.equals("BooleanObject")) {
1:d563e90: 
1:d563e90:                     LOG.debug("Appclication Property set by client is: {}", propertyName);
1:d563e90:                     if (!inbound.propertyExists(propertyName)) {
1:d563e90:                         assertTrue(inbound.propertyExists(propertyName));
1:d563e90:                         LOG.debug("Positive propertyExists test failed for {}", propertyName);
1:d563e90:                     } else if (inbound.propertyExists(propertyName + "1")) {
1:d563e90:                         LOG.debug("Negative propertyExists test failed for {} 1", propertyName);
1:d563e90:                         fail("Negative propertyExists test failed for " + propertyName + "1");
1:d563e90:                     }
1:d563e90:                 } else {
1:d563e90:                     LOG.debug("Appclication Property not set by client: {}", propertyName);
1:d563e90:                     fail("Appclication Property not set by client: " + propertyName);
1:d563e90:                 }
1:d563e90:             } else {
1:d563e90:                 LOG.debug("JMSProperty Name is: {}", propertyName);
1:d563e90:             }
1:d563e90: 
1:d563e90:         } while (propertyNames.hasMoreElements());
1:d563e90: 
1:d563e90:         amqp.close();
1:d563e90:         openwire.close();
1:63d62a7: 
1:d563e90:         assertEquals("Unexpected number of properties in received message.", 9, propertyCount);
1:d563e90:     }
1:d563e90: 
1:d563e90:     @SuppressWarnings("unchecked")
1:d563e90:     @Test(timeout = 60000)
1:d563e90:     public void testMessagePropertiesArePreservedAMQPToOpenWire() throws Exception {
1:d563e90: 
1:d54e21b:         // Raw Transformer doesn't expand message properties.
1:d563e90:         assumeFalse(transformer.equals("raw"));
1:d563e90: 
1:d563e90:         boolean bool = true;
1:d563e90:         byte bValue = 127;
1:d563e90:         short nShort = 10;
1:d563e90:         int nInt = 5;
1:d563e90:         long nLong = 333;
1:d563e90:         float nFloat = 1;
1:d563e90:         double nDouble = 100;
1:d563e90:         Enumeration<String> propertyNames = null;
1:d563e90:         String testMessageBody = "Testing msgPropertyExistTest";
1:d563e90: 
1:d563e90:         Connection openwire = createJMSConnection();
1:d563e90:         Connection amqp = createConnection();
1:d563e90: 
1:d563e90:         openwire.start();
1:d563e90:         amqp.start();
1:d563e90: 
1:d563e90:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d563e90:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d563e90: 
1:d563e90:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d563e90: 
1:d563e90:         MessageProducer amqpProducer = amqpSession.createProducer(queue);
1:d563e90:         MessageConsumer openwireConsumer = openwireSession.createConsumer(queue);
1:d563e90: 
1:a2d92ef:         TextMessage outbound = amqpSession.createTextMessage();
1:d563e90:         outbound.setText(testMessageBody);
1:d563e90:         outbound.setBooleanProperty("Boolean", bool);
1:d563e90:         outbound.setByteProperty("Byte", bValue);
1:d563e90:         outbound.setShortProperty("Short", nShort);
1:d563e90:         outbound.setIntProperty("Integer", nInt);
1:d563e90:         outbound.setFloatProperty("Float", nFloat);
1:d563e90:         outbound.setDoubleProperty("Double", nDouble);
1:d563e90:         outbound.setStringProperty("String", "test");
1:d563e90:         outbound.setLongProperty("Long", nLong);
1:d563e90:         outbound.setObjectProperty("BooleanObject", Boolean.valueOf(bool));
1:d563e90: 
1:d563e90:         amqpProducer.send(outbound);
1:d563e90: 
1:d563e90:         Message inbound = openwireConsumer.receive(2500);
1:d563e90: 
1:d563e90:         propertyNames = inbound.getPropertyNames();
1:d563e90:         int propertyCount = 0;
1:d563e90:         do {
1:d563e90:             String propertyName = propertyNames.nextElement();
1:d563e90: 
1:d563e90:             if (propertyName.indexOf("JMS") != 0) {
1:d563e90:                 propertyCount++;
1:d563e90:                 if (propertyName.equals("Boolean") || propertyName.equals("Byte") ||
1:d563e90:                     propertyName.equals("Integer") || propertyName.equals("Short") ||
1:d563e90:                     propertyName.equals("Float") || propertyName.equals("Double") ||
1:d563e90:                     propertyName.equals("String") || propertyName.equals("Long") ||
1:d563e90:                     propertyName.equals("BooleanObject")) {
1:d563e90: 
1:d563e90:                     LOG.debug("Appclication Property set by client is: {}", propertyName);
1:d563e90:                     if (!inbound.propertyExists(propertyName)) {
1:d563e90:                         assertTrue(inbound.propertyExists(propertyName));
1:d563e90:                         LOG.debug("Positive propertyExists test failed for {}", propertyName);
1:d563e90:                     } else if (inbound.propertyExists(propertyName + "1")) {
1:d563e90:                         LOG.debug("Negative propertyExists test failed for {} 1", propertyName);
1:d563e90:                         fail("Negative propertyExists test failed for " + propertyName + "1");
1:d563e90:                     }
1:d563e90:                 } else {
1:d563e90:                     LOG.debug("Appclication Property not set by client: {}", propertyName);
1:d563e90:                     fail("Appclication Property not set by client: " + propertyName);
1:d563e90:                 }
1:d563e90:             } else {
1:d563e90:                 LOG.debug("JMSProperty Name is: {}", propertyName);
1:d563e90:             }
1:d563e90: 
1:d563e90:         } while (propertyNames.hasMoreElements());
1:d563e90: 
1:d563e90:         amqp.close();
1:d563e90:         openwire.close();
1:d563e90: 
1:d563e90:         assertEquals("Unexpected number of properties in received message.", 9, propertyCount);
1:d563e90:     }
1:d563e90: 
1:a95d6fd:     //----- Tests for OpenWire to Qpid JMS using MapMessage ------------------//
1:a95d6fd: 
1:a95d6fd:     @SuppressWarnings("unchecked")
1:a95d6fd:     @Test
1:d88c4e4:     public void testMapMessageUsingPrimitiveSettersSendReceive() throws Exception {
1:d88c4e4:         Connection openwire = createJMSConnection();
1:d88c4e4:         Connection amqp = createConnection();
1:d88c4e4: 
1:d88c4e4:         openwire.start();
1:d88c4e4:         amqp.start();
1:d88c4e4: 
1:d88c4e4:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d88c4e4:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d88c4e4: 
1:d88c4e4:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d88c4e4: 
1:d88c4e4:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:d88c4e4:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:d88c4e4: 
1:d88c4e4:         byte[] bytesValue = new byte[] { 1, 2, 3, 4, 5 };
1:d88c4e4: 
1:d88c4e4:         // Create the Message
1:d88c4e4:         MapMessage outgoing = openwireSession.createMapMessage();
1:d88c4e4: 
1:d88c4e4:         outgoing.setBoolean("boolean", true);
1:d88c4e4:         outgoing.setByte("byte", (byte) 10);
1:d88c4e4:         outgoing.setBytes("bytes", bytesValue);
1:d88c4e4:         outgoing.setChar("char", 'B');
1:d88c4e4:         outgoing.setDouble("double", 24.42);
1:d88c4e4:         outgoing.setFloat("float", 3.14159f);
1:d88c4e4:         outgoing.setInt("integer", 1024);
1:d88c4e4:         outgoing.setLong("long", 8096l);
1:d88c4e4:         outgoing.setShort("short", (short) 255);
1:d88c4e4: 
1:d88c4e4:         openwireProducer.send(outgoing);
1:d88c4e4: 
1:d88c4e4:         // Now consume the MapMessage
1:d88c4e4:         Message received = amqpConsumer.receive(2000);
1:d88c4e4:         assertNotNull(received);
1:d88c4e4:         assertTrue("Expected MapMessage but got " + received, received instanceof ObjectMessage);
1:d88c4e4:         ObjectMessage incoming = (ObjectMessage) received;
1:d88c4e4: 
1:d88c4e4:         Map<String, Object> incomingMap = (Map<String, Object>) incoming.getObject();
1:d88c4e4: 
1:d88c4e4:         assertEquals(true, incomingMap.get("boolean"));
1:d88c4e4:         assertEquals(10, (byte) incomingMap.get("byte"));
1:d88c4e4:         assertEquals('B', incomingMap.get("char"));
1:d88c4e4:         assertEquals(24.42, (double) incomingMap.get("double"), 0.5);
1:d88c4e4:         assertEquals(3.14159f, (float) incomingMap.get("float"), 0.5f);
1:d88c4e4:         assertEquals(1024, incomingMap.get("integer"));
1:d88c4e4:         assertEquals(8096l, incomingMap.get("long"));
1:d88c4e4:         assertEquals(255, (short) incomingMap.get("short"));
1:d88c4e4: 
1:d88c4e4:         // Test for the byte array which will be in an AMQP Binary as this message
1:d88c4e4:         // is received as an ObjectMessage by Qpid JMS
1:d88c4e4:         Object incomingValue = incomingMap.get("bytes");
1:d88c4e4:         assertNotNull(incomingValue);
1:d88c4e4:         assertTrue(incomingValue instanceof Binary);
1:d88c4e4:         Binary incomingBinary = (Binary) incomingValue;
1:d88c4e4:         byte[] incomingBytes = Arrays.copyOfRange(incomingBinary.getArray(), incomingBinary.getArrayOffset(), incomingBinary.getLength());
1:d88c4e4:         assertTrue(Arrays.equals(bytesValue, incomingBytes));
1:d88c4e4: 
1:d88c4e4:         amqp.close();
1:d88c4e4:         openwire.close();
1:d88c4e4:     }
1:d88c4e4: 
1:d88c4e4:     //----- Tests for OpenWire <-> Qpid JMS using ObjectMessage --------------//
1:d88c4e4: 
1:d88c4e4:     @SuppressWarnings("unchecked")
1:d88c4e4:     @Test
1:d88c4e4:     public void testMapInObjectMessageSendReceive() throws Exception {
1:a95d6fd:         Connection openwire = createJMSConnection();
1:a95d6fd:         Connection amqp = createConnection();
1:d54e21b: 
1:a95d6fd:         openwire.start();
1:a95d6fd:         amqp.start();
1:d54e21b: 
1:a95d6fd:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a95d6fd:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a95d6fd: 
1:a95d6fd:         Destination queue = openwireSession.createQueue(getDestinationName());
1:a95d6fd: 
1:a95d6fd:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:a95d6fd:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:a95d6fd: 
1:a95d6fd:         // Create the Message
1:a95d6fd:         ObjectMessage outgoing = openwireSession.createObjectMessage();
1:a95d6fd: 
1:a95d6fd:         HashMap<String, Object> outgoingMap = new HashMap<String, Object>();
1:a95d6fd: 
1:a95d6fd:         outgoingMap.put("none", null);
1:a95d6fd:         outgoingMap.put("string", "test");
1:a95d6fd:         outgoingMap.put("long", 255L);
1:a95d6fd:         outgoingMap.put("empty-string", "");
1:a95d6fd:         outgoingMap.put("negative-int", -1);
1:a95d6fd:         outgoingMap.put("float", 0.12f);
1:a95d6fd: 
1:a95d6fd:         outgoing.setObject(outgoingMap);
1:a95d6fd: 
1:a95d6fd:         openwireProducer.send(outgoing);
1:a95d6fd: 
1:d88c4e4:         // Now consume the ObjectMessage
1:a95d6fd:         Message received = amqpConsumer.receive(2000);
1:a95d6fd:         assertNotNull(received);
1:d54e21b:         assertTrue("Expected ObjectMessage but got " + received, received instanceof ObjectMessage);
1:a95d6fd:         ObjectMessage incoming = (ObjectMessage) received;
1:a95d6fd: 
1:a95d6fd:         Object incomingObject = incoming.getObject();
1:a95d6fd:         assertNotNull(incomingObject);
1:a95d6fd:         assertTrue(incomingObject instanceof Map);
1:a95d6fd:         Map<String, Object> incomingMap = (Map<String, Object>) incomingObject;
1:a95d6fd:         assertEquals(outgoingMap.size(), incomingMap.size());
1:a95d6fd: 
1:a95d6fd:         amqp.close();
1:a95d6fd:         openwire.close();
1:a95d6fd:     }
1:a95d6fd: 
1:d54e21b:     @Test
1:d54e21b:     public void testQpidToOpenWireObjectMessage() throws Exception {
1:d54e21b: 
1:d54e21b:         // Raw Transformer doesn't expand message properties.
1:d54e21b:         assumeFalse(!transformer.equals("jms"));
1:d54e21b: 
1:d54e21b:         Connection openwire = createJMSConnection();
1:d54e21b:         Connection amqp = createConnection();
1:d54e21b: 
1:d54e21b:         openwire.start();
1:d54e21b:         amqp.start();
1:d54e21b: 
1:d54e21b:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b: 
1:d54e21b:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d54e21b: 
1:d54e21b:         MessageProducer amqpProducer = amqpSession.createProducer(queue);
1:d54e21b:         MessageConsumer openwireConsumer = openwireSession.createConsumer(queue);
1:d54e21b: 
1:d54e21b:         // Create and send the Message
1:d54e21b:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:d54e21b:         outgoing.setObject(UUID.randomUUID());
1:d54e21b:         amqpProducer.send(outgoing);
1:d54e21b: 
1:d88c4e4:         // Now consume the ObjectMessage
1:d54e21b:         Message received = openwireConsumer.receive(2000);
1:d54e21b:         assertNotNull(received);
1:d54e21b:         LOG.info("Read new message: {}", received);
1:d54e21b:         assertTrue(received instanceof ObjectMessage);
1:d54e21b:         ObjectMessage incoming = (ObjectMessage) received;
1:d54e21b:         Object payload = incoming.getObject();
1:d54e21b:         assertNotNull(payload);
1:d54e21b:         assertTrue(payload instanceof UUID);
1:d54e21b: 
1:d54e21b:         amqp.close();
1:d54e21b:         openwire.close();
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testOpenWireToQpidObjectMessage() throws Exception {
1:d54e21b: 
1:d54e21b:         // Raw Transformer doesn't expand message properties.
1:d54e21b:         assumeFalse(!transformer.equals("jms"));
1:d54e21b: 
1:d54e21b:         Connection openwire = createJMSConnection();
1:d54e21b:         Connection amqp = createConnection();
1:d54e21b: 
1:d54e21b:         openwire.start();
1:d54e21b:         amqp.start();
1:d54e21b: 
1:d54e21b:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b: 
1:d54e21b:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d54e21b: 
1:d54e21b:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:d54e21b:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:d54e21b: 
1:d54e21b:         // Create and send the Message
1:d54e21b:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:d54e21b:         outgoing.setObject(UUID.randomUUID());
1:d54e21b:         openwireProducer.send(outgoing);
1:d54e21b: 
1:d88c4e4:         // Now consume the ObjectMessage
1:d54e21b:         Message received = amqpConsumer.receive(2000);
1:d54e21b:         assertNotNull(received);
1:d54e21b:         LOG.info("Read new message: {}", received);
1:d54e21b:         assertTrue(received instanceof ObjectMessage);
1:d54e21b:         ObjectMessage incoming = (ObjectMessage) received;
1:d54e21b:         Object payload = incoming.getObject();
1:d54e21b:         assertNotNull(payload);
1:d54e21b:         assertTrue(payload instanceof UUID);
1:d54e21b: 
1:d54e21b:         amqp.close();
1:d54e21b:         openwire.close();
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testOpenWireToQpidObjectMessageWithOpenWireCompression() throws Exception {
1:d54e21b: 
1:d54e21b:         // Raw Transformer doesn't expand message properties.
1:d54e21b:         assumeFalse(!transformer.equals("jms"));
1:d54e21b: 
1:d54e21b:         Connection openwire = createJMSConnection();
1:d54e21b:         ((ActiveMQConnection) openwire).setUseCompression(true);
1:d54e21b: 
1:d54e21b:         Connection amqp = createConnection();
1:d54e21b: 
1:d54e21b:         openwire.start();
1:d54e21b:         amqp.start();
1:d54e21b: 
1:d54e21b:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d54e21b: 
1:d54e21b:         Destination queue = openwireSession.createQueue(getDestinationName());
1:d54e21b: 
1:d54e21b:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:d54e21b:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:d54e21b: 
1:d54e21b:         // Create and send the Message
1:d54e21b:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:d54e21b:         outgoing.setObject(UUID.randomUUID());
1:d54e21b:         openwireProducer.send(outgoing);
1:d54e21b: 
1:d88c4e4:         // Now consume the ObjectMessage
1:d54e21b:         Message received = amqpConsumer.receive(2000);
1:d54e21b:         assertNotNull(received);
1:d54e21b:         LOG.info("Read new message: {}", received);
1:d54e21b:         assertTrue(received instanceof ObjectMessage);
1:d54e21b:         ObjectMessage incoming = (ObjectMessage) received;
1:d54e21b:         Object payload = incoming.getObject();
1:d54e21b:         assertNotNull(payload);
1:d54e21b:         assertTrue(payload instanceof UUID);
1:a95d6fd: 
1:d54e21b:         amqp.close();
1:d54e21b:         openwire.close();
1:d54e21b:     }
1:a95d6fd: 
1:a95d6fd:     @SuppressWarnings("unchecked")
1:a95d6fd:     @Test
1:a95d6fd:     public void testObjectMessageContainingList() throws Exception {
1:a95d6fd:         Connection openwire = createJMSConnection();
1:a95d6fd:         Connection amqp = createConnection();
1:a95d6fd: 
1:a95d6fd:         openwire.start();
1:a95d6fd:         amqp.start();
1:a95d6fd: 
1:a95d6fd:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a95d6fd:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a95d6fd: 
1:a95d6fd:         Destination queue = openwireSession.createQueue(getDestinationName());
1:a95d6fd: 
1:a95d6fd:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:a95d6fd:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1:a95d6fd: 
1:a95d6fd:         // Create the Message
1:a95d6fd:         ObjectMessage outgoing = openwireSession.createObjectMessage();
1:a95d6fd: 
1:a95d6fd:         ArrayList<Object> outgoingList = new ArrayList<Object>();
1:a95d6fd: 
1:a95d6fd:         outgoingList.add(null);
1:a95d6fd:         outgoingList.add("test");
1:a95d6fd:         outgoingList.add(255L);
1:a95d6fd:         outgoingList.add("");
1:a95d6fd:         outgoingList.add(-1);
1:a95d6fd:         outgoingList.add(0.12f);
1:a95d6fd: 
1:a95d6fd:         outgoing.setObject(outgoingList);
1:a95d6fd: 
1:a95d6fd:         openwireProducer.send(outgoing);
1:a95d6fd: 
1:d88c4e4:         // Now consume the ObjectMessage
1:a95d6fd:         Message received = amqpConsumer.receive(2000);
1:a95d6fd:         assertNotNull(received);
2:a95d6fd:         assertTrue(received instanceof ObjectMessage);
1:a95d6fd:         ObjectMessage incoming = (ObjectMessage) received;
1:a95d6fd: 
1:a95d6fd:         Object incomingObject = incoming.getObject();
1:a95d6fd:         assertNotNull(incomingObject);
1:a95d6fd:         assertTrue(incomingObject instanceof List);
1:a95d6fd:         List<Object> incomingList = (List<Object>) incomingObject;
1:a95d6fd:         assertEquals(outgoingList.size(), incomingList.size());
1:a95d6fd: 
1:a95d6fd:         amqp.close();
1:a95d6fd:         openwire.close();
1:a95d6fd:     }
1:a95d6fd: 
1:63d62a7:     //----- Test Qpid JMS to Qpid JMS interop with transformers --------------//
1:63d62a7: 
1:63d62a7:     @Test
1:63d62a7:     public void testQpidJMSToQpidJMSMessageSendReceive() throws Exception {
1:63d62a7:         final int SIZE = 1024;
1:63d62a7:         final int NUM_MESSAGES = 100;
1:63d62a7: 
1:63d62a7:         Connection amqpSend = createConnection("client-1");
1:63d62a7:         Connection amqpReceive = createConnection("client-2");
1:63d62a7: 
1:63d62a7:         amqpReceive.start();
1:63d62a7: 
1:63d62a7:         Session senderSession = amqpSend.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:63d62a7:         Session receiverSession = amqpReceive.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:63d62a7: 
1:63d62a7:         Destination queue = senderSession.createQueue(getDestinationName());
1:63d62a7: 
1:63d62a7:         MessageProducer amqpProducer = senderSession.createProducer(queue);
1:63d62a7:         MessageConsumer amqpConsumer = receiverSession.createConsumer(queue);
1:63d62a7: 
1:63d62a7:         byte[] payload = new byte[SIZE];
1:63d62a7: 
1:63d62a7:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:63d62a7:             BytesMessage outgoing = senderSession.createBytesMessage();
1:63d62a7:             outgoing.setLongProperty("SendTime", System.currentTimeMillis());
1:63d62a7:             outgoing.writeBytes(payload);
1:63d62a7:             amqpProducer.send(outgoing);
1:63d62a7:         }
1:63d62a7: 
1:d88c4e4:         // Now consume the message
1:63d62a7:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:63d62a7:             Message received = amqpConsumer.receive(2000);
1:63d62a7:             assertNotNull(received);
1:63d62a7:             assertTrue("Expected BytesMessage but got " + received, received instanceof BytesMessage);
1:63d62a7:             BytesMessage incoming = (BytesMessage) received;
1:63d62a7:             assertEquals(SIZE, incoming.getBodyLength());
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         amqpReceive.close();
1:63d62a7:         amqpSend.close();
1:63d62a7:     }
1:a95d6fd: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a2d92ef
/////////////////////////////////////////////////////////////////////////
1:         TextMessage outbound = amqpSession.createTextMessage();
commit:d88c4e4
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MapMessage;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.Binary;
/////////////////////////////////////////////////////////////////////////
1:     public void testMapMessageUsingPrimitiveSettersSendReceive() throws Exception {
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         byte[] bytesValue = new byte[] { 1, 2, 3, 4, 5 };
1: 
1:         // Create the Message
1:         MapMessage outgoing = openwireSession.createMapMessage();
1: 
1:         outgoing.setBoolean("boolean", true);
1:         outgoing.setByte("byte", (byte) 10);
1:         outgoing.setBytes("bytes", bytesValue);
1:         outgoing.setChar("char", 'B');
1:         outgoing.setDouble("double", 24.42);
1:         outgoing.setFloat("float", 3.14159f);
1:         outgoing.setInt("integer", 1024);
1:         outgoing.setLong("long", 8096l);
1:         outgoing.setShort("short", (short) 255);
1: 
1:         openwireProducer.send(outgoing);
1: 
1:         // Now consume the MapMessage
1:         Message received = amqpConsumer.receive(2000);
1:         assertNotNull(received);
1:         assertTrue("Expected MapMessage but got " + received, received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1: 
1:         Map<String, Object> incomingMap = (Map<String, Object>) incoming.getObject();
1: 
1:         assertEquals(true, incomingMap.get("boolean"));
1:         assertEquals(10, (byte) incomingMap.get("byte"));
1:         assertEquals('B', incomingMap.get("char"));
1:         assertEquals(24.42, (double) incomingMap.get("double"), 0.5);
1:         assertEquals(3.14159f, (float) incomingMap.get("float"), 0.5f);
1:         assertEquals(1024, incomingMap.get("integer"));
1:         assertEquals(8096l, incomingMap.get("long"));
1:         assertEquals(255, (short) incomingMap.get("short"));
1: 
1:         // Test for the byte array which will be in an AMQP Binary as this message
1:         // is received as an ObjectMessage by Qpid JMS
1:         Object incomingValue = incomingMap.get("bytes");
1:         assertNotNull(incomingValue);
1:         assertTrue(incomingValue instanceof Binary);
1:         Binary incomingBinary = (Binary) incomingValue;
1:         byte[] incomingBytes = Arrays.copyOfRange(incomingBinary.getArray(), incomingBinary.getArrayOffset(), incomingBinary.getLength());
1:         assertTrue(Arrays.equals(bytesValue, incomingBytes));
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
1: 
1:     //----- Tests for OpenWire <-> Qpid JMS using ObjectMessage --------------//
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testMapInObjectMessageSendReceive() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the ObjectMessage
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the ObjectMessage
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the ObjectMessage
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the ObjectMessage
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the ObjectMessage
/////////////////////////////////////////////////////////////////////////
1:         // Now consume the message
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
/////////////////////////////////////////////////////////////////////////
1: 
1:     //----- Test Qpid JMS to Qpid JMS interop with transformers --------------//
1: 
1:     @Test
1:     public void testQpidJMSToQpidJMSMessageSendReceive() throws Exception {
1:         final int SIZE = 1024;
1:         final int NUM_MESSAGES = 100;
1: 
1:         Connection amqpSend = createConnection("client-1");
1:         Connection amqpReceive = createConnection("client-2");
1: 
1:         amqpReceive.start();
1: 
1:         Session senderSession = amqpSend.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session receiverSession = amqpReceive.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = senderSession.createQueue(getDestinationName());
1: 
1:         MessageProducer amqpProducer = senderSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = receiverSession.createConsumer(queue);
1: 
1:         byte[] payload = new byte[SIZE];
1: 
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             BytesMessage outgoing = senderSession.createBytesMessage();
1:             outgoing.setLongProperty("SendTime", System.currentTimeMillis());
1:             outgoing.writeBytes(payload);
1:             amqpProducer.send(outgoing);
1:         }
1: 
0:         // Now consumer the message
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             Message received = amqpConsumer.receive(2000);
1:             assertNotNull(received);
1:             assertTrue("Expected BytesMessage but got " + received, received instanceof BytesMessage);
1:             BytesMessage incoming = (BytesMessage) received;
1:             assertEquals(SIZE, incoming.getBodyLength());
1:         }
1: 
1:         amqpReceive.close();
1:         amqpSend.close();
1:     }
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
/////////////////////////////////////////////////////////////////////////
1:         // Raw Transformer doesn't expand message properties.
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Expected ObjectMessage but got " + received, received instanceof ObjectMessage);
/////////////////////////////////////////////////////////////////////////
0:     //----- Tests for OpenWire <-> Qpid JMS using ObjectMessage --------------//
1: 
1:     @Test
1:     public void testQpidToOpenWireObjectMessage() throws Exception {
1: 
1:         // Raw Transformer doesn't expand message properties.
1:         assumeFalse(!transformer.equals("jms"));
1: 
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer amqpProducer = amqpSession.createProducer(queue);
1:         MessageConsumer openwireConsumer = openwireSession.createConsumer(queue);
1: 
1:         // Create and send the Message
1:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:         outgoing.setObject(UUID.randomUUID());
1:         amqpProducer.send(outgoing);
1: 
0:         // Now consumer the ObjectMessage
1:         Message received = openwireConsumer.receive(2000);
1:         assertNotNull(received);
1:         LOG.info("Read new message: {}", received);
1:         assertTrue(received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1:         Object payload = incoming.getObject();
1:         assertNotNull(payload);
1:         assertTrue(payload instanceof UUID);
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
1: 
1:     @Test
1:     public void testOpenWireToQpidObjectMessage() throws Exception {
1: 
1:         // Raw Transformer doesn't expand message properties.
1:         assumeFalse(!transformer.equals("jms"));
1: 
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         // Create and send the Message
1:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:         outgoing.setObject(UUID.randomUUID());
1:         openwireProducer.send(outgoing);
1: 
0:         // Now consumer the ObjectMessage
1:         Message received = amqpConsumer.receive(2000);
1:         assertNotNull(received);
1:         LOG.info("Read new message: {}", received);
1:         assertTrue(received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1:         Object payload = incoming.getObject();
1:         assertNotNull(payload);
1:         assertTrue(payload instanceof UUID);
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
1: 
1:     @Test
1:     public void testOpenWireToQpidObjectMessageWithOpenWireCompression() throws Exception {
1: 
1:         // Raw Transformer doesn't expand message properties.
1:         assumeFalse(!transformer.equals("jms"));
1: 
1:         Connection openwire = createJMSConnection();
1:         ((ActiveMQConnection) openwire).setUseCompression(true);
1: 
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         // Create and send the Message
1:         ObjectMessage outgoing = amqpSession.createObjectMessage();
1:         outgoing.setObject(UUID.randomUUID());
1:         openwireProducer.send(outgoing);
1: 
0:         // Now consumer the ObjectMessage
1:         Message received = amqpConsumer.receive(2000);
1:         assertNotNull(received);
1:         LOG.info("Read new message: {}", received);
1:         assertTrue(received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1:         Object payload = incoming.getObject();
1:         assertNotNull(payload);
1:         assertTrue(payload instanceof UUID);
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
commit:d563e90
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: import static org.junit.Assume.assumeFalse;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
1:     //----- Tests for property handling between protocols --------------------//
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test(timeout = 60000)
1:     public void testMessagePropertiesArePreservedOpenWireToAMQP() throws Exception {
1: 
1:         boolean bool = true;
1:         byte bValue = 127;
1:         short nShort = 10;
1:         int nInt = 5;
1:         long nLong = 333;
1:         float nFloat = 1;
1:         double nDouble = 100;
1:         Enumeration<String> propertyNames = null;
1:         String testMessageBody = "Testing msgPropertyExistTest";
1: 
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         TextMessage outbound = openwireSession.createTextMessage();
1:         outbound.setText(testMessageBody);
1:         outbound.setBooleanProperty("Boolean", bool);
1:         outbound.setByteProperty("Byte", bValue);
1:         outbound.setShortProperty("Short", nShort);
1:         outbound.setIntProperty("Integer", nInt);
1:         outbound.setFloatProperty("Float", nFloat);
1:         outbound.setDoubleProperty("Double", nDouble);
1:         outbound.setStringProperty("String", "test");
1:         outbound.setLongProperty("Long", nLong);
1:         outbound.setObjectProperty("BooleanObject", Boolean.valueOf(bool));
1: 
1:         openwireProducer.send(outbound);
1: 
1:         Message inbound = amqpConsumer.receive(2500);
1: 
1:         propertyNames = inbound.getPropertyNames();
1:         int propertyCount = 0;
1:         do {
1:             String propertyName = propertyNames.nextElement();
1: 
1:             if (propertyName.indexOf("JMS") != 0) {
1:                 propertyCount++;
1:                 if (propertyName.equals("Boolean") || propertyName.equals("Byte") ||
1:                     propertyName.equals("Integer") || propertyName.equals("Short") ||
1:                     propertyName.equals("Float") || propertyName.equals("Double") ||
1:                     propertyName.equals("String") || propertyName.equals("Long") ||
1:                     propertyName.equals("BooleanObject")) {
1: 
1:                     LOG.debug("Appclication Property set by client is: {}", propertyName);
1:                     if (!inbound.propertyExists(propertyName)) {
1:                         assertTrue(inbound.propertyExists(propertyName));
1:                         LOG.debug("Positive propertyExists test failed for {}", propertyName);
1:                     } else if (inbound.propertyExists(propertyName + "1")) {
1:                         LOG.debug("Negative propertyExists test failed for {} 1", propertyName);
1:                         fail("Negative propertyExists test failed for " + propertyName + "1");
1:                     }
1:                 } else {
1:                     LOG.debug("Appclication Property not set by client: {}", propertyName);
1:                     fail("Appclication Property not set by client: " + propertyName);
1:                 }
1:             } else {
1:                 LOG.debug("JMSProperty Name is: {}", propertyName);
1:             }
1: 
1:         } while (propertyNames.hasMoreElements());
1: 
1:         amqp.close();
1:         openwire.close();
1: 
1:         assertEquals("Unexpected number of properties in received message.", 9, propertyCount);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test(timeout = 60000)
1:     public void testMessagePropertiesArePreservedAMQPToOpenWire() throws Exception {
1: 
0:         // Raw Transformer doesn't expand message propeties.
1:         assumeFalse(transformer.equals("raw"));
1: 
1:         boolean bool = true;
1:         byte bValue = 127;
1:         short nShort = 10;
1:         int nInt = 5;
1:         long nLong = 333;
1:         float nFloat = 1;
1:         double nDouble = 100;
1:         Enumeration<String> propertyNames = null;
1:         String testMessageBody = "Testing msgPropertyExistTest";
1: 
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer amqpProducer = amqpSession.createProducer(queue);
1:         MessageConsumer openwireConsumer = openwireSession.createConsumer(queue);
1: 
1:         TextMessage outbound = openwireSession.createTextMessage();
1:         outbound.setText(testMessageBody);
1:         outbound.setBooleanProperty("Boolean", bool);
1:         outbound.setByteProperty("Byte", bValue);
1:         outbound.setShortProperty("Short", nShort);
1:         outbound.setIntProperty("Integer", nInt);
1:         outbound.setFloatProperty("Float", nFloat);
1:         outbound.setDoubleProperty("Double", nDouble);
1:         outbound.setStringProperty("String", "test");
1:         outbound.setLongProperty("Long", nLong);
1:         outbound.setObjectProperty("BooleanObject", Boolean.valueOf(bool));
1: 
1:         amqpProducer.send(outbound);
1: 
1:         Message inbound = openwireConsumer.receive(2500);
1: 
1:         propertyNames = inbound.getPropertyNames();
1:         int propertyCount = 0;
1:         do {
1:             String propertyName = propertyNames.nextElement();
1: 
1:             if (propertyName.indexOf("JMS") != 0) {
1:                 propertyCount++;
1:                 if (propertyName.equals("Boolean") || propertyName.equals("Byte") ||
1:                     propertyName.equals("Integer") || propertyName.equals("Short") ||
1:                     propertyName.equals("Float") || propertyName.equals("Double") ||
1:                     propertyName.equals("String") || propertyName.equals("Long") ||
1:                     propertyName.equals("BooleanObject")) {
1: 
1:                     LOG.debug("Appclication Property set by client is: {}", propertyName);
1:                     if (!inbound.propertyExists(propertyName)) {
1:                         assertTrue(inbound.propertyExists(propertyName));
1:                         LOG.debug("Positive propertyExists test failed for {}", propertyName);
1:                     } else if (inbound.propertyExists(propertyName + "1")) {
1:                         LOG.debug("Negative propertyExists test failed for {} 1", propertyName);
1:                         fail("Negative propertyExists test failed for " + propertyName + "1");
1:                     }
1:                 } else {
1:                     LOG.debug("Appclication Property not set by client: {}", propertyName);
1:                     fail("Appclication Property not set by client: " + propertyName);
1:                 }
1:             } else {
1:                 LOG.debug("JMSProperty Name is: {}", propertyName);
1:             }
1: 
1:         } while (propertyNames.hasMoreElements());
1: 
1:         amqp.close();
1:         openwire.close();
1: 
1:         assertEquals("Unexpected number of properties in received message.", 9, propertyCount);
1:     }
1: 
commit:a95d6fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests interoperability between OpenWire and AMQP
1:  */
1: @RunWith(Parameterized.class)
1: public class JMSInteroperabilityTest extends JMSClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1: 
1:     private final String transformer;
1: 
1:     @Parameters(name="Transformer->{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"jms"},
1:                 {"native"},
1:                 {"raw"},
1:             });
1:     }
1: 
1:     public JMSInteroperabilityTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return transformer;
1:     }
1: 
1:     //----- Tests for OpenWire to Qpid JMS using MapMessage ------------------//
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
0:     public void testMapMessageSendReceive() throws Exception {
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         // Create the Message
1:         ObjectMessage outgoing = openwireSession.createObjectMessage();
1: 
1:         HashMap<String, Object> outgoingMap = new HashMap<String, Object>();
1: 
1:         outgoingMap.put("none", null);
1:         outgoingMap.put("string", "test");
1:         outgoingMap.put("long", 255L);
1:         outgoingMap.put("empty-string", "");
1:         outgoingMap.put("negative-int", -1);
1:         outgoingMap.put("float", 0.12f);
1: 
1:         outgoing.setObject(outgoingMap);
1: 
1:         openwireProducer.send(outgoing);
1: 
0:         // Now consumer the ObjectMessage
1:         Message received = amqpConsumer.receive(2000);
1:         assertNotNull(received);
1:         assertTrue(received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1: 
1:         Object incomingObject = incoming.getObject();
1:         assertNotNull(incomingObject);
1:         assertTrue(incomingObject instanceof Map);
1:         Map<String, Object> incomingMap = (Map<String, Object>) incomingObject;
1:         assertEquals(outgoingMap.size(), incomingMap.size());
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
1: 
0:     //----- Tests for OpenWire to Qpid JMS using ObjectMessage ---------------//
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testObjectMessageContainingList() throws Exception {
1:         Connection openwire = createJMSConnection();
1:         Connection amqp = createConnection();
1: 
1:         openwire.start();
1:         amqp.start();
1: 
1:         Session openwireSession = openwire.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session amqpSession = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination queue = openwireSession.createQueue(getDestinationName());
1: 
1:         MessageProducer openwireProducer = openwireSession.createProducer(queue);
1:         MessageConsumer amqpConsumer = amqpSession.createConsumer(queue);
1: 
1:         // Create the Message
1:         ObjectMessage outgoing = openwireSession.createObjectMessage();
1: 
1:         ArrayList<Object> outgoingList = new ArrayList<Object>();
1: 
1:         outgoingList.add(null);
1:         outgoingList.add("test");
1:         outgoingList.add(255L);
1:         outgoingList.add("");
1:         outgoingList.add(-1);
1:         outgoingList.add(0.12f);
1: 
1:         outgoing.setObject(outgoingList);
1: 
1:         openwireProducer.send(outgoing);
1: 
0:         // Now consumer the ObjectMessage
1:         Message received = amqpConsumer.receive(2000);
1:         assertNotNull(received);
1:         assertTrue(received instanceof ObjectMessage);
1:         ObjectMessage incoming = (ObjectMessage) received;
1: 
1:         Object incomingObject = incoming.getObject();
1:         assertNotNull(incomingObject);
1:         assertTrue(incomingObject instanceof List);
1:         List<Object> incomingList = (List<Object>) incomingObject;
1:         assertEquals(outgoingList.size(), incomingList.size());
1: 
1:         amqp.close();
1:         openwire.close();
1:     }
1: }
============================================================================